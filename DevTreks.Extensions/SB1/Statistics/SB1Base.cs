using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using System.Xml.Linq;
using System.Globalization;
using System.Threading.Tasks;
using Errors = DevTreks.Exceptions.DevTreksErrors;

namespace DevTreks.Extensions
{
    /// <summary>
    ///Purpose:		Serialize and deserialize a Stock object with up to 20 indicators
    ///Author:		www.devtreks.org
    ///Date:		2018, September
    ///NOTES        1. These support unit input and output indicators. The Q must be set in 
    ///             the Op/Comp/Outcome.
    ///             In preparation for the machine learning algorithms, Version 2.1.4 made 
    ///             this pattern more flexible with more emphasis on Indicator.URL and 
    ///             less emphasis on Score.DataURL
    ///             Version 2.1.4 added machine learning algo and simplified calc patterns
    ///             2.1.6 supported legacy calc pattern as a new joint calcpattern
    /// </summary>             
    public class SB1Base : CostBenefitCalculator
    {
        public SB1Base()
            : base()
        {
            //resource stock fact
            InitSB1BaseProperties();
        }
        //copy constructor
        public SB1Base(SB1Base stockSR)
            : base(stockSR)
        {
            //stock fact
            CopySB1BaseProperties(stockSR);
        }
        #region "algo props"
        //calcParams
        public CalculatorParameters CalcParameters { get; set; }
        //internal algo props
        public string[] _colNames { get; set; }
        public string[] _rowNames { get; set; }
        //186 put this var in class because exceptions will lose their state and not use them when running subsequent calcs
        //don't analyze more than this.CalcParameters.UrisToAnalyze inds
        public string[] _indicators = new string[] { };
        public const string _score = "score";
        //indicatorindex is not passed to all functions
        public int IndicatorIndex = -1;
        //minus 1 because ++ syntax inits with jdata[0]
        private int _dataIndex = -1;
        //number of x data columns
        public const int xcols = 10;
        public static string[] MATHTERMS = new string[] {
                "I1.Q1","I1.Q2","I1.Q3","I1.Q4","I1.Q5","I1.QTM","I1.QTD1","I1.QTD2","I1.QTL","I1.QTU","I1.QT","I1.Q6","I1.Q7","I1.Q8","I1.Q9","I1.Q10",
                "I2.Q1","I2.Q2","I2.Q3","I2.Q4","I2.Q5","I2.QTM","I2.QTD1","I2.QTD2","I2.QTL","I2.QTU","I2.QT","I2.Q6","I2.Q7","I2.Q8","I2.Q9","I2.Q10",
                "I3.Q1","I3.Q2","I3.Q3","I3.Q4","I3.Q5","I3.QTM","I3.QTD1","I3.QTD2","I3.QTL","I3.QTU","I3.QT","I3.Q6","I3.Q7","I3.Q8","I3.Q9","I3.Q10",
                "I4.Q1","I4.Q2","I4.Q3","I4.Q4","I4.Q5","I4.QTM","I4.QTD1","I4.QTD2","I4.QTL","I4.QTU","I4.QT","I4.Q6","I4.Q7","I4.Q8","I4.Q9","I4.Q10",
                "I5.Q1","I5.Q2","I5.Q3","I5.Q4","I5.Q5","I5.QTM","I5.QTD1","I5.QTD2","I5.QTL","I5.QTU","I5.QT","I5.Q6","I5.Q7","I5.Q8","I5.Q9","I5.Q10",
                "I6.Q1","I6.Q2","I6.Q3","I6.Q4","I6.Q5","I6.QTM","I6.QTD1","I6.QTD2","I6.QTL","I6.QTU","I6.QT","I6.Q6","I6.Q7","I6.Q8","I6.Q9","I6.Q10",
                "I7.Q1","I7.Q2","I7.Q3","I7.Q4","I7.Q5","I7.QTM","I7.QTD1","I7.QTD2","I7.QTL","I7.QTU","I7.QT","I7.Q6","I7.Q7","I7.Q8","I7.Q9","I7.Q10",
                "I8.Q1","I8.Q2","I8.Q3","I8.Q4","I8.Q5","I8.QTM","I8.QTD1","I8.QTD2","I8.QTL","I8.QTU","I8.QT","I8.Q6","I8.Q7","I8.Q8","I8.Q9","I8.Q10",
                "I9.Q1","I9.Q2","I9.Q3","I9.Q4","I9.Q5","I9.QTM","I9.QTD1","I9.QTD2","I9.QTL","I9.QTU","I9.QT","I9.Q6","I9.Q7","I9.Q8","I9.Q9","I9.Q10",
                "I10.Q1","I10.Q2","I10.Q3","I10.Q4","I10.Q5","I10.QTM","I10.QTD1","I10.QTD2","I10.QTL","I10.QTU","I10.QT","I10.Q6","I10.Q7","I10.Q8","I10.Q9","I10.Q10",
                "I11.Q1","I11.Q2","I11.Q3","I11.Q4","I11.Q5","I11.QTM","I11.QTD1","I11.QTD2","I11.QTL","I11.QTU","I11.QT","I11.Q6","I11.Q7","I11.Q8","I11.Q9","I11.Q10",
                "I12.Q1","I12.Q2","I12.Q3","I12.Q4","I12.Q5","I12.QTM","I12.QTD1","I12.QTD2","I12.QTL","I12.QTU","I12.QT","I12.Q6","I12.Q7","I12.Q8","I12.Q9","I12.Q10", 
                "I13.Q1","I13.Q2","I13.Q3","I13.Q4","I13.Q5","I13.QTM","I13.QTD1","I13.QTD2","I13.QTL","I13.QTU","I13.QT","I13.Q6","I13.Q7","I13.Q8","I13.Q9","I13.Q10",
                "I14.Q1","I14.Q2","I14.Q3","I14.Q4","I14.Q5","I14.QTM","I14.QTD1","I14.QTD2","I14.QTL","I14.QTU","I14.QT","I14.Q6","I14.Q7","I14.Q8","I14.Q9","I14.Q10",
                "I15.Q1","I15.Q2","I15.Q3","I15.Q4","I15.Q5","I15.QTM","I15.QTD1","I15.QTD2","I15.QTL","I15.QTU","I15.QT","I15.Q6","I15.Q7","I15.Q8","I15.Q9","I15.Q10",
                "I16.Q1","I16.Q2","I16.Q3","I16.Q4","I16.Q5","I16.QTM","I16.QTD1","I16.QTD2","I16.QTL","I16.QTU","I16.QT","I16.Q6","I16.Q7","I16.Q8","I16.Q9","I16.Q10",
                "I17.Q1","I17.Q2","I17.Q3","I17.Q4","I17.Q5","I17.QTM","I17.QTD1","I17.QTD2","I17.QTL","I17.QTU","I17.QT","I17.Q6","I17.Q7","I17.Q8","I17.Q9","I17.Q10",
                "I18.Q1", "I18.Q2", "I18.Q3", "I18.Q4", "I18.Q5", "I18.QTM", "I18.QTD1", "I18.QTD2", "I18.QTL", "I18.QTU", "I18.QT","I18.Q6","I18.Q7","I18.Q8","I18.Q9","I18.Q10",
                "I19.Q1", "I19.Q2", "I19.Q3", "I19.Q4", "I19.Q5", "I19.QTM", "I19.QTD1", "I19.QTD2", "I19.QTL", "I19.QTU", "I19.QT","I19.Q6","I19.Q7","I19.Q8","I19.Q9","I19.Q10",
                "I20.Q1", "I20.Q2", "I20.Q3",  "I20.Q4", "I20.Q5", "I20.QTM", "I20.QTD1", "I20.QTD2", "I20.QTL", "I20.QTU", "I20.QT","I20.Q6","I20.Q7","I20.Q8","I20.Q9","I20.Q10"
                };
        
        #endregion
        #region "properties"
        //combined score for all indicators
        public double SB1Score { get; set; }
        public string SB1ScoreUnit { get; set; }
        public double SB1ScoreD1Amount { get; set; }
        public string SB1ScoreD1Unit { get; set; }
        public double SB1ScoreD2Amount { get; set; }
        public string SB1ScoreD2Unit { get; set; }
        public string SB1ScoreMathExpression { get; set; }
        public double SB1ScoreM { get; set; }
        public string SB1ScoreMUnit { get; set; }
        public double SB1ScoreLAmount { get; set; }
        public string SB1ScoreLUnit { get; set; }
        public double SB1ScoreUAmount { get; set; }
        public string SB1ScoreUUnit { get; set; }
        public string SB1ScoreDistType { get; set; }
        public string SB1ScoreMathType { get; set; }
        public string SB1ScoreMathSubType { get; set; }
        public string SB1ScoreMathResult { get; set; }
        public string SB1JointDataURL { get; set; }
        public int SB1Iterations { get; set; }
        public int SB1CILevel { get; set; }
        public int SB1Random { get; set; }
        public string SB1BaseIO { get; set; }
        public const string cSB1Score = "SB1Score";
        public const string cSB1ScoreUnit = "SB1ScoreUnit";
        public const string cSB1ScoreD1Amount = "SB1ScoreD1Amount";
        public const string cSB1ScoreD1Unit = "SB1ScoreD1Unit";
        public const string cSB1ScoreD2Amount = "SB1ScoreD2Amount";
        public const string cSB1ScoreD2Unit = "SB1ScoreD2Unit";
        public const string cSB1ScoreMathExpression = "SB1ScoreMathExpression";
        public const string cSB1ScoreM = "SB1ScoreM";
        public const string cSB1ScoreMUnit = "SB1ScoreMUnit";
        public const string cSB1ScoreLAmount = "SB1ScoreLAmount";
        public const string cSB1ScoreLUnit = "SB1ScoreLUnit";
        public const string cSB1ScoreUAmount = "SB1ScoreUAmount";
        public const string cSB1ScoreUUnit = "SB1ScoreUUnit";
        public const string cSB1ScoreDistType = "SB1ScoreDistType";
        public const string cSB1ScoreMathType = "SB1ScoreMathType";
        public const string cSB1ScoreMathSubType = "SB1ScoreMathSubType";
        public const string cSB1ScoreMathResult = "SB1ScoreMathResult";
        public const string cSB1JointDataURL = "SB1JointDataURL";
        public const string cSB1Iterations = "SB1Iterations";
        public const string cSB1CILevel = "SB1CILevel";
        public const string cSB1Random = "SB1Random";
        public const string cSB1BaseIO = "SB1BaseIO";
        //comparisons to display
        public double SBCount { get; set; }
        public const string cSBCount = "SBCount";
        //base io to update
        public enum BASEIO_TYPES
        {
            none = 0,
            quantity = 1,
            times = 2,
            ocprice = 3,
            aohprice = 4,
            capprice = 5,
            benprice = 6,
            composquantity = 7,
        }
        //name of indicator 1
        public string SB1Name1 { get; set; }
        //description
        public string SB1Description1 { get; set; }
        //url
        public string SB1URL1 { get; set; }
        //aggregation label
        public string SB1Label1 { get; set; }
        //RUC_TYPES or distribution enum
        public string SB1Type1 { get; set; }
        //date of indicator measurement
        public DateTime SB1Date1 { get; set; }
        //algorithm1 = basic stats ...
        public string SB1MathType1 { get; set; }
        //first quantitative prop
        //amount
        public double SB11Amount1 { get; set; }
        public string SB11Unit1 { get; set; }
        //second quantity
        public double SB12Amount1 { get; set; }
        //second unit
        public string SB12Unit1 { get; set; }
        //third quantity
        public double SB13Amount1 { get; set; }
        public string SB13Unit1 { get; set; }
        public double SB14Amount1 { get; set; }
        public string SB14Unit1 { get; set; }
        //total of the two indicators (p*q = cost)
        public double SB15Amount1 { get; set; }
        //unit for total (i.e. hours physical activity, cost, benefit, number (stock groups)
        public string SB15Unit1 { get; set; }
        //related indicator label i.e. emissions and env performance
        public string SB1RelLabel1 { get; set; }
        public double SB1TAmount1 { get; set; }
        public string SB1TUnit1 { get; set; }
        public double SB1TD1Amount1 { get; set; }
        public string SB1TD1Unit1 { get; set; }
        public double SB1TD2Amount1 { get; set; }
        public string SB1TD2Unit1 { get; set; }
        public string SB1MathResult1 { get; set; }
        public string SB1MathSubType1 { get; set; }

        public double SB1TMAmount1 { get; set; }
        public string SB1TMUnit1 { get; set; }
        public double SB1TLAmount1 { get; set; }
        public string SB1TLUnit1 { get; set; }
        public double SB1TUAmount1 { get; set; }
        public string SB1TUUnit1 { get; set; }
        public string SB1MathOperator1 { get; set; }
        public string SB1MathExpression1 { get; set; }
        public string SB1BaseIO1 { get; set; }

        public const string cSB1Name1 = "SB1Name1";
        public const string cSB1Description1 = "SB1Description1";
        public const string cSB1URL1 = "SB1URL1";
        public const string cSB1Label1 = "SB1Label1";
        public const string cSB1Type1 = "SB1Type1";
        public const string cSB1Date1 = "SB1Date1";
        public const string cSB1MathType1 = "SB1MathType1";
        public const string cSB11Amount1 = "SB11Amount1";
        public const string cSB11Unit1 = "SB11Unit1";
        public const string cSB12Amount1 = "SB12Amount1";
        public const string cSB12Unit1 = "SB12Unit1";
        public const string cSB13Amount1 = "SB13Amount1";
        public const string cSB13Unit1 = "SB13Unit1";
        public const string cSB14Amount1 = "SB14Amount1";
        public const string cSB14Unit1 = "SB14Unit1";
        public const string cSB15Amount1 = "SB15Amount1";
        public const string cSB15Unit1 = "SB15Unit1";
        public const string cSB1RelLabel1 = "SB1RelLabel1";
        public const string cSB1TAmount1 = "SB1TAmount1";
        public const string cSB1TUnit1 = "SB1TUnit1";
        public const string cSB1TD1Amount1 = "SB1TD1Amount1";
        public const string cSB1TD1Unit1 = "SB1TD1Unit1";
        public const string cSB1TD2Amount1 = "SB1TD2Amount1";
        public const string cSB1TD2Unit1 = "SB1TD2Unit1";
        public const string cSB1MathResult1 = "SB1MathResult1";
        public const string cSB1MathSubType1 = "SB1MathSubType1";

        public const string cSB1TMAmount1 = "SB1TMAmount1";
        public const string cSB1TMUnit1 = "SB1TMUnit1";
        public const string cSB1TLAmount1 = "SB1TLAmount1";
        public const string cSB1TLUnit1 = "SB1TLUnit1";
        public const string cSB1TUAmount1 = "SB1TUAmount1";
        public const string cSB1TUUnit1 = "SB1TUUnit1";
        public const string cSB1MathOperator1 = "SB1MathOperator1";
        public const string cSB1MathExpression1 = "SB1MathExpression1";
        public const string cSB1BaseIO1 = "SB1BaseIO1";

        //name of indicator 2
        public string SB1Name2 { get; set; }
        public string SB1Description2 { get; set; }
        public string SB1URL2 { get; set; }

        public string SB1Label2 { get; set; }
        public string SB1Type2 { get; set; }
        public DateTime SB1Date2 { get; set; }
        public string SB1MathType2 { get; set; }
        public double SB11Amount2 { get; set; }
        public string SB11Unit2 { get; set; }
        public double SB12Amount2 { get; set; }
        public string SB12Unit2 { get; set; }
        public double SB13Amount2 { get; set; }
        public string SB13Unit2 { get; set; }
        public double SB14Amount2 { get; set; }
        public string SB14Unit2 { get; set; }
        public double SB15Amount2 { get; set; }
        public string SB15Unit2 { get; set; }
        public string SB1RelLabel2 { get; set; }
        public double SB1TAmount2 { get; set; }
        public string SB1TUnit2 { get; set; }
        public double SB1TD1Amount2 { get; set; }
        public string SB1TD1Unit2 { get; set; }
        public double SB1TD2Amount2 { get; set; }
        public string SB1TD2Unit2 { get; set; }
        public string SB1MathResult2 { get; set; }
        public string SB1MathSubType2 { get; set; }

        public double SB1TMAmount2 { get; set; }
        public string SB1TMUnit2 { get; set; }
        public double SB1TLAmount2 { get; set; }
        public string SB1TLUnit2 { get; set; }
        public double SB1TUAmount2 { get; set; }
        public string SB1TUUnit2 { get; set; }
        public string SB1MathOperator2 { get; set; }
        public string SB1MathExpression2 { get; set; }
        public string SB1BaseIO2 { get; set; }

        public const string cSB1Name2 = "SB1Name2";
        public const string cSB1Description2 = "SB1Description2";
        public const string cSB1URL2 = "SB1URL2";
        public const string cSB1Label2 = "SB1Label2";
        public const string cSB1Type2 = "SB1Type2";
        public const string cSB1Date2 = "SB1Date2";
        public const string cSB1MathType2 = "SB1MathType2";
        public const string cSB11Amount2 = "SB11Amount2";
        public const string cSB11Unit2 = "SB11Unit2";
        public const string cSB12Amount2 = "SB12Amount2";
        public const string cSB12Unit2 = "SB12Unit2";
        public const string cSB13Amount2 = "SB13Amount2";
        public const string cSB13Unit2 = "SB13Unit2";
        public const string cSB14Amount2 = "SB14Amount2";
        public const string cSB14Unit2 = "SB14Unit2";
        public const string cSB15Amount2 = "SB15Amount2";
        public const string cSB15Unit2 = "SB15Unit2";
        public const string cSB1RelLabel2 = "SB1RelLabel2";
        public const string cSB1TAmount2 = "SB1TAmount2";
        public const string cSB1TUnit2 = "SB1TUnit2";
        public const string cSB1TD1Amount2 = "SB1TD1Amount2";
        public const string cSB1TD1Unit2 = "SB1TD1Unit2";
        public const string cSB1TD2Amount2 = "SB1TD2Amount2";
        public const string cSB1TD2Unit2 = "SB1TD2Unit2";
        public const string cSB1MathResult2 = "SB1MathResult2";
        public const string cSB1MathSubType2 = "SB1MathSubType2";

        public const string cSB1TMAmount2 = "SB1TMAmount2";
        public const string cSB1TMUnit2 = "SB1TMUnit2";
        public const string cSB1TLAmount2 = "SB1TLAmount2";
        public const string cSB1TLUnit2 = "SB1TLUnit2";
        public const string cSB1TUAmount2 = "SB1TUAmount2";
        public const string cSB1TUUnit2 = "SB1TUUnit2";
        public const string cSB1MathOperator2 = "SB1MathOperator2";
        public const string cSB1MathExpression2 = "SB1MathExpression2";
        public const string cSB1BaseIO2 = "SB1BaseIO2";

        //name of indicator 3
        public string SB1Name3 { get; set; }
        public string SB1Description3 { get; set; }
        public string SB1URL3 { get; set; }
        public string SB1Label3 { get; set; }
        public string SB1Type3 { get; set; }
        public DateTime SB1Date3 { get; set; }
        public string SB1MathType3 { get; set; }
        public double SB11Amount3 { get; set; }
        public string SB11Unit3 { get; set; }
        public double SB12Amount3 { get; set; }
        public string SB12Unit3 { get; set; }
        public double SB13Amount3 { get; set; }
        public string SB13Unit3 { get; set; }
        public double SB14Amount3 { get; set; }
        public string SB14Unit3 { get; set; }
        public double SB15Amount3 { get; set; }
        public string SB15Unit3 { get; set; }
        public string SB1RelLabel3 { get; set; }
        public double SB1TAmount3 { get; set; }
        public string SB1TUnit3 { get; set; }
        public double SB1TD1Amount3 { get; set; }
        public string SB1TD1Unit3 { get; set; }
        public double SB1TD2Amount3 { get; set; }
        public string SB1TD2Unit3 { get; set; }
        public string SB1MathResult3 { get; set; }
        public string SB1MathSubType3 { get; set; }

        public double SB1TMAmount3 { get; set; }
        public string SB1TMUnit3 { get; set; }
        public double SB1TLAmount3 { get; set; }
        public string SB1TLUnit3 { get; set; }
        public double SB1TUAmount3 { get; set; }
        public string SB1TUUnit3 { get; set; }
        public string SB1MathOperator3 { get; set; }
        public string SB1MathExpression3 { get; set; }
        public string SB1BaseIO3 { get; set; }

        public const string cSB1Name3 = "SB1Name3";
        public const string cSB1Description3 = "SB1Description3";
        public const string cSB1URL3 = "SB1URL3";
        public const string cSB1Label3 = "SB1Label3";
        public const string cSB1Type3 = "SB1Type3";
        public const string cSB1Date3 = "SB1Date3";
        public const string cSB1MathType3 = "SB1MathType3";
        public const string cSB11Amount3 = "SB11Amount3";
        public const string cSB11Unit3 = "SB11Unit3";
        public const string cSB12Amount3 = "SB12Amount3";
        public const string cSB12Unit3 = "SB12Unit3";
        public const string cSB13Amount3 = "SB13Amount3";
        public const string cSB13Unit3 = "SB13Unit3";
        public const string cSB14Amount3 = "SB14Amount3";
        public const string cSB14Unit3 = "SB14Unit3";
        public const string cSB15Amount3 = "SB15Amount3";
        public const string cSB15Unit3 = "SB15Unit3";
        public const string cSB1RelLabel3 = "SB1RelLabel3";
        public const string cSB1TAmount3 = "SB1TAmount3";
        public const string cSB1TUnit3 = "SB1TUnit3";
        public const string cSB1TD1Amount3 = "SB1TD1Amount3";
        public const string cSB1TD1Unit3 = "SB1TD1Unit3";
        public const string cSB1TD2Amount3 = "SB1TD2Amount3";
        public const string cSB1TD2Unit3 = "SB1TD2Unit3";
        public const string cSB1MathResult3 = "SB1MathResult3";
        public const string cSB1MathSubType3 = "SB1MathSubType3";

        public const string cSB1TMAmount3 = "SB1TMAmount3";
        public const string cSB1TMUnit3 = "SB1TMUnit3";
        public const string cSB1TLAmount3 = "SB1TLAmount3";
        public const string cSB1TLUnit3 = "SB1TLUnit3";
        public const string cSB1TUAmount3 = "SB1TUAmount3";
        public const string cSB1TUUnit3 = "SB1TUUnit3";
        public const string cSB1MathOperator3 = "SB1MathOperator3";
        public const string cSB1MathExpression3 = "SB1MathExpression3";
        public const string cSB1BaseIO3 = "SB1BaseIO3";

        //name of indicator 4
        public string SB1Name4 { get; set; }
        public string SB1Description4 { get; set; }
        public string SB1URL4 { get; set; }
        public string SB1Label4 { get; set; }
        public string SB1Type4 { get; set; }
        public DateTime SB1Date4 { get; set; }
        public string SB1MathType4 { get; set; }
        public double SB11Amount4 { get; set; }
        public string SB11Unit4 { get; set; }
        public double SB12Amount4 { get; set; }
        public string SB12Unit4 { get; set; }
        public double SB13Amount4 { get; set; }
        public string SB13Unit4 { get; set; }
        public double SB14Amount4 { get; set; }
        public string SB14Unit4 { get; set; }
        public double SB15Amount4 { get; set; }
        public string SB15Unit4 { get; set; }
        public string SB1RelLabel4 { get; set; }
        public double SB1TAmount4 { get; set; }
        public string SB1TUnit4 { get; set; }
        public double SB1TD1Amount4 { get; set; }
        public string SB1TD1Unit4 { get; set; }
        public double SB1TD2Amount4 { get; set; }
        public string SB1TD2Unit4 { get; set; }
        public string SB1MathResult4 { get; set; }
        public string SB1MathSubType4 { get; set; }

        public double SB1TMAmount4 { get; set; }
        public string SB1TMUnit4 { get; set; }
        public double SB1TLAmount4 { get; set; }
        public string SB1TLUnit4 { get; set; }
        public double SB1TUAmount4 { get; set; }
        public string SB1TUUnit4 { get; set; }
        public string SB1MathOperator4 { get; set; }
        public string SB1MathExpression4 { get; set; }
        public string SB1BaseIO4 { get; set; }

        public const string cSB1Name4 = "SB1Name4";
        public const string cSB1Description4 = "SB1Description4";
        public const string cSB1URL4 = "SB1URL4";
        public const string cSB1Label4 = "SB1Label4";
        public const string cSB1Type4 = "SB1Type4";
        public const string cSB1Date4 = "SB1Date4";
        public const string cSB1MathType4 = "SB1MathType4";
        public const string cSB11Amount4 = "SB11Amount4";
        public const string cSB11Unit4 = "SB11Unit4";
        public const string cSB12Amount4 = "SB12Amount4";
        public const string cSB12Unit4 = "SB12Unit4";
        public const string cSB13Amount4 = "SB13Amount4";
        public const string cSB13Unit4 = "SB13Unit4";
        public const string cSB14Amount4 = "SB14Amount4";
        public const string cSB14Unit4 = "SB14Unit4";
        public const string cSB15Amount4 = "SB15Amount4";
        public const string cSB15Unit4 = "SB15Unit4";
        public const string cSB1RelLabel4 = "SB1RelLabel4";
        public const string cSB1TAmount4 = "SB1TAmount4";
        public const string cSB1TUnit4 = "SB1TUnit4";
        public const string cSB1TD1Amount4 = "SB1TD1Amount4";
        public const string cSB1TD1Unit4 = "SB1TD1Unit4";
        public const string cSB1TD2Amount4 = "SB1TD2Amount4";
        public const string cSB1TD2Unit4 = "SB1TD2Unit4";
        public const string cSB1MathResult4 = "SB1MathResult4";
        public const string cSB1MathSubType4 = "SB1MathSubType4";

        public const string cSB1TMAmount4 = "SB1TMAmount4";
        public const string cSB1TMUnit4 = "SB1TMUnit4";
        public const string cSB1TLAmount4 = "SB1TLAmount4";
        public const string cSB1TLUnit4 = "SB1TLUnit4";
        public const string cSB1TUAmount4 = "SB1TUAmount4";
        public const string cSB1TUUnit4 = "SB1TUUnit4";
        public const string cSB1MathOperator4 = "SB1MathOperator4";
        public const string cSB1MathExpression4 = "SB1MathExpression4";
        public const string cSB1BaseIO4 = "SB1BaseIO4";

        //name of indicator 5
        public string SB1Name5 { get; set; }
        public string SB1Description5 { get; set; }
        public string SB1URL5 { get; set; }
        public string SB1Label5 { get; set; }
        public string SB1Type5 { get; set; }
        public DateTime SB1Date5 { get; set; }
        public string SB1MathType5 { get; set; }
        public double SB11Amount5 { get; set; }
        public string SB11Unit5 { get; set; }
        public double SB12Amount5 { get; set; }
        public string SB12Unit5 { get; set; }
        public double SB13Amount5 { get; set; }
        public string SB13Unit5 { get; set; }
        public double SB14Amount5 { get; set; }
        public string SB14Unit5 { get; set; }
        public double SB15Amount5 { get; set; }
        public string SB15Unit5 { get; set; }
        public string SB1RelLabel5 { get; set; }
        public double SB1TAmount5 { get; set; }
        public string SB1TUnit5 { get; set; }
        public double SB1TD1Amount5 { get; set; }
        public string SB1TD1Unit5 { get; set; }
        public double SB1TD2Amount5 { get; set; }
        public string SB1TD2Unit5 { get; set; }
        public string SB1MathResult5 { get; set; }
        public string SB1MathSubType5 { get; set; }

        public double SB1TMAmount5 { get; set; }
        public string SB1TMUnit5 { get; set; }
        public double SB1TLAmount5 { get; set; }
        public string SB1TLUnit5 { get; set; }
        public double SB1TUAmount5 { get; set; }
        public string SB1TUUnit5 { get; set; }
        public string SB1MathOperator5 { get; set; }
        public string SB1MathExpression5 { get; set; }
        public string SB1BaseIO5 { get; set; }

        public const string cSB1Name5 = "SB1Name5";
        public const string cSB1Description5 = "SB1Description5";
        public const string cSB1URL5 = "SB1URL5";
        public const string cSB1Label5 = "SB1Label5";
        public const string cSB1Type5 = "SB1Type5";
        public const string cSB1Date5 = "SB1Date5";
        public const string cSB1MathType5 = "SB1MathType5";
        public const string cSB11Amount5 = "SB11Amount5";
        public const string cSB11Unit5 = "SB11Unit5";
        public const string cSB12Amount5 = "SB12Amount5";
        public const string cSB12Unit5 = "SB12Unit5";
        public const string cSB13Amount5 = "SB13Amount5";
        public const string cSB13Unit5 = "SB13Unit5";
        public const string cSB14Amount5 = "SB14Amount5";
        public const string cSB14Unit5 = "SB14Unit5";
        public const string cSB15Amount5 = "SB15Amount5";
        public const string cSB15Unit5 = "SB15Unit5";
        public const string cSB1RelLabel5 = "SB1RelLabel5";
        public const string cSB1TAmount5 = "SB1TAmount5";
        public const string cSB1TUnit5 = "SB1TUnit5";
        public const string cSB1TD1Amount5 = "SB1TD1Amount5";
        public const string cSB1TD1Unit5 = "SB1TD1Unit5";
        public const string cSB1TD2Amount5 = "SB1TD2Amount5";
        public const string cSB1TD2Unit5 = "SB1TD2Unit5";
        public const string cSB1MathResult5 = "SB1MathResult5";
        public const string cSB1MathSubType5 = "SB1MathSubType5";

        public const string cSB1TMAmount5 = "SB1TMAmount5";
        public const string cSB1TMUnit5 = "SB1TMUnit5";
        public const string cSB1TLAmount5 = "SB1TLAmount5";
        public const string cSB1TLUnit5 = "SB1TLUnit5";
        public const string cSB1TUAmount5 = "SB1TUAmount5";
        public const string cSB1TUUnit5 = "SB1TUUnit5";
        public const string cSB1MathOperator5 = "SB1MathOperator5";
        public const string cSB1MathExpression5 = "SB1MathExpression5";
        public const string cSB1BaseIO5 = "SB1BaseIO5";

        //name of indicator 6
        public string SB1Name6 { get; set; }
        public string SB1Description6 { get; set; }
        public string SB1URL6 { get; set; }
        public string SB1Label6 { get; set; }
        public string SB1Type6 { get; set; }
        public DateTime SB1Date6 { get; set; }
        public string SB1MathType6 { get; set; }
        public double SB11Amount6 { get; set; }
        public string SB11Unit6 { get; set; }
        public double SB12Amount6 { get; set; }
        public string SB12Unit6 { get; set; }
        public double SB13Amount6 { get; set; }
        public string SB13Unit6 { get; set; }
        public double SB14Amount6 { get; set; }
        public string SB14Unit6 { get; set; }
        public double SB15Amount6 { get; set; }
        public string SB15Unit6 { get; set; }
        public string SB1RelLabel6 { get; set; }
        public double SB1TAmount6 { get; set; }
        public string SB1TUnit6 { get; set; }
        public double SB1TD1Amount6 { get; set; }
        public string SB1TD1Unit6 { get; set; }
        public double SB1TD2Amount6 { get; set; }
        public string SB1TD2Unit6 { get; set; }
        public string SB1MathResult6 { get; set; }
        public string SB1MathSubType6 { get; set; }

        public double SB1TMAmount6 { get; set; }
        public string SB1TMUnit6 { get; set; }
        public double SB1TLAmount6 { get; set; }
        public string SB1TLUnit6 { get; set; }
        public double SB1TUAmount6 { get; set; }
        public string SB1TUUnit6 { get; set; }
        public string SB1MathOperator6 { get; set; }
        public string SB1MathExpression6 { get; set; }
        public string SB1BaseIO6 { get; set; }

        public const string cSB1Name6 = "SB1Name6";
        public const string cSB1Description6 = "SB1Description6";
        public const string cSB1URL6 = "SB1URL6";
        public const string cSB1Label6 = "SB1Label6";
        public const string cSB1Type6 = "SB1Type6";
        public const string cSB1Date6 = "SB1Date6";
        public const string cSB1MathType6 = "SB1MathType6";
        public const string cSB11Amount6 = "SB11Amount6";
        public const string cSB11Unit6 = "SB11Unit6";
        public const string cSB12Amount6 = "SB12Amount6";
        public const string cSB12Unit6 = "SB12Unit6";
        public const string cSB13Amount6 = "SB13Amount6";
        public const string cSB13Unit6 = "SB13Unit6";
        public const string cSB14Amount6 = "SB14Amount6";
        public const string cSB14Unit6 = "SB14Unit6";
        public const string cSB15Amount6 = "SB15Amount6";
        public const string cSB15Unit6 = "SB15Unit6";
        public const string cSB1RelLabel6 = "SB1RelLabel6";
        public const string cSB1TAmount6 = "SB1TAmount6";
        public const string cSB1TUnit6 = "SB1TUnit6";
        public const string cSB1TD1Amount6 = "SB1TD1Amount6";
        public const string cSB1TD1Unit6 = "SB1TD1Unit6";
        public const string cSB1TD2Amount6 = "SB1TD2Amount6";
        public const string cSB1TD2Unit6 = "SB1TD2Unit6";
        public const string cSB1MathResult6 = "SB1MathResult6";
        public const string cSB1MathSubType6 = "SB1MathSubType6";

        public const string cSB1TMAmount6 = "SB1TMAmount6";
        public const string cSB1TMUnit6 = "SB1TMUnit6";
        public const string cSB1TLAmount6 = "SB1TLAmount6";
        public const string cSB1TLUnit6 = "SB1TLUnit6";
        public const string cSB1TUAmount6 = "SB1TUAmount6";
        public const string cSB1TUUnit6 = "SB1TUUnit6";
        public const string cSB1MathOperator6 = "SB1MathOperator6";
        public const string cSB1MathExpression6 = "SB1MathExpression6";
        public const string cSB1BaseIO6 = "SB1BaseIO6";

        //name of indicator 7
        public string SB1Name7 { get; set; }
        public string SB1Description7 { get; set; }
        public string SB1URL7 { get; set; }

        public string SB1Label7 { get; set; }
        public string SB1Type7 { get; set; }
        public DateTime SB1Date7 { get; set; }
        public string SB1MathType7 { get; set; }
        public double SB11Amount7 { get; set; }
        public string SB11Unit7 { get; set; }
        public double SB12Amount7 { get; set; }
        public string SB12Unit7 { get; set; }
        public double SB13Amount7 { get; set; }
        public string SB13Unit7 { get; set; }
        public double SB14Amount7 { get; set; }
        public string SB14Unit7 { get; set; }
        public double SB15Amount7 { get; set; }
        public string SB15Unit7 { get; set; }
        public string SB1RelLabel7 { get; set; }
        public double SB1TAmount7 { get; set; }
        public string SB1TUnit7 { get; set; }
        public double SB1TD1Amount7 { get; set; }
        public string SB1TD1Unit7 { get; set; }
        public double SB1TD2Amount7 { get; set; }
        public string SB1TD2Unit7 { get; set; }
        public string SB1MathResult7 { get; set; }
        public string SB1MathSubType7 { get; set; }

        public double SB1TMAmount7 { get; set; }
        public string SB1TMUnit7 { get; set; }
        public double SB1TLAmount7 { get; set; }
        public string SB1TLUnit7 { get; set; }
        public double SB1TUAmount7 { get; set; }
        public string SB1TUUnit7 { get; set; }
        public string SB1MathOperator7 { get; set; }
        public string SB1MathExpression7 { get; set; }
        public string SB1BaseIO7 { get; set; }

        public const string cSB1Name7 = "SB1Name7";
        public const string cSB1Description7 = "SB1Description7";
        public const string cSB1URL7 = "SB1URL7";
        public const string cSB1Label7 = "SB1Label7";
        public const string cSB1Type7 = "SB1Type7";
        public const string cSB1Date7 = "SB1Date7";
        public const string cSB1MathType7 = "SB1MathType7";
        public const string cSB11Amount7 = "SB11Amount7";
        public const string cSB11Unit7 = "SB11Unit7";
        public const string cSB12Amount7 = "SB12Amount7";
        public const string cSB12Unit7 = "SB12Unit7";
        public const string cSB13Amount7 = "SB13Amount7";
        public const string cSB13Unit7 = "SB13Unit7";
        public const string cSB14Amount7 = "SB14Amount7";
        public const string cSB14Unit7 = "SB14Unit7";
        public const string cSB15Amount7 = "SB15Amount7";
        public const string cSB15Unit7 = "SB15Unit7";
        public const string cSB1RelLabel7 = "SB1RelLabel7";
        public const string cSB1TAmount7 = "SB1TAmount7";
        public const string cSB1TUnit7 = "SB1TUnit7";
        public const string cSB1TD1Amount7 = "SB1TD1Amount7";
        public const string cSB1TD1Unit7 = "SB1TD1Unit7";
        public const string cSB1TD2Amount7 = "SB1TD2Amount7";
        public const string cSB1TD2Unit7 = "SB1TD2Unit7";
        public const string cSB1MathResult7 = "SB1MathResult7";
        public const string cSB1MathSubType7 = "SB1MathSubType7";

        public const string cSB1TMAmount7 = "SB1TMAmount7";
        public const string cSB1TMUnit7 = "SB1TMUnit7";
        public const string cSB1TLAmount7 = "SB1TLAmount7";
        public const string cSB1TLUnit7 = "SB1TLUnit7";
        public const string cSB1TUAmount7 = "SB1TUAmount7";
        public const string cSB1TUUnit7 = "SB1TUUnit7";
        public const string cSB1MathOperator7 = "SB1MathOperator7";
        public const string cSB1MathExpression7 = "SB1MathExpression7";
        public const string cSB1BaseIO7 = "SB1BaseIO7";

        //name of indicator 8
        public string SB1Name8 { get; set; }
        public string SB1Description8 { get; set; }
        public string SB1URL8 { get; set; }
        public string SB1Label8 { get; set; }
        public string SB1Type8 { get; set; }
        public DateTime SB1Date8 { get; set; }
        public string SB1MathType8 { get; set; }
        public double SB11Amount8 { get; set; }
        public string SB11Unit8 { get; set; }
        public double SB12Amount8 { get; set; }
        public string SB12Unit8 { get; set; }
        public double SB13Amount8 { get; set; }
        public string SB13Unit8 { get; set; }
        public double SB14Amount8 { get; set; }
        public string SB14Unit8 { get; set; }
        public double SB15Amount8 { get; set; }
        public string SB15Unit8 { get; set; }
        public string SB1RelLabel8 { get; set; }
        public double SB1TAmount8 { get; set; }
        public string SB1TUnit8 { get; set; }
        public double SB1TD1Amount8 { get; set; }
        public string SB1TD1Unit8 { get; set; }
        public double SB1TD2Amount8 { get; set; }
        public string SB1TD2Unit8 { get; set; }
        public string SB1MathResult8 { get; set; }
        public string SB1MathSubType8 { get; set; }

        public double SB1TMAmount8 { get; set; }
        public string SB1TMUnit8 { get; set; }
        public double SB1TLAmount8 { get; set; }
        public string SB1TLUnit8 { get; set; }
        public double SB1TUAmount8 { get; set; }
        public string SB1TUUnit8 { get; set; }
        public string SB1MathOperator8 { get; set; }
        public string SB1MathExpression8 { get; set; }
        public string SB1BaseIO8 { get; set; }

        public const string cSB1Name8 = "SB1Name8";
        public const string cSB1Description8 = "SB1Description8";
        public const string cSB1URL8 = "SB1URL8";
        public const string cSB1Label8 = "SB1Label8";
        public const string cSB1Type8 = "SB1Type8";
        public const string cSB1Date8 = "SB1Date8";
        public const string cSB1MathType8 = "SB1MathType8";
        public const string cSB11Amount8 = "SB11Amount8";
        public const string cSB11Unit8 = "SB11Unit8";
        public const string cSB12Amount8 = "SB12Amount8";
        public const string cSB12Unit8 = "SB12Unit8";
        public const string cSB13Amount8 = "SB13Amount8";
        public const string cSB13Unit8 = "SB13Unit8";
        public const string cSB14Amount8 = "SB14Amount8";
        public const string cSB14Unit8 = "SB14Unit8";
        public const string cSB15Amount8 = "SB15Amount8";
        public const string cSB15Unit8 = "SB15Unit8";
        public const string cSB1RelLabel8 = "SB1RelLabel8";
        public const string cSB1TAmount8 = "SB1TAmount8";
        public const string cSB1TUnit8 = "SB1TUnit8";
        public const string cSB1TD1Amount8 = "SB1TD1Amount8";
        public const string cSB1TD1Unit8 = "SB1TD1Unit8";
        public const string cSB1TD2Amount8 = "SB1TD2Amount8";
        public const string cSB1TD2Unit8 = "SB1TD2Unit8";
        public const string cSB1MathResult8 = "SB1MathResult8";
        public const string cSB1MathSubType8 = "SB1MathSubType8";

        public const string cSB1TMAmount8 = "SB1TMAmount8";
        public const string cSB1TMUnit8 = "SB1TMUnit8";
        public const string cSB1TLAmount8 = "SB1TLAmount8";
        public const string cSB1TLUnit8 = "SB1TLUnit8";
        public const string cSB1TUAmount8 = "SB1TUAmount8";
        public const string cSB1TUUnit8 = "SB1TUUnit8";
        public const string cSB1MathOperator8 = "SB1MathOperator8";
        public const string cSB1MathExpression8 = "SB1MathExpression8";
        public const string cSB1BaseIO8 = "SB1BaseIO8";

        //name of indicator 9
        public string SB1Name9 { get; set; }
        public string SB1Description9 { get; set; }
        public string SB1URL9 { get; set; }
        public string SB1Label9 { get; set; }
        public string SB1Type9 { get; set; }
        public DateTime SB1Date9 { get; set; }
        public string SB1MathType9 { get; set; }
        public double SB11Amount9 { get; set; }
        public string SB11Unit9 { get; set; }
        public double SB12Amount9 { get; set; }
        public string SB12Unit9 { get; set; }
        public double SB13Amount9 { get; set; }
        public string SB13Unit9 { get; set; }
        public double SB14Amount9 { get; set; }
        public string SB14Unit9 { get; set; }
        public double SB15Amount9 { get; set; }
        public string SB15Unit9 { get; set; }
        public string SB1RelLabel9 { get; set; }
        public double SB1TAmount9 { get; set; }
        public string SB1TUnit9 { get; set; }
        public double SB1TD1Amount9 { get; set; }
        public string SB1TD1Unit9 { get; set; }
        public double SB1TD2Amount9 { get; set; }
        public string SB1TD2Unit9 { get; set; }
        public string SB1MathResult9 { get; set; }
        public string SB1MathSubType9 { get; set; }

        public double SB1TMAmount9 { get; set; }
        public string SB1TMUnit9 { get; set; }
        public double SB1TLAmount9 { get; set; }
        public string SB1TLUnit9 { get; set; }
        public double SB1TUAmount9 { get; set; }
        public string SB1TUUnit9 { get; set; }
        public string SB1MathOperator9 { get; set; }
        public string SB1MathExpression9 { get; set; }
        public string SB1BaseIO9 { get; set; }

        public const string cSB1Name9 = "SB1Name9";
        public const string cSB1Description9 = "SB1Description9";
        public const string cSB1URL9 = "SB1URL9";
        public const string cSB1Label9 = "SB1Label9";
        public const string cSB1Type9 = "SB1Type9";
        public const string cSB1Date9 = "SB1Date9";
        public const string cSB1MathType9 = "SB1MathType9";
        public const string cSB11Amount9 = "SB11Amount9";
        public const string cSB11Unit9 = "SB11Unit9";
        public const string cSB12Amount9 = "SB12Amount9";
        public const string cSB12Unit9 = "SB12Unit9";
        public const string cSB13Amount9 = "SB13Amount9";
        public const string cSB13Unit9 = "SB13Unit9";
        public const string cSB14Amount9 = "SB14Amount9";
        public const string cSB14Unit9 = "SB14Unit9";
        public const string cSB15Amount9 = "SB15Amount9";
        public const string cSB15Unit9 = "SB15Unit9";
        public const string cSB1RelLabel9 = "SB1RelLabel9";
        public const string cSB1TAmount9 = "SB1TAmount9";
        public const string cSB1TUnit9 = "SB1TUnit9";
        public const string cSB1TD1Amount9 = "SB1TD1Amount9";
        public const string cSB1TD1Unit9 = "SB1TD1Unit9";
        public const string cSB1TD2Amount9 = "SB1TD2Amount9";
        public const string cSB1TD2Unit9 = "SB1TD2Unit9";
        public const string cSB1MathResult9 = "SB1MathResult9";
        public const string cSB1MathSubType9 = "SB1MathSubType9";

        public const string cSB1TMAmount9 = "SB1TMAmount9";
        public const string cSB1TMUnit9 = "SB1TMUnit9";
        public const string cSB1TLAmount9 = "SB1TLAmount9";
        public const string cSB1TLUnit9 = "SB1TLUnit9";
        public const string cSB1TUAmount9 = "SB1TUAmount9";
        public const string cSB1TUUnit9 = "SB1TUUnit9";
        public const string cSB1MathOperator9 = "SB1MathOperator9";
        public const string cSB1MathExpression9 = "SB1MathExpression9";
        public const string cSB1BaseIO9 = "SB1BaseIO9";

        //name of indicator 10
        public string SB1Name10 { get; set; }
        public string SB1Description10 { get; set; }
        public string SB1URL10 { get; set; }
        public string SB1Label10 { get; set; }
        public string SB1Type10 { get; set; }
        public DateTime SB1Date10 { get; set; }
        public string SB1MathType10 { get; set; }
        public double SB11Amount10 { get; set; }
        public string SB11Unit10 { get; set; }
        public double SB12Amount10 { get; set; }
        public string SB12Unit10 { get; set; }
        public double SB13Amount10 { get; set; }
        public string SB13Unit10 { get; set; }
        public double SB14Amount10 { get; set; }
        public string SB14Unit10 { get; set; }
        public double SB15Amount10 { get; set; }
        public string SB15Unit10 { get; set; }
        public string SB1RelLabel10 { get; set; }
        public double SB1TAmount10 { get; set; }
        public string SB1TUnit10 { get; set; }
        public double SB1TD1Amount10 { get; set; }
        public string SB1TD1Unit10 { get; set; }
        public double SB1TD2Amount10 { get; set; }
        public string SB1TD2Unit10 { get; set; }
        public string SB1MathResult10 { get; set; }
        public string SB1MathSubType10 { get; set; }

        public double SB1TMAmount10 { get; set; }
        public string SB1TMUnit10 { get; set; }
        public double SB1TLAmount10 { get; set; }
        public string SB1TLUnit10 { get; set; }
        public double SB1TUAmount10 { get; set; }
        public string SB1TUUnit10 { get; set; }
        public string SB1MathOperator10 { get; set; }
        public string SB1MathExpression10 { get; set; }
        public string SB1BaseIO10 { get; set; }

        public const string cSB1Name10 = "SB1Name10";
        public const string cSB1Description10 = "SB1Description10";
        public const string cSB1URL10 = "SB1URL10";
        public const string cSB1Label10 = "SB1Label10";
        public const string cSB1Type10 = "SB1Type10";
        public const string cSB1Date10 = "SB1Date10";
        public const string cSB1MathType10 = "SB1MathType10";
        public const string cSB11Amount10 = "SB11Amount10";
        public const string cSB11Unit10 = "SB11Unit10";
        public const string cSB12Amount10 = "SB12Amount10";
        public const string cSB12Unit10 = "SB12Unit10";
        public const string cSB13Amount10 = "SB13Amount10";
        public const string cSB13Unit10 = "SB13Unit10";
        public const string cSB14Amount10 = "SB14Amount10";
        public const string cSB14Unit10 = "SB14Unit10";
        public const string cSB15Amount10 = "SB15Amount10";
        public const string cSB15Unit10 = "SB15Unit10";
        public const string cSB1RelLabel10 = "SB1RelLabel10";
        public const string cSB1TAmount10 = "SB1TAmount10";
        public const string cSB1TUnit10 = "SB1TUnit10";
        public const string cSB1TD1Amount10 = "SB1TD1Amount10";
        public const string cSB1TD1Unit10 = "SB1TD1Unit10";
        public const string cSB1TD2Amount10 = "SB1TD2Amount10";
        public const string cSB1TD2Unit10 = "SB1TD2Unit10";
        public const string cSB1MathResult10 = "SB1MathResult10";
        public const string cSB1MathSubType10 = "SB1MathSubType10";

        public const string cSB1TMAmount10 = "SB1TMAmount10";
        public const string cSB1TMUnit10 = "SB1TMUnit10";
        public const string cSB1TLAmount10 = "SB1TLAmount10";
        public const string cSB1TLUnit10 = "SB1TLUnit10";
        public const string cSB1TUAmount10 = "SB1TUAmount10";
        public const string cSB1TUUnit10 = "SB1TUUnit10";
        public const string cSB1MathOperator10 = "SB1MathOperator10";
        public const string cSB1MathExpression10 = "SB1MathExpression10";
        public const string cSB1BaseIO10 = "SB1BaseIO10";

        //name of indicator 11
        public string SB1Name11 { get; set; }
        public string SB1Description11 { get; set; }
        public string SB1URL11 { get; set; }
        public string SB1Label11 { get; set; }
        public string SB1Type11 { get; set; }
        public DateTime SB1Date11 { get; set; }
        public string SB1MathType11 { get; set; }
        public double SB11Amount11 { get; set; }
        public string SB11Unit11 { get; set; }
        public double SB12Amount11 { get; set; }
        public string SB12Unit11 { get; set; }
        public double SB13Amount11 { get; set; }
        public string SB13Unit11 { get; set; }
        public double SB14Amount11 { get; set; }
        public string SB14Unit11 { get; set; }
        public double SB15Amount11 { get; set; }
        public string SB15Unit11 { get; set; }
        public string SB1RelLabel11 { get; set; }
        public double SB1TAmount11 { get; set; }
        public string SB1TUnit11 { get; set; }
        public double SB1TD1Amount11 { get; set; }
        public string SB1TD1Unit11 { get; set; }
        public double SB1TD2Amount11 { get; set; }
        public string SB1TD2Unit11 { get; set; }
        public string SB1MathResult11 { get; set; }
        public string SB1MathSubType11 { get; set; }

        public double SB1TMAmount11 { get; set; }
        public string SB1TMUnit11 { get; set; }
        public double SB1TLAmount11 { get; set; }
        public string SB1TLUnit11 { get; set; }
        public double SB1TUAmount11 { get; set; }
        public string SB1TUUnit11 { get; set; }
        public string SB1MathOperator11 { get; set; }
        public string SB1MathExpression11 { get; set; }
        public string SB1BaseIO11 { get; set; }

        public const string cSB1Name11 = "SB1Name11";
        public const string cSB1Description11 = "SB1Description11";
        public const string cSB1URL11 = "SB1URL11";
        public const string cSB1Label11 = "SB1Label11";
        public const string cSB1Type11 = "SB1Type11";
        public const string cSB1Date11 = "SB1Date11";
        public const string cSB1MathType11 = "SB1MathType11";
        public const string cSB11Amount11 = "SB11Amount11";
        public const string cSB11Unit11 = "SB11Unit11";
        public const string cSB12Amount11 = "SB12Amount11";
        public const string cSB12Unit11 = "SB12Unit11";
        public const string cSB13Amount11 = "SB13Amount11";
        public const string cSB13Unit11 = "SB13Unit11";
        public const string cSB14Amount11 = "SB14Amount11";
        public const string cSB14Unit11 = "SB14Unit11";
        public const string cSB15Amount11 = "SB15Amount11";
        public const string cSB15Unit11 = "SB15Unit11";
        public const string cSB1RelLabel11 = "SB1RelLabel11";
        public const string cSB1TAmount11 = "SB1TAmount11";
        public const string cSB1TUnit11 = "SB1TUnit11";
        public const string cSB1TD1Amount11 = "SB1TD1Amount11";
        public const string cSB1TD1Unit11 = "SB1TD1Unit11";
        public const string cSB1TD2Amount11 = "SB1TD2Amount11";
        public const string cSB1TD2Unit11 = "SB1TD2Unit11";
        public const string cSB1MathResult11 = "SB1MathResult11";
        public const string cSB1MathSubType11 = "SB1MathSubType11";

        public const string cSB1TMAmount11 = "SB1TMAmount11";
        public const string cSB1TMUnit11 = "SB1TMUnit11";
        public const string cSB1TLAmount11 = "SB1TLAmount11";
        public const string cSB1TLUnit11 = "SB1TLUnit11";
        public const string cSB1TUAmount11 = "SB1TUAmount11";
        public const string cSB1TUUnit11 = "SB1TUUnit11";
        public const string cSB1MathOperator11 = "SB1MathOperator11";
        public const string cSB1MathExpression11 = "SB1MathExpression11";
        public const string cSB1BaseIO11 = "SB1BaseIO11";

        //name of indicator 12
        public string SB1Name12 { get; set; }
        public string SB1Description12 { get; set; }
        public string SB1URL12 { get; set; }
        public string SB1Label12 { get; set; }
        public string SB1Type12 { get; set; }
        public DateTime SB1Date12 { get; set; }
        public string SB1MathType12 { get; set; }
        public double SB11Amount12 { get; set; }
        public string SB11Unit12 { get; set; }
        public double SB12Amount12 { get; set; }
        public string SB12Unit12 { get; set; }
        public double SB13Amount12 { get; set; }
        public string SB13Unit12 { get; set; }
        public double SB14Amount12 { get; set; }
        public string SB14Unit12 { get; set; }
        public double SB15Amount12 { get; set; }
        public string SB15Unit12 { get; set; }
        public string SB1RelLabel12 { get; set; }
        public double SB1TAmount12 { get; set; }
        public string SB1TUnit12 { get; set; }
        public double SB1TD1Amount12 { get; set; }
        public string SB1TD1Unit12 { get; set; }
        public double SB1TD2Amount12 { get; set; }
        public string SB1TD2Unit12 { get; set; }
        public string SB1MathResult12 { get; set; }
        public string SB1MathSubType12 { get; set; }

        public double SB1TMAmount12 { get; set; }
        public string SB1TMUnit12 { get; set; }
        public double SB1TLAmount12 { get; set; }
        public string SB1TLUnit12 { get; set; }
        public double SB1TUAmount12 { get; set; }
        public string SB1TUUnit12 { get; set; }
        public string SB1MathOperator12 { get; set; }
        public string SB1MathExpression12 { get; set; }
        public string SB1BaseIO12 { get; set; }

        public const string cSB1Name12 = "SB1Name12";
        public const string cSB1Description12 = "SB1Description12";
        public const string cSB1URL12 = "SB1URL12";
        public const string cSB1Label12 = "SB1Label12";
        public const string cSB1Type12 = "SB1Type12";
        public const string cSB1Date12 = "SB1Date12";
        public const string cSB1MathType12 = "SB1MathType12";
        public const string cSB11Amount12 = "SB11Amount12";
        public const string cSB11Unit12 = "SB11Unit12";
        public const string cSB12Amount12 = "SB12Amount12";
        public const string cSB12Unit12 = "SB12Unit12";
        public const string cSB13Amount12 = "SB13Amount12";
        public const string cSB13Unit12 = "SB13Unit12";
        public const string cSB14Amount12 = "SB14Amount12";
        public const string cSB14Unit12 = "SB14Unit12";
        public const string cSB15Amount12 = "SB15Amount12";
        public const string cSB15Unit12 = "SB15Unit12";
        public const string cSB1RelLabel12 = "SB1RelLabel12";
        public const string cSB1TAmount12 = "SB1TAmount12";
        public const string cSB1TUnit12 = "SB1TUnit12";
        public const string cSB1TD1Amount12 = "SB1TD1Amount12";
        public const string cSB1TD1Unit12 = "SB1TD1Unit12";
        public const string cSB1TD2Amount12 = "SB1TD2Amount12";
        public const string cSB1TD2Unit12 = "SB1TD2Unit12";
        public const string cSB1MathResult12 = "SB1MathResult12";
        public const string cSB1MathSubType12 = "SB1MathSubType12";

        public const string cSB1TMAmount12 = "SB1TMAmount12";
        public const string cSB1TMUnit12 = "SB1TMUnit12";
        public const string cSB1TLAmount12 = "SB1TLAmount12";
        public const string cSB1TLUnit12 = "SB1TLUnit12";
        public const string cSB1TUAmount12 = "SB1TUAmount12";
        public const string cSB1TUUnit12 = "SB1TUUnit12";
        public const string cSB1MathOperator12 = "SB1MathOperator12";
        public const string cSB1MathExpression12 = "SB1MathExpression12";
        public const string cSB1BaseIO12 = "SB1BaseIO12";

        //name of indicator 13
        public string SB1Name13 { get; set; }
        public string SB1Description13 { get; set; }
        public string SB1URL13 { get; set; }
        public string SB1Label13 { get; set; }
        public string SB1Type13 { get; set; }
        public DateTime SB1Date13 { get; set; }
        public string SB1MathType13 { get; set; }
        public double SB11Amount13 { get; set; }
        public string SB11Unit13 { get; set; }
        public double SB12Amount13 { get; set; }
        public string SB12Unit13 { get; set; }
        public double SB13Amount13 { get; set; }
        public string SB13Unit13 { get; set; }
        public double SB14Amount13 { get; set; }
        public string SB14Unit13 { get; set; }
        public double SB15Amount13 { get; set; }
        public string SB15Unit13 { get; set; }
        public string SB1RelLabel13 { get; set; }
        public double SB1TAmount13 { get; set; }
        public string SB1TUnit13 { get; set; }
        public double SB1TD1Amount13 { get; set; }
        public string SB1TD1Unit13 { get; set; }
        public double SB1TD2Amount13 { get; set; }
        public string SB1TD2Unit13 { get; set; }
        public string SB1MathResult13 { get; set; }
        public string SB1MathSubType13 { get; set; }

        public double SB1TMAmount13 { get; set; }
        public string SB1TMUnit13 { get; set; }
        public double SB1TLAmount13 { get; set; }
        public string SB1TLUnit13 { get; set; }
        public double SB1TUAmount13 { get; set; }
        public string SB1TUUnit13 { get; set; }
        public string SB1MathOperator13 { get; set; }
        public string SB1MathExpression13 { get; set; }
        public string SB1BaseIO13 { get; set; }

        public const string cSB1Name13 = "SB1Name13";
        public const string cSB1Description13 = "SB1Description13";
        public const string cSB1URL13 = "SB1URL13";
        public const string cSB1Label13 = "SB1Label13";
        public const string cSB1Type13 = "SB1Type13";
        public const string cSB1Date13 = "SB1Date13";
        public const string cSB1MathType13 = "SB1MathType13";
        public const string cSB11Amount13 = "SB11Amount13";
        public const string cSB11Unit13 = "SB11Unit13";
        public const string cSB12Amount13 = "SB12Amount13";
        public const string cSB12Unit13 = "SB12Unit13";
        public const string cSB13Amount13 = "SB13Amount13";
        public const string cSB13Unit13 = "SB13Unit13";
        public const string cSB14Amount13 = "SB14Amount13";
        public const string cSB14Unit13 = "SB14Unit13";
        public const string cSB15Amount13 = "SB15Amount13";
        public const string cSB15Unit13 = "SB15Unit13";
        public const string cSB1RelLabel13 = "SB1RelLabel13";
        public const string cSB1TAmount13 = "SB1TAmount13";
        public const string cSB1TUnit13 = "SB1TUnit13";
        public const string cSB1TD1Amount13 = "SB1TD1Amount13";
        public const string cSB1TD1Unit13 = "SB1TD1Unit13";
        public const string cSB1TD2Amount13 = "SB1TD2Amount13";
        public const string cSB1TD2Unit13 = "SB1TD2Unit13";
        public const string cSB1MathResult13 = "SB1MathResult13";
        public const string cSB1MathSubType13 = "SB1MathSubType13";

        public const string cSB1TMAmount13 = "SB1TMAmount13";
        public const string cSB1TMUnit13 = "SB1TMUnit13";
        public const string cSB1TLAmount13 = "SB1TLAmount13";
        public const string cSB1TLUnit13 = "SB1TLUnit13";
        public const string cSB1TUAmount13 = "SB1TUAmount13";
        public const string cSB1TUUnit13 = "SB1TUUnit13";
        public const string cSB1MathOperator13 = "SB1MathOperator13";
        public const string cSB1MathExpression13 = "SB1MathExpression13";
        public const string cSB1BaseIO13 = "SB1BaseIO13";

        //name of indicator 14
        public string SB1Name14 { get; set; }
        public string SB1Description14 { get; set; }
        public string SB1URL14 { get; set; }
        public string SB1Label14 { get; set; }
        public string SB1Type14 { get; set; }
        public DateTime SB1Date14 { get; set; }
        public string SB1MathType14 { get; set; }
        public double SB11Amount14 { get; set; }
        public string SB11Unit14 { get; set; }
        public double SB12Amount14 { get; set; }
        public string SB12Unit14 { get; set; }
        public double SB13Amount14 { get; set; }
        public string SB13Unit14 { get; set; }
        public double SB14Amount14 { get; set; }
        public string SB14Unit14 { get; set; }
        public double SB15Amount14 { get; set; }
        public string SB15Unit14 { get; set; }
        public string SB1RelLabel14 { get; set; }
        public double SB1TAmount14 { get; set; }
        public string SB1TUnit14 { get; set; }
        public double SB1TD1Amount14 { get; set; }
        public string SB1TD1Unit14 { get; set; }
        public double SB1TD2Amount14 { get; set; }
        public string SB1TD2Unit14 { get; set; }
        public string SB1MathResult14 { get; set; }
        public string SB1MathSubType14 { get; set; }

        public double SB1TMAmount14 { get; set; }
        public string SB1TMUnit14 { get; set; }
        public double SB1TLAmount14 { get; set; }
        public string SB1TLUnit14 { get; set; }
        public double SB1TUAmount14 { get; set; }
        public string SB1TUUnit14 { get; set; }
        public string SB1MathOperator14 { get; set; }
        public string SB1MathExpression14 { get; set; }
        public string SB1BaseIO14 { get; set; }

        public const string cSB1Name14 = "SB1Name14";
        public const string cSB1Description14 = "SB1Description14";
        public const string cSB1URL14 = "SB1URL14";
        public const string cSB1Label14 = "SB1Label14";
        public const string cSB1Type14 = "SB1Type14";
        public const string cSB1Date14 = "SB1Date14";
        public const string cSB1MathType14 = "SB1MathType14";
        public const string cSB11Amount14 = "SB11Amount14";
        public const string cSB11Unit14 = "SB11Unit14";
        public const string cSB12Amount14 = "SB12Amount14";
        public const string cSB12Unit14 = "SB12Unit14";
        public const string cSB13Amount14 = "SB13Amount14";
        public const string cSB13Unit14 = "SB13Unit14";
        public const string cSB14Amount14 = "SB14Amount14";
        public const string cSB14Unit14 = "SB14Unit14";
        public const string cSB15Amount14 = "SB15Amount14";
        public const string cSB15Unit14 = "SB15Unit14";
        public const string cSB1RelLabel14 = "SB1RelLabel14";
        public const string cSB1TAmount14 = "SB1TAmount14";
        public const string cSB1TUnit14 = "SB1TUnit14";
        public const string cSB1TD1Amount14 = "SB1TD1Amount14";
        public const string cSB1TD1Unit14 = "SB1TD1Unit14";
        public const string cSB1TD2Amount14 = "SB1TD2Amount14";
        public const string cSB1TD2Unit14 = "SB1TD2Unit14";
        public const string cSB1MathResult14 = "SB1MathResult14";
        public const string cSB1MathSubType14 = "SB1MathSubType14";

        public const string cSB1TMAmount14 = "SB1TMAmount14";
        public const string cSB1TMUnit14 = "SB1TMUnit14";
        public const string cSB1TLAmount14 = "SB1TLAmount14";
        public const string cSB1TLUnit14 = "SB1TLUnit14";
        public const string cSB1TUAmount14 = "SB1TUAmount14";
        public const string cSB1TUUnit14 = "SB1TUUnit14";
        public const string cSB1MathOperator14 = "SB1MathOperator14";
        public const string cSB1MathExpression14 = "SB1MathExpression14";
        public const string cSB1BaseIO14 = "SB1BaseIO14";

        //name of indicator 15
        public string SB1Name15 { get; set; }
        public string SB1Description15 { get; set; }
        public string SB1URL15 { get; set; }
        public string SB1Label15 { get; set; }
        public string SB1Type15 { get; set; }
        public DateTime SB1Date15 { get; set; }
        public string SB1MathType15 { get; set; }
        public double SB11Amount15 { get; set; }
        public string SB11Unit15 { get; set; }
        public double SB12Amount15 { get; set; }
        public string SB12Unit15 { get; set; }
        public double SB13Amount15 { get; set; }
        public string SB13Unit15 { get; set; }
        public double SB14Amount15 { get; set; }
        public string SB14Unit15 { get; set; }
        public double SB15Amount15 { get; set; }
        public string SB15Unit15 { get; set; }
        public string SB1RelLabel15 { get; set; }
        public double SB1TAmount15 { get; set; }
        public string SB1TUnit15 { get; set; }
        public double SB1TD1Amount15 { get; set; }
        public string SB1TD1Unit15 { get; set; }
        public double SB1TD2Amount15 { get; set; }
        public string SB1TD2Unit15 { get; set; }
        public string SB1MathResult15 { get; set; }
        public string SB1MathSubType15 { get; set; }

        public double SB1TMAmount15 { get; set; }
        public string SB1TMUnit15 { get; set; }
        public double SB1TLAmount15 { get; set; }
        public string SB1TLUnit15 { get; set; }
        public double SB1TUAmount15 { get; set; }
        public string SB1TUUnit15 { get; set; }
        public string SB1MathOperator15 { get; set; }
        public string SB1MathExpression15 { get; set; }
        public string SB1BaseIO15 { get; set; }

        public const string cSB1Name15 = "SB1Name15";
        public const string cSB1Description15 = "SB1Description15";
        public const string cSB1URL15 = "SB1URL15";
        public const string cSB1Label15 = "SB1Label15";
        public const string cSB1Type15 = "SB1Type15";
        public const string cSB1Date15 = "SB1Date15";
        public const string cSB1MathType15 = "SB1MathType15";
        public const string cSB11Amount15 = "SB11Amount15";
        public const string cSB11Unit15 = "SB11Unit15";
        public const string cSB12Amount15 = "SB12Amount15";
        public const string cSB12Unit15 = "SB12Unit15";
        public const string cSB13Amount15 = "SB13Amount15";
        public const string cSB13Unit15 = "SB13Unit15";
        public const string cSB14Amount15 = "SB14Amount15";
        public const string cSB14Unit15 = "SB14Unit15";
        public const string cSB15Amount15 = "SB15Amount15";
        public const string cSB15Unit15 = "SB15Unit15";
        public const string cSB1RelLabel15 = "SB1RelLabel15";
        public const string cSB1TAmount15 = "SB1TAmount15";
        public const string cSB1TUnit15 = "SB1TUnit15";
        public const string cSB1TD1Amount15 = "SB1TD1Amount15";
        public const string cSB1TD1Unit15 = "SB1TD1Unit15";
        public const string cSB1TD2Amount15 = "SB1TD2Amount15";
        public const string cSB1TD2Unit15 = "SB1TD2Unit15";
        public const string cSB1MathResult15 = "SB1MathResult15";
        public const string cSB1MathSubType15 = "SB1MathSubType15";

        public const string cSB1TMAmount15 = "SB1TMAmount15";
        public const string cSB1TMUnit15 = "SB1TMUnit15";
        public const string cSB1TLAmount15 = "SB1TLAmount15";
        public const string cSB1TLUnit15 = "SB1TLUnit15";
        public const string cSB1TUAmount15 = "SB1TUAmount15";
        public const string cSB1TUUnit15 = "SB1TUUnit15";
        public const string cSB1MathOperator15 = "SB1MathOperator15";
        public const string cSB1MathExpression15 = "SB1MathExpression15";
        public const string cSB1BaseIO15 = "SB1BaseIO15";

        //name of indicator 16
        public string SB1Name16 { get; set; }
        public string SB1Description16 { get; set; }
        public string SB1URL16 { get; set; }
        public string SB1Label16 { get; set; }
        public string SB1Type16 { get; set; }
        public DateTime SB1Date16 { get; set; }
        public string SB1MathType16 { get; set; }
        public double SB11Amount16 { get; set; }
        public string SB11Unit16 { get; set; }
        public double SB12Amount16 { get; set; }
        public string SB12Unit16 { get; set; }
        public double SB13Amount16 { get; set; }
        public string SB13Unit16 { get; set; }
        public double SB14Amount16 { get; set; }
        public string SB14Unit16 { get; set; }
        public double SB15Amount16 { get; set; }
        public string SB15Unit16 { get; set; }
        public string SB1RelLabel16 { get; set; }
        public double SB1TAmount16 { get; set; }
        public string SB1TUnit16 { get; set; }
        public double SB1TD1Amount16 { get; set; }
        public string SB1TD1Unit16 { get; set; }
        public double SB1TD2Amount16 { get; set; }
        public string SB1TD2Unit16 { get; set; }
        public string SB1MathResult16 { get; set; }
        public string SB1MathSubType16 { get; set; }
        
        public double SB1TMAmount16 { get; set; }
        public string SB1TMUnit16 { get; set; }
        public double SB1TLAmount16 { get; set; }
        public string SB1TLUnit16 { get; set; }
        public double SB1TUAmount16 { get; set; }
        public string SB1TUUnit16 { get; set; }
        public string SB1MathOperator16 { get; set; }
        public string SB1MathExpression16 { get; set; }
        public string SB1BaseIO16 { get; set; }

        public const string cSB1Name16 = "SB1Name16";
        public const string cSB1Description16 = "SB1Description16";
        public const string cSB1URL16 = "SB1URL16";
        public const string cSB1Label16 = "SB1Label16";
        public const string cSB1Type16 = "SB1Type16";
        public const string cSB1Date16 = "SB1Date16";
        public const string cSB1MathType16 = "SB1MathType16";
        public const string cSB11Amount16 = "SB11Amount16";
        public const string cSB11Unit16 = "SB11Unit16";
        public const string cSB12Amount16 = "SB12Amount16";
        public const string cSB12Unit16 = "SB12Unit16";
        public const string cSB13Amount16 = "SB13Amount16";
        public const string cSB13Unit16 = "SB13Unit16";
        public const string cSB14Amount16 = "SB14Amount16";
        public const string cSB14Unit16 = "SB14Unit16";
        public const string cSB15Amount16 = "SB15Amount16";
        public const string cSB15Unit16 = "SB15Unit16";
        public const string cSB1RelLabel16 = "SB1RelLabel16";
        public const string cSB1TAmount16 = "SB1TAmount16";
        public const string cSB1TUnit16 = "SB1TUnit16";
        public const string cSB1TD1Amount16 = "SB1TD1Amount16";
        public const string cSB1TD1Unit16 = "SB1TD1Unit16";
        public const string cSB1TD2Amount16 = "SB1TD2Amount16";
        public const string cSB1TD2Unit16 = "SB1TD2Unit16";
        public const string cSB1MathResult16 = "SB1MathResult16";
        public const string cSB1MathSubType16 = "SB1MathSubType16";

        public const string cSB1TMAmount16 = "SB1TMAmount16";
        public const string cSB1TMUnit16 = "SB1TMUnit16";
        public const string cSB1TLAmount16 = "SB1TLAmount16";
        public const string cSB1TLUnit16 = "SB1TLUnit16";
        public const string cSB1TUAmount16 = "SB1TUAmount16";
        public const string cSB1TUUnit16 = "SB1TUUnit16";
        public const string cSB1MathOperator16 = "SB1MathOperator16";
        public const string cSB1MathExpression16 = "SB1MathExpression16";
        public const string cSB1BaseIO16 = "SB1BaseIO16";

        //name of indicator 17
        public string SB1Name17 { get; set; }
        public string SB1Description17 { get; set; }
        public string SB1URL17 { get; set; }
        public string SB1Label17 { get; set; }
        public string SB1Type17 { get; set; }
        public DateTime SB1Date17 { get; set; }
        public string SB1MathType17 { get; set; }
        public double SB11Amount17 { get; set; }
        public string SB11Unit17 { get; set; }
        public double SB12Amount17 { get; set; }
        public string SB12Unit17 { get; set; }
        public double SB13Amount17 { get; set; }
        public string SB13Unit17 { get; set; }
        public double SB14Amount17 { get; set; }
        public string SB14Unit17 { get; set; }
        public double SB15Amount17 { get; set; }
        public string SB15Unit17 { get; set; }
        public string SB1RelLabel17 { get; set; }
        public double SB1TAmount17 { get; set; }
        public string SB1TUnit17 { get; set; }
        public double SB1TD1Amount17 { get; set; }
        public string SB1TD1Unit17 { get; set; }
        public double SB1TD2Amount17 { get; set; }
        public string SB1TD2Unit17 { get; set; }
        public string SB1MathResult17 { get; set; }
        public string SB1MathSubType17 { get; set; }

        public double SB1TMAmount17 { get; set; }
        public string SB1TMUnit17 { get; set; }
        public double SB1TLAmount17 { get; set; }
        public string SB1TLUnit17 { get; set; }
        public double SB1TUAmount17 { get; set; }
        public string SB1TUUnit17 { get; set; }
        public string SB1MathOperator17 { get; set; }
        public string SB1MathExpression17 { get; set; }
        public string SB1BaseIO17 { get; set; }

        public const string cSB1Name17 = "SB1Name17";
        public const string cSB1Description17 = "SB1Description17";
        public const string cSB1URL17 = "SB1URL17";
        public const string cSB1Label17 = "SB1Label17";
        public const string cSB1Type17 = "SB1Type17";
        public const string cSB1Date17 = "SB1Date17";
        public const string cSB1MathType17 = "SB1MathType17";
        public const string cSB11Amount17 = "SB11Amount17";
        public const string cSB11Unit17 = "SB11Unit17";
        public const string cSB12Amount17 = "SB12Amount17";
        public const string cSB12Unit17 = "SB12Unit17";
        public const string cSB13Amount17 = "SB13Amount17";
        public const string cSB13Unit17 = "SB13Unit17";
        public const string cSB14Amount17 = "SB14Amount17";
        public const string cSB14Unit17 = "SB14Unit17";
        public const string cSB15Amount17 = "SB15Amount17";
        public const string cSB15Unit17 = "SB15Unit17";
        public const string cSB1RelLabel17 = "SB1RelLabel17";
        public const string cSB1TAmount17 = "SB1TAmount17";
        public const string cSB1TUnit17 = "SB1TUnit17";
        public const string cSB1TD1Amount17 = "SB1TD1Amount17";
        public const string cSB1TD1Unit17 = "SB1TD1Unit17";
        public const string cSB1TD2Amount17 = "SB1TD2Amount17";
        public const string cSB1TD2Unit17 = "SB1TD2Unit17";
        public const string cSB1MathResult17 = "SB1MathResult17";
        public const string cSB1MathSubType17 = "SB1MathSubType17";

        public const string cSB1TMAmount17 = "SB1TMAmount17";
        public const string cSB1TMUnit17 = "SB1TMUnit17";
        public const string cSB1TLAmount17 = "SB1TLAmount17";
        public const string cSB1TLUnit17 = "SB1TLUnit17";
        public const string cSB1TUAmount17 = "SB1TUAmount17";
        public const string cSB1TUUnit17 = "SB1TUUnit17";
        public const string cSB1MathOperator17 = "SB1MathOperator17";
        public const string cSB1MathExpression17 = "SB1MathExpression17";
        public const string cSB1BaseIO17 = "SB1BaseIO17";

        //name of indicator 18
        public string SB1Name18 { get; set; }
        public string SB1Description18 { get; set; }
        public string SB1URL18 { get; set; }
        public string SB1Label18 { get; set; }
        public string SB1Type18 { get; set; }
        public DateTime SB1Date18 { get; set; }
        public string SB1MathType18 { get; set; }
        public double SB11Amount18 { get; set; }
        public string SB11Unit18 { get; set; }
        public double SB12Amount18 { get; set; }
        public string SB12Unit18 { get; set; }
        public double SB13Amount18 { get; set; }
        public string SB13Unit18 { get; set; }
        public double SB14Amount18 { get; set; }
        public string SB14Unit18 { get; set; }
        public double SB15Amount18 { get; set; }
        public string SB15Unit18 { get; set; }
        public string SB1RelLabel18 { get; set; }
        public double SB1TAmount18 { get; set; }
        public string SB1TUnit18 { get; set; }
        public double SB1TD1Amount18 { get; set; }
        public string SB1TD1Unit18 { get; set; }
        public double SB1TD2Amount18 { get; set; }
        public string SB1TD2Unit18 { get; set; }
        public string SB1MathResult18 { get; set; }
        public string SB1MathSubType18 { get; set; }

        public double SB1TMAmount18 { get; set; }
        public string SB1TMUnit18 { get; set; }
        public double SB1TLAmount18 { get; set; }
        public string SB1TLUnit18 { get; set; }
        public double SB1TUAmount18 { get; set; }
        public string SB1TUUnit18 { get; set; }
        public string SB1MathOperator18 { get; set; }
        public string SB1MathExpression18 { get; set; }
        public string SB1BaseIO18 { get; set; }

        public const string cSB1Name18 = "SB1Name18";
        public const string cSB1Description18 = "SB1Description18";
        public const string cSB1URL18 = "SB1URL18";
        public const string cSB1Label18 = "SB1Label18";
        public const string cSB1Type18 = "SB1Type18";
        public const string cSB1Date18 = "SB1Date18";
        public const string cSB1MathType18 = "SB1MathType18";
        public const string cSB11Amount18 = "SB11Amount18";
        public const string cSB11Unit18 = "SB11Unit18";
        public const string cSB12Amount18 = "SB12Amount18";
        public const string cSB12Unit18 = "SB12Unit18";
        public const string cSB13Amount18 = "SB13Amount18";
        public const string cSB13Unit18 = "SB13Unit18";
        public const string cSB14Amount18 = "SB14Amount18";
        public const string cSB14Unit18 = "SB14Unit18";
        public const string cSB15Amount18 = "SB15Amount18";
        public const string cSB15Unit18 = "SB15Unit18";
        public const string cSB1RelLabel18 = "SB1RelLabel18";
        public const string cSB1TAmount18 = "SB1TAmount18";
        public const string cSB1TUnit18 = "SB1TUnit18";
        public const string cSB1TD1Amount18 = "SB1TD1Amount18";
        public const string cSB1TD1Unit18 = "SB1TD1Unit18";
        public const string cSB1TD2Amount18 = "SB1TD2Amount18";
        public const string cSB1TD2Unit18 = "SB1TD2Unit18";
        public const string cSB1MathResult18 = "SB1MathResult18";
        public const string cSB1MathSubType18 = "SB1MathSubType18";

        public const string cSB1TMAmount18 = "SB1TMAmount18";
        public const string cSB1TMUnit18 = "SB1TMUnit18";
        public const string cSB1TLAmount18 = "SB1TLAmount18";
        public const string cSB1TLUnit18 = "SB1TLUnit18";
        public const string cSB1TUAmount18 = "SB1TUAmount18";
        public const string cSB1TUUnit18 = "SB1TUUnit18";
        public const string cSB1MathOperator18 = "SB1MathOperator18";
        public const string cSB1MathExpression18 = "SB1MathExpression18";
        public const string cSB1BaseIO18 = "SB1BaseIO18";

        //name of indicator 19
        public string SB1Name19 { get; set; }
        public string SB1Description19 { get; set; }
        public string SB1URL19 { get; set; }
        public string SB1Label19 { get; set; }
        public string SB1Type19 { get; set; }
        public DateTime SB1Date19 { get; set; }
        public string SB1MathType19 { get; set; }
        public double SB11Amount19 { get; set; }
        public string SB11Unit19 { get; set; }
        public double SB12Amount19 { get; set; }
        public string SB12Unit19 { get; set; }
        public double SB13Amount19 { get; set; }
        public string SB13Unit19 { get; set; }
        public double SB14Amount19 { get; set; }
        public string SB14Unit19 { get; set; }
        public double SB15Amount19 { get; set; }
        public string SB15Unit19 { get; set; }
        public string SB1RelLabel19 { get; set; }
        public double SB1TAmount19 { get; set; }
        public string SB1TUnit19 { get; set; }
        public double SB1TD1Amount19 { get; set; }
        public string SB1TD1Unit19 { get; set; }
        public double SB1TD2Amount19 { get; set; }
        public string SB1TD2Unit19 { get; set; }
        public string SB1MathResult19 { get; set; }
        public string SB1MathSubType19 { get; set; }

        public double SB1TMAmount19 { get; set; }
        public string SB1TMUnit19 { get; set; }
        public double SB1TLAmount19 { get; set; }
        public string SB1TLUnit19 { get; set; }
        public double SB1TUAmount19 { get; set; }
        public string SB1TUUnit19 { get; set; }
        public string SB1MathOperator19 { get; set; }
        public string SB1MathExpression19 { get; set; }
        public string SB1BaseIO19 { get; set; }

        public const string cSB1Name19 = "SB1Name19";
        public const string cSB1Description19 = "SB1Description19";
        public const string cSB1URL19 = "SB1URL19";
        public const string cSB1Label19 = "SB1Label19";
        public const string cSB1Type19 = "SB1Type19";
        public const string cSB1Date19 = "SB1Date19";
        public const string cSB1MathType19 = "SB1MathType19";
        public const string cSB11Amount19 = "SB11Amount19";
        public const string cSB11Unit19 = "SB11Unit19";
        public const string cSB12Amount19 = "SB12Amount19";
        public const string cSB12Unit19 = "SB12Unit19";
        public const string cSB13Amount19 = "SB13Amount19";
        public const string cSB13Unit19 = "SB13Unit19";
        public const string cSB14Amount19 = "SB14Amount19";
        public const string cSB14Unit19 = "SB14Unit19";
        public const string cSB15Amount19 = "SB15Amount19";
        public const string cSB15Unit19 = "SB15Unit19";
        public const string cSB1RelLabel19 = "SB1RelLabel19";
        public const string cSB1TAmount19 = "SB1TAmount19";
        public const string cSB1TUnit19 = "SB1TUnit19";
        public const string cSB1TD1Amount19 = "SB1TD1Amount19";
        public const string cSB1TD1Unit19 = "SB1TD1Unit19";
        public const string cSB1TD2Amount19 = "SB1TD2Amount19";
        public const string cSB1TD2Unit19 = "SB1TD2Unit19";
        public const string cSB1MathResult19 = "SB1MathResult19";
        public const string cSB1MathSubType19 = "SB1MathSubType19";

        public const string cSB1TMAmount19 = "SB1TMAmount19";
        public const string cSB1TMUnit19 = "SB1TMUnit19";
        public const string cSB1TLAmount19 = "SB1TLAmount19";
        public const string cSB1TLUnit19 = "SB1TLUnit19";
        public const string cSB1TUAmount19 = "SB1TUAmount19";
        public const string cSB1TUUnit19 = "SB1TUUnit19";
        public const string cSB1MathOperator19 = "SB1MathOperator19";
        public const string cSB1MathExpression19 = "SB1MathExpression19";
        public const string cSB1BaseIO19 = "SB1BaseIO19";
        //name of indicator 20
        public string SB1Name20 { get; set; }
        public string SB1Description20 { get; set; }
        public string SB1URL20 { get; set; }
        public string SB1Label20 { get; set; }
        public string SB1Type20 { get; set; }
        public DateTime SB1Date20 { get; set; }
        public string SB1MathType20 { get; set; }
        public double SB11Amount20 { get; set; }
        public string SB11Unit20 { get; set; }
        public double SB12Amount20 { get; set; }
        public string SB12Unit20 { get; set; }
        public double SB13Amount20 { get; set; }
        public string SB13Unit20 { get; set; }
        public double SB14Amount20 { get; set; }
        public string SB14Unit20 { get; set; }
        public double SB15Amount20 { get; set; }
        public string SB15Unit20 { get; set; }
        public string SB1RelLabel20 { get; set; }
        public double SB1TAmount20 { get; set; }
        public string SB1TUnit20 { get; set; }
        public double SB1TD1Amount20 { get; set; }
        public string SB1TD1Unit20 { get; set; }
        public double SB1TD2Amount20 { get; set; }
        public string SB1TD2Unit20 { get; set; }
        public string SB1MathResult20 { get; set; }
        public string SB1MathSubType20 { get; set; }

        public double SB1TMAmount20 { get; set; }
        public string SB1TMUnit20 { get; set; }
        public double SB1TLAmount20 { get; set; }
        public string SB1TLUnit20 { get; set; }
        public double SB1TUAmount20 { get; set; }
        public string SB1TUUnit20 { get; set; }
        public string SB1MathOperator20 { get; set; }
        public string SB1MathExpression20 { get; set; }
        public string SB1BaseIO20 { get; set; }

        public const string cSB1Name20 = "SB1Name20";
        public const string cSB1Description20 = "SB1Description20";
        public const string cSB1URL20 = "SB1URL20";
        public const string cSB1Label20 = "SB1Label20";
        public const string cSB1Type20 = "SB1Type20";
        public const string cSB1Date20 = "SB1Date20";
        public const string cSB1MathType20 = "SB1MathType20";
        public const string cSB11Amount20 = "SB11Amount20";
        public const string cSB11Unit20 = "SB11Unit20";
        public const string cSB12Amount20 = "SB12Amount20";
        public const string cSB12Unit20 = "SB12Unit20";
        public const string cSB13Amount20 = "SB13Amount20";
        public const string cSB13Unit20 = "SB13Unit20";
        public const string cSB14Amount20 = "SB14Amount20";
        public const string cSB14Unit20 = "SB14Unit20";
        public const string cSB15Amount20 = "SB15Amount20";
        public const string cSB15Unit20 = "SB15Unit20";
        public const string cSB1RelLabel20 = "SB1RelLabel20";
        public const string cSB1TAmount20 = "SB1TAmount20";
        public const string cSB1TUnit20 = "SB1TUnit20";
        public const string cSB1TD1Amount20 = "SB1TD1Amount20";
        public const string cSB1TD1Unit20 = "SB1TD1Unit20";
        public const string cSB1TD2Amount20 = "SB1TD2Amount20";
        public const string cSB1TD2Unit20 = "SB1TD2Unit20";
        public const string cSB1MathResult20 = "SB1MathResult20";
        public const string cSB1MathSubType20 = "SB1MathSubType20";

        public const string cSB1TMAmount20 = "SB1TMAmount20";
        public const string cSB1TMUnit20 = "SB1TMUnit20";
        public const string cSB1TLAmount20 = "SB1TLAmount20";
        public const string cSB1TLUnit20 = "SB1TLUnit20";
        public const string cSB1TUAmount20 = "SB1TUAmount20";
        public const string cSB1TUUnit20 = "SB1TUUnit20";
        public const string cSB1MathOperator20 = "SB1MathOperator20";
        public const string cSB1MathExpression20 = "SB1MathExpression20";
        public const string cSB1BaseIO20 = "SB1BaseIO20";

        public virtual void InitSB1BaseProperties()
        {
            this.SB1Score = 0;
            this.SB1ScoreUnit = string.Empty;
            this.SB1ScoreD1Amount = 0;
            this.SB1ScoreD1Unit = string.Empty;
            this.SB1ScoreD2Amount = 0;
            this.SB1ScoreD2Unit = string.Empty;
            this.SB1ScoreMathExpression = string.Empty;
            this.SB1ScoreM = 0;
            this.SB1ScoreMUnit = string.Empty;
            this.SB1ScoreLAmount = 0;
            this.SB1ScoreLUnit = string.Empty;
            this.SB1ScoreUAmount = 0;
            this.SB1ScoreUUnit = string.Empty;
            this.SB1ScoreDistType = string.Empty;
            this.SB1ScoreMathType = string.Empty;
            this.SB1ScoreMathSubType = string.Empty;
            this.SB1ScoreMathResult = string.Empty;
            this.SB1JointDataURL = string.Empty;

            this.SB1Iterations = 0;
            this.SB1CILevel = 90;
            this.SB1Random = 0;
            this.SB1BaseIO = string.Empty;
            this.SB1Description1 = string.Empty;
            this.SB1URL1 = string.Empty;
            this.SB1Name1 = string.Empty;
            this.SB1Label1 = string.Empty;
            this.SB1Type1 = RUC_TYPES.none.ToString();
            this.SB1RelLabel1 = string.Empty;
            this.SB1TAmount1 = 0;
            this.SB1TUnit1 = string.Empty;
            this.SB1TD1Amount1 = 0;
            this.SB1TD1Unit1 = string.Empty;
            this.SB1TD2Amount1 = 0;
            this.SB1TD2Unit1 = string.Empty;
            this.SB1MathResult1 = string.Empty;
            this.SB1MathSubType1 = Constants.NONE;

            this.SB1TMAmount1 = 0;
            this.SB1TMUnit1 = string.Empty;
            this.SB1TLAmount1 = 0;
            this.SB1TLUnit1 = string.Empty;
            this.SB1TUAmount1 = 0;
            this.SB1TUUnit1 = string.Empty;
            this.SB1MathOperator1 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression1 = string.Empty;
            this.SB1BaseIO1 = string.Empty;
            this.SB1Date1 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType1 = MATH_TYPES.none.ToString();
            this.SB11Amount1 = 0;
            this.SB11Unit1 = string.Empty;
            this.SB12Amount1 = 0;
            this.SB12Unit1 = string.Empty;
            this.SB15Amount1 = 0;
            this.SB15Unit1 = string.Empty;
            this.SB13Amount1 = 1;
            this.SB13Unit1 = string.Empty;
            this.SB14Amount1 = 1;
            this.SB14Unit1 = string.Empty;
            this.SB1Description2 = string.Empty;
            this.SB1URL2 = string.Empty;
            this.SB1Name2 = string.Empty;
            this.SB1Label2 = string.Empty;
            this.SB1Type2 = RUC_TYPES.none.ToString();
            this.SB1RelLabel2 = string.Empty;
            this.SB1TAmount2 = 0;
            this.SB1TUnit2 = string.Empty;
            this.SB1TD1Amount2 = 0;
            this.SB1TD1Unit2 = string.Empty;
            this.SB1TD2Amount2 = 0;
            this.SB1TD2Unit2 = string.Empty;
            this.SB1MathResult2 = string.Empty;
            this.SB1MathSubType2 = Constants.NONE;

            this.SB1TMAmount2 = 0;
            this.SB1TMUnit2 = string.Empty;
            this.SB1TLAmount2 = 0;
            this.SB1TLUnit2 = string.Empty;
            this.SB1TUAmount2 = 0;
            this.SB1TUUnit2 = string.Empty;
            this.SB1MathOperator2 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression2 = string.Empty;
            this.SB1BaseIO2 = string.Empty;
            this.SB1Date2 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType2 = MATH_TYPES.none.ToString();
            this.SB11Amount2 = 0;
            this.SB11Unit2 = string.Empty;
            this.SB12Amount2 = 0;
            this.SB12Unit2 = string.Empty;
            this.SB15Amount2 = 0;
            this.SB15Unit2 = string.Empty;
            this.SB13Amount2 = 1;
            this.SB13Unit2 = string.Empty;
            this.SB14Amount2 = 1;
            this.SB14Unit2 = string.Empty;
            this.SB1Description3 = string.Empty;
            this.SB1URL3 = string.Empty;
            this.SB1Name3 = string.Empty;
            this.SB1Label3 = string.Empty;
            this.SB1Type3 = RUC_TYPES.none.ToString();
            this.SB1RelLabel3 = string.Empty;
            this.SB1TAmount3 = 0;
            this.SB1TUnit3 = string.Empty;
            this.SB1TD1Amount3 = 0;
            this.SB1TD1Unit3 = string.Empty;
            this.SB1TD2Amount3 = 0;
            this.SB1TD2Unit3 = string.Empty;
            this.SB1MathResult3 = string.Empty;
            this.SB1MathSubType3 = Constants.NONE;

            this.SB1TMAmount3 = 0;
            this.SB1TMUnit3 = string.Empty;
            this.SB1TLAmount3 = 0;
            this.SB1TLUnit3 = string.Empty;
            this.SB1TUAmount3 = 0;
            this.SB1TUUnit3 = string.Empty;
            this.SB1MathOperator3 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression3 = string.Empty;
            this.SB1BaseIO3 = string.Empty;
            this.SB1Date3 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType3 = MATH_TYPES.none.ToString();
            this.SB11Amount3 = 0;
            this.SB11Unit3 = string.Empty;
            this.SB12Amount3 = 0;
            this.SB12Unit3 = string.Empty;
            this.SB15Amount3 = 0;
            this.SB15Unit3 = string.Empty;
            this.SB13Amount3 = 1;
            this.SB13Unit3 = string.Empty;
            this.SB14Amount3 = 1;
            this.SB14Unit3 = string.Empty;
            this.SB1Description4 = string.Empty;
            this.SB1URL4 = string.Empty;
            this.SB1Name4 = string.Empty;
            this.SB1Label4 = string.Empty;
            this.SB1Type4 = RUC_TYPES.none.ToString();
            this.SB1RelLabel4 = string.Empty;
            this.SB1TAmount4 = 0;
            this.SB1TUnit4 = string.Empty;
            this.SB1TD1Amount4 = 0;
            this.SB1TD1Unit4 = string.Empty;
            this.SB1TD2Amount4 = 0;
            this.SB1TD2Unit4 = string.Empty;
            this.SB1MathResult4 = string.Empty;
            this.SB1MathSubType4 = Constants.NONE;

            this.SB1TMAmount4 = 0;
            this.SB1TMUnit4 = string.Empty;
            this.SB1TLAmount4 = 0;
            this.SB1TLUnit4 = string.Empty;
            this.SB1TUAmount4 = 0;
            this.SB1TUUnit4 = string.Empty;
            this.SB1MathOperator4 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression4 = string.Empty;
            this.SB1BaseIO4 = string.Empty;
            this.SB1Date4 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType4 = MATH_TYPES.none.ToString();
            this.SB11Amount4 = 0;
            this.SB11Unit4 = string.Empty;
            this.SB12Amount4 = 0;
            this.SB12Unit4 = string.Empty;
            this.SB15Amount4 = 0;
            this.SB15Unit4 = string.Empty;
            this.SB13Amount4 = 1;
            this.SB13Unit4 = string.Empty;
            this.SB14Amount4 = 1;
            this.SB14Unit4 = string.Empty;


            this.SB1Description5 = string.Empty;
            this.SB1URL5 = string.Empty;
            this.SB1Name5 = string.Empty;
            this.SB1Label5 = string.Empty;
            this.SB1Type5 = RUC_TYPES.none.ToString();
            this.SB1RelLabel5 = string.Empty;
            this.SB1TAmount5 = 0;
            this.SB1TUnit5 = string.Empty;
            this.SB1TD1Amount5 = 0;
            this.SB1TD1Unit5 = string.Empty;
            this.SB1TD2Amount5 = 0;
            this.SB1TD2Unit5 = string.Empty;
            this.SB1MathResult5 = string.Empty;
            this.SB1MathSubType5 = Constants.NONE;

            this.SB1TMAmount5 = 0;
            this.SB1TMUnit5 = string.Empty;
            this.SB1TLAmount5 = 0;
            this.SB1TLUnit5 = string.Empty;
            this.SB1TUAmount5 = 0;
            this.SB1TUUnit5 = string.Empty;
            this.SB1MathOperator5 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression5 = string.Empty;
            this.SB1BaseIO5 = string.Empty;
            this.SB1Date5 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType5 = MATH_TYPES.none.ToString();
            this.SB11Amount5 = 0;
            this.SB11Unit5 = string.Empty;
            this.SB12Amount5 = 0;
            this.SB12Unit5 = string.Empty;
            this.SB15Amount5 = 0;
            this.SB15Unit5 = string.Empty;
            this.SB13Amount5 = 1;
            this.SB13Unit5 = string.Empty;
            this.SB14Amount5 = 1;
            this.SB14Unit5 = string.Empty;

            this.SB1Description6 = string.Empty;
            this.SB1URL6 = string.Empty;
            this.SB1Name6 = string.Empty;
            this.SB1Label6 = string.Empty;
            this.SB1Type6 = RUC_TYPES.none.ToString();
            this.SB1RelLabel6 = string.Empty;
            this.SB1TAmount6 = 0;
            this.SB1TUnit6 = string.Empty;
            this.SB1TD1Amount6 = 0;
            this.SB1TD1Unit6 = string.Empty;
            this.SB1TD2Amount6 = 0;
            this.SB1TD2Unit6 = string.Empty;
            this.SB1MathResult6 = string.Empty;
            this.SB1MathSubType6 = Constants.NONE;

            this.SB1TMAmount6 = 0;
            this.SB1TMUnit6 = string.Empty;
            this.SB1TLAmount6 = 0;
            this.SB1TLUnit6 = string.Empty;
            this.SB1TUAmount6 = 0;
            this.SB1TUUnit6 = string.Empty;
            this.SB1MathOperator6 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression6 = string.Empty;
            this.SB1BaseIO6 = string.Empty;
            this.SB1Date6 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType6 = MATH_TYPES.none.ToString();
            this.SB11Amount6 = 0;
            this.SB11Unit6 = string.Empty;
            this.SB12Amount6 = 0;
            this.SB12Unit6 = string.Empty;
            this.SB15Amount6 = 0;
            this.SB15Unit6 = string.Empty;
            this.SB13Amount6 = 1;
            this.SB13Unit6 = string.Empty;
            this.SB14Amount6 = 1;
            this.SB14Unit6 = string.Empty;

            this.SB1Description7 = string.Empty;
            this.SB1URL7 = string.Empty;
            this.SB1Name7 = string.Empty;
            this.SB1Label7 = string.Empty;
            this.SB1Type7 = RUC_TYPES.none.ToString();
            this.SB1RelLabel7 = string.Empty;
            this.SB1TAmount7 = 0;
            this.SB1TUnit7 = string.Empty;
            this.SB1TD1Amount7 = 0;
            this.SB1TD1Unit7 = string.Empty;
            this.SB1TD2Amount7 = 0;
            this.SB1TD2Unit7 = string.Empty;
            this.SB1MathResult7 = string.Empty;
            this.SB1MathSubType7 = Constants.NONE;

            this.SB1TMAmount7 = 0;
            this.SB1TMUnit7 = string.Empty;
            this.SB1TLAmount7 = 0;
            this.SB1TLUnit7 = string.Empty;
            this.SB1TUAmount7 = 0;
            this.SB1TUUnit7 = string.Empty;
            this.SB1MathOperator7 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression7 = string.Empty;
            this.SB1BaseIO7 = string.Empty;
            this.SB1Date7 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType7 = MATH_TYPES.none.ToString();
            this.SB11Amount7 = 0;
            this.SB11Unit7 = string.Empty;
            this.SB12Amount7 = 0;
            this.SB12Unit7 = string.Empty;
            this.SB15Amount7 = 0;
            this.SB15Unit7 = string.Empty;
            this.SB13Amount7 = 1;
            this.SB13Unit7 = string.Empty;
            this.SB14Amount7 = 1;
            this.SB14Unit7 = string.Empty;

            this.SB1Description8 = string.Empty;
            this.SB1URL8 = string.Empty;
            this.SB1Name8 = string.Empty;
            this.SB1Label8 = string.Empty;
            this.SB1Type8 = RUC_TYPES.none.ToString();
            this.SB1RelLabel8 = string.Empty;
            this.SB1TAmount8 = 0;
            this.SB1TUnit8 = string.Empty;
            this.SB1TD1Amount8 = 0;
            this.SB1TD1Unit8 = string.Empty;
            this.SB1TD2Amount8 = 0;
            this.SB1TD2Unit8 = string.Empty;
            this.SB1MathResult8 = string.Empty;
            this.SB1MathSubType8 = Constants.NONE;

            this.SB1TMAmount8 = 0;
            this.SB1TMUnit8 = string.Empty;
            this.SB1TLAmount8 = 0;
            this.SB1TLUnit8 = string.Empty;
            this.SB1TUAmount8 = 0;
            this.SB1TUUnit8 = string.Empty;
            this.SB1MathOperator8 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression8 = string.Empty;
            this.SB1BaseIO8 = string.Empty;
            this.SB1Date8 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType8 = MATH_TYPES.none.ToString();
            this.SB11Amount8 = 0;
            this.SB11Unit8 = string.Empty;
            this.SB12Amount8 = 0;
            this.SB12Unit8 = string.Empty;
            this.SB15Amount8 = 0;
            this.SB15Unit8 = string.Empty;
            this.SB13Amount8 = 1;
            this.SB13Unit8 = string.Empty;
            this.SB14Amount8 = 1;
            this.SB14Unit8 = string.Empty;

            this.SB1Description9 = string.Empty;
            this.SB1URL9 = string.Empty;
            this.SB1Name9 = string.Empty;
            this.SB1Label9 = string.Empty;
            this.SB1Type9 = RUC_TYPES.none.ToString();
            this.SB1RelLabel9 = string.Empty;
            this.SB1TAmount9 = 0;
            this.SB1TUnit9 = string.Empty;
            this.SB1TD1Amount9 = 0;
            this.SB1TD1Unit9 = string.Empty;
            this.SB1TD2Amount9 = 0;
            this.SB1TD2Unit9 = string.Empty;
            this.SB1MathResult9 = string.Empty;
            this.SB1MathSubType9 = Constants.NONE;

            this.SB1TMAmount9 = 0;
            this.SB1TMUnit9 = string.Empty;
            this.SB1TLAmount9 = 0;
            this.SB1TLUnit9 = string.Empty;
            this.SB1TUAmount9 = 0;
            this.SB1TUUnit9 = string.Empty;
            this.SB1MathOperator9 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression9 = string.Empty;
            this.SB1BaseIO9 = string.Empty;
            this.SB1Date9 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType9 = MATH_TYPES.none.ToString();
            this.SB11Amount9 = 0;
            this.SB11Unit9 = string.Empty;
            this.SB12Amount9 = 0;
            this.SB12Unit9 = string.Empty;
            this.SB15Amount9 = 0;
            this.SB15Unit9 = string.Empty;
            this.SB13Amount9 = 1;
            this.SB13Unit9 = string.Empty;
            this.SB14Amount9 = 1;
            this.SB14Unit9 = string.Empty;

            this.SB1Description10 = string.Empty;
            this.SB1URL10 = string.Empty;
            this.SB1Name10 = string.Empty;
            this.SB1Label10 = string.Empty;
            this.SB1Type10 = RUC_TYPES.none.ToString();
            this.SB1RelLabel10 = string.Empty;
            this.SB1TAmount10 = 0;
            this.SB1TUnit10 = string.Empty;
            this.SB1TD1Amount10 = 0;
            this.SB1TD1Unit10 = string.Empty;
            this.SB1TD2Amount10 = 0;
            this.SB1TD2Unit10 = string.Empty;
            this.SB1MathResult10 = string.Empty;
            this.SB1MathSubType10 = Constants.NONE;

            this.SB1TMAmount10 = 0;
            this.SB1TMUnit10 = string.Empty;
            this.SB1TLAmount10 = 0;
            this.SB1TLUnit10 = string.Empty;
            this.SB1TUAmount10 = 0;
            this.SB1TUUnit10 = string.Empty;
            this.SB1MathOperator10 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression10 = string.Empty;
            this.SB1BaseIO10 = string.Empty;
            this.SB1Date10 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType10 = MATH_TYPES.none.ToString();
            this.SB11Amount10 = 0;
            this.SB11Unit10 = string.Empty;
            this.SB12Amount10 = 0;
            this.SB12Unit10 = string.Empty;
            this.SB15Amount10 = 0;
            this.SB15Unit10 = string.Empty;
            this.SB13Amount10 = 1;
            this.SB13Unit10 = string.Empty;
            this.SB14Amount10 = 1;
            this.SB14Unit10 = string.Empty;

            this.SB1Description11 = string.Empty;
            this.SB1URL11 = string.Empty;
            this.SB1Name11 = string.Empty;
            this.SB1Label11 = string.Empty;
            this.SB1Type11 = RUC_TYPES.none.ToString();
            this.SB1RelLabel11 = string.Empty;
            this.SB1TAmount11 = 0;
            this.SB1TUnit11 = string.Empty;
            this.SB1TD1Amount11 = 0;
            this.SB1TD1Unit11 = string.Empty;
            this.SB1TD2Amount11 = 0;
            this.SB1TD2Unit11 = string.Empty;
            this.SB1MathResult11 = string.Empty;
            this.SB1MathSubType11 = Constants.NONE;

            this.SB1TMAmount11 = 0;
            this.SB1TMUnit11 = string.Empty;
            this.SB1TLAmount11 = 0;
            this.SB1TLUnit11 = string.Empty;
            this.SB1TUAmount11 = 0;
            this.SB1TUUnit11 = string.Empty;
            this.SB1MathOperator11 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression11 = string.Empty;
            this.SB1BaseIO11 = string.Empty;
            this.SB1Date11 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType11 = MATH_TYPES.none.ToString();
            this.SB11Amount11 = 0;
            this.SB11Unit11 = string.Empty;
            this.SB12Amount11 = 0;
            this.SB12Unit11 = string.Empty;
            this.SB15Amount11 = 0;
            this.SB15Unit11 = string.Empty;
            this.SB13Amount11 = 1;
            this.SB13Unit11 = string.Empty;
            this.SB14Amount11 = 1;
            this.SB14Unit11 = string.Empty;

            this.SB1Description12 = string.Empty;
            this.SB1URL12 = string.Empty;
            this.SB1Name12 = string.Empty;
            this.SB1Label12 = string.Empty;
            this.SB1Type12 = RUC_TYPES.none.ToString();
            this.SB1RelLabel12 = string.Empty;
            this.SB1TAmount12 = 0;
            this.SB1TUnit12 = string.Empty;
            this.SB1TD1Amount12 = 0;
            this.SB1TD1Unit12 = string.Empty;
            this.SB1TD2Amount12 = 0;
            this.SB1TD2Unit12 = string.Empty;
            this.SB1MathResult12 = string.Empty;
            this.SB1MathSubType12 = Constants.NONE;

            this.SB1TMAmount12 = 0;
            this.SB1TMUnit12 = string.Empty;
            this.SB1TLAmount12 = 0;
            this.SB1TLUnit12 = string.Empty;
            this.SB1TUAmount12 = 0;
            this.SB1TUUnit12 = string.Empty;
            this.SB1MathOperator12 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression12 = string.Empty;
            this.SB1BaseIO12 = string.Empty;
            this.SB1Date12 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType12 = MATH_TYPES.none.ToString();
            this.SB11Amount12 = 0;
            this.SB11Unit12 = string.Empty;
            this.SB12Amount12 = 0;
            this.SB12Unit12 = string.Empty;
            this.SB15Amount12 = 0;
            this.SB15Unit12 = string.Empty;
            this.SB13Amount12 = 1;
            this.SB13Unit12 = string.Empty;
            this.SB14Amount12 = 1;
            this.SB14Unit12 = string.Empty;

            this.SB1Description13 = string.Empty;
            this.SB1URL13 = string.Empty;
            this.SB1Name13 = string.Empty;
            this.SB1Label13 = string.Empty;
            this.SB1Type13 = RUC_TYPES.none.ToString();
            this.SB1RelLabel13 = string.Empty;
            this.SB1TAmount13 = 0;
            this.SB1TUnit13 = string.Empty;
            this.SB1TD1Amount13 = 0;
            this.SB1TD1Unit13 = string.Empty;
            this.SB1TD2Amount13 = 0;
            this.SB1TD2Unit13 = string.Empty;
            this.SB1MathResult13 = string.Empty;
            this.SB1MathSubType13 = Constants.NONE;

            this.SB1TMAmount13 = 0;
            this.SB1TMUnit13 = string.Empty;
            this.SB1TLAmount13 = 0;
            this.SB1TLUnit13 = string.Empty;
            this.SB1TUAmount13 = 0;
            this.SB1TUUnit13 = string.Empty;
            this.SB1MathOperator13 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression13 = string.Empty;
            this.SB1BaseIO13 = string.Empty;
            this.SB1Date13 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType13 = MATH_TYPES.none.ToString();
            this.SB11Amount13 = 0;
            this.SB11Unit13 = string.Empty;
            this.SB12Amount13 = 0;
            this.SB12Unit13 = string.Empty;
            this.SB15Amount13 = 0;
            this.SB15Unit13 = string.Empty;
            this.SB13Amount13 = 1;
            this.SB13Unit13 = string.Empty;
            this.SB14Amount13 = 1;
            this.SB14Unit13 = string.Empty;

            this.SB1Description14 = string.Empty;
            this.SB1URL14 = string.Empty;
            this.SB1Name14 = string.Empty;
            this.SB1Label14 = string.Empty;
            this.SB1Type14 = RUC_TYPES.none.ToString();
            this.SB1RelLabel14 = string.Empty;
            this.SB1TAmount14 = 0;
            this.SB1TUnit14 = string.Empty;
            this.SB1TD1Amount14 = 0;
            this.SB1TD1Unit14 = string.Empty;
            this.SB1TD2Amount14 = 0;
            this.SB1TD2Unit14 = string.Empty;
            this.SB1MathResult14 = string.Empty;
            this.SB1MathSubType14 = Constants.NONE;

            this.SB1TMAmount14 = 0;
            this.SB1TMUnit14 = string.Empty;
            this.SB1TLAmount14 = 0;
            this.SB1TLUnit14 = string.Empty;
            this.SB1TUAmount14 = 0;
            this.SB1TUUnit14 = string.Empty;
            this.SB1MathOperator14 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression14 = string.Empty;
            this.SB1BaseIO14 = string.Empty;
            this.SB1Date14 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType14 = MATH_TYPES.none.ToString();
            this.SB11Amount14 = 0;
            this.SB11Unit14 = string.Empty;
            this.SB12Amount14 = 0;
            this.SB12Unit14 = string.Empty;
            this.SB15Amount14 = 0;
            this.SB15Unit14 = string.Empty;
            this.SB13Amount14 = 1;
            this.SB13Unit14 = string.Empty;
            this.SB14Amount14 = 1;
            this.SB14Unit14 = string.Empty;

            this.SB1Description15 = string.Empty;
            this.SB1URL15 = string.Empty;
            this.SB1Name15 = string.Empty;
            this.SB1Label15 = string.Empty;
            this.SB1Type15 = RUC_TYPES.none.ToString();
            this.SB1RelLabel15 = string.Empty;
            this.SB1TAmount15 = 0;
            this.SB1TUnit15 = string.Empty;
            this.SB1TD1Amount15 = 0;
            this.SB1TD1Unit15 = string.Empty;
            this.SB1TD2Amount15 = 0;
            this.SB1TD2Unit15 = string.Empty;
            this.SB1MathResult15 = string.Empty;
            this.SB1MathSubType15 = Constants.NONE;

            this.SB1TMAmount15 = 0;
            this.SB1TMUnit15 = string.Empty;
            this.SB1TLAmount15 = 0;
            this.SB1TLUnit15 = string.Empty;
            this.SB1TUAmount15 = 0;
            this.SB1TUUnit15 = string.Empty;
            this.SB1MathOperator15 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression15 = string.Empty;
            this.SB1BaseIO15 = string.Empty;
            this.SB1Date15 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType15 = MATH_TYPES.none.ToString();
            this.SB11Amount15 = 0;
            this.SB11Unit15 = string.Empty;
            this.SB12Amount15 = 0;
            this.SB12Unit15 = string.Empty;
            this.SB15Amount15 = 0;
            this.SB15Unit15 = string.Empty;
            this.SB13Amount15 = 1;
            this.SB13Unit15 = string.Empty;
            this.SB14Amount15 = 1;
            this.SB14Unit15 = string.Empty;

            this.SB1Description16 = string.Empty;
            this.SB1URL16 = string.Empty;
            this.SB1Name16 = string.Empty;
            this.SB1Label16 = string.Empty;
            this.SB1Type16 = RUC_TYPES.none.ToString();
            this.SB1RelLabel16 = string.Empty;
            this.SB1TAmount16 = 0;
            this.SB1TUnit16 = string.Empty;
            this.SB1TD1Amount16 = 0;
            this.SB1TD1Unit16 = string.Empty;
            this.SB1TD2Amount16 = 0;
            this.SB1TD2Unit16 = string.Empty;
            this.SB1MathResult16 = string.Empty;
            this.SB1MathSubType16 = Constants.NONE;

            this.SB1TMAmount16 = 0;
            this.SB1TMUnit16 = string.Empty;
            this.SB1TLAmount16 = 0;
            this.SB1TLUnit16 = string.Empty;
            this.SB1TUAmount16 = 0;
            this.SB1TUUnit16 = string.Empty;
            this.SB1MathOperator16 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression16 = string.Empty;
            this.SB1BaseIO16 = string.Empty;
            this.SB1Date16 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType16 = MATH_TYPES.none.ToString();
            this.SB11Amount16 = 0;
            this.SB11Unit16 = string.Empty;
            this.SB12Amount16 = 0;
            this.SB12Unit16 = string.Empty;
            this.SB15Amount16 = 0;
            this.SB15Unit16 = string.Empty;
            this.SB13Amount16 = 1;
            this.SB13Unit16 = string.Empty;
            this.SB14Amount16 = 1;
            this.SB14Unit16 = string.Empty;

            this.SB1Description17 = string.Empty;
            this.SB1URL17 = string.Empty;
            this.SB1Name17 = string.Empty;
            this.SB1Label17 = string.Empty;
            this.SB1Type17 = RUC_TYPES.none.ToString();
            this.SB1RelLabel17 = string.Empty;
            this.SB1TAmount17 = 0;
            this.SB1TUnit17 = string.Empty;
            this.SB1TD1Amount17 = 0;
            this.SB1TD1Unit17 = string.Empty;
            this.SB1TD2Amount17 = 0;
            this.SB1TD2Unit17 = string.Empty;
            this.SB1MathResult17 = string.Empty;
            this.SB1MathSubType17 = Constants.NONE;

            this.SB1TMAmount17 = 0;
            this.SB1TMUnit17 = string.Empty;
            this.SB1TLAmount17 = 0;
            this.SB1TLUnit17 = string.Empty;
            this.SB1TUAmount17 = 0;
            this.SB1TUUnit17 = string.Empty;
            this.SB1MathOperator17 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression17 = string.Empty;
            this.SB1BaseIO17 = string.Empty;
            this.SB1Date17 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType17 = MATH_TYPES.none.ToString();
            this.SB11Amount17 = 0;
            this.SB11Unit17 = string.Empty;
            this.SB12Amount17 = 0;
            this.SB12Unit17 = string.Empty;
            this.SB15Amount17 = 0;
            this.SB15Unit17 = string.Empty;
            this.SB13Amount17 = 1;
            this.SB13Unit17 = string.Empty;
            this.SB14Amount17 = 1;
            this.SB14Unit17 = string.Empty;

            this.SB1Description18 = string.Empty;
            this.SB1URL18 = string.Empty;
            this.SB1Name18 = string.Empty;
            this.SB1Label18 = string.Empty;
            this.SB1Type18 = RUC_TYPES.none.ToString();
            this.SB1RelLabel18 = string.Empty;
            this.SB1TAmount18 = 0;
            this.SB1TUnit18 = string.Empty;
            this.SB1TD1Amount18 = 0;
            this.SB1TD1Unit18 = string.Empty;
            this.SB1TD2Amount18 = 0;
            this.SB1TD2Unit18 = string.Empty;
            this.SB1MathResult18 = string.Empty;
            this.SB1MathSubType18 = Constants.NONE;

            this.SB1TMAmount18 = 0;
            this.SB1TMUnit18 = string.Empty;
            this.SB1TLAmount18 = 0;
            this.SB1TLUnit18 = string.Empty;
            this.SB1TUAmount18 = 0;
            this.SB1TUUnit18 = string.Empty;
            this.SB1MathOperator18 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression18 = string.Empty;
            this.SB1BaseIO18 = string.Empty;
            this.SB1Date18 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType18 = MATH_TYPES.none.ToString();
            this.SB11Amount18 = 0;
            this.SB11Unit18 = string.Empty;
            this.SB12Amount18 = 0;
            this.SB12Unit18 = string.Empty;
            this.SB15Amount18 = 0;
            this.SB15Unit18 = string.Empty;
            this.SB13Amount18 = 1;
            this.SB13Unit18 = string.Empty;
            this.SB14Amount18 = 1;
            this.SB14Unit18 = string.Empty;

            this.SB1Description19 = string.Empty;
            this.SB1URL19 = string.Empty;
            this.SB1Name19 = string.Empty;
            this.SB1Label19 = string.Empty;
            this.SB1Type19 = RUC_TYPES.none.ToString();
            this.SB1RelLabel19 = string.Empty;
            this.SB1TAmount19 = 0;
            this.SB1TUnit19 = string.Empty;
            this.SB1TD1Amount19 = 0;
            this.SB1TD1Unit19 = string.Empty;
            this.SB1TD2Amount19 = 0;
            this.SB1TD2Unit19 = string.Empty;
            this.SB1MathResult19 = string.Empty;
            this.SB1MathSubType19 = Constants.NONE;

            this.SB1TMAmount19 = 0;
            this.SB1TMUnit19 = string.Empty;
            this.SB1TLAmount19 = 0;
            this.SB1TLUnit19 = string.Empty;
            this.SB1TUAmount19 = 0;
            this.SB1TUUnit19 = string.Empty;
            this.SB1MathOperator19 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression19 = string.Empty;
            this.SB1BaseIO19 = string.Empty;
            this.SB1Date19 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType19 = MATH_TYPES.none.ToString();
            this.SB11Amount19 = 0;
            this.SB11Unit19 = string.Empty;
            this.SB12Amount19 = 0;
            this.SB12Unit19 = string.Empty;
            this.SB15Amount19 = 0;
            this.SB15Unit19 = string.Empty;
            this.SB13Amount19 = 1;
            this.SB13Unit19 = string.Empty;
            this.SB14Amount19 = 1;
            this.SB14Unit19 = string.Empty;

            this.SB1Description20 = string.Empty;
            this.SB1URL20 = string.Empty;
            this.SB1Name20 = string.Empty;
            this.SB1Label20 = string.Empty;
            this.SB1Type20 = RUC_TYPES.none.ToString();
            this.SB1RelLabel20 = string.Empty;
            this.SB1TAmount20 = 0;
            this.SB1TUnit20 = string.Empty;
            this.SB1TD1Amount20 = 0;
            this.SB1TD1Unit20 = string.Empty;
            this.SB1TD2Amount20 = 0;
            this.SB1TD2Unit20 = string.Empty;
            this.SB1MathResult20 = string.Empty;
            this.SB1MathSubType20 = Constants.NONE;

            this.SB1TMAmount20 = 0;
            this.SB1TMUnit20 = string.Empty;
            this.SB1TLAmount20 = 0;
            this.SB1TLUnit20 = string.Empty;
            this.SB1TUAmount20 = 0;
            this.SB1TUUnit20 = string.Empty;
            this.SB1MathOperator20 = MATH_OPERATOR_TYPES.none.ToString();
            this.SB1MathExpression20 = string.Empty;
            this.SB1BaseIO20 = string.Empty;
            this.SB1Date20 = CalculatorHelpers.GetDateShortNow();
            this.SB1MathType1 = MATH_TYPES.none.ToString();
            this.SB11Amount20 = 0;
            this.SB11Unit20 = string.Empty;
            this.SB12Amount20 = 0;
            this.SB12Unit20 = string.Empty;
            this.SB15Amount20 = 0;
            this.SB15Unit20 = string.Empty;
            this.SB13Amount20 = 1;
            this.SB13Unit20 = string.Empty;
            this.SB14Amount20 = 1;
            this.SB14Unit20 = string.Empty;
        }

        public virtual void CopySB1BaseProperties(
            SB1Base calculator)
        {
            this.SB1Score = calculator.SB1Score;
            this.SB1ScoreUnit = calculator.SB1ScoreUnit;
            this.SB1ScoreD1Amount = calculator.SB1ScoreD1Amount;
            this.SB1ScoreD1Unit = calculator.SB1ScoreD1Unit;
            this.SB1ScoreD2Amount = calculator.SB1ScoreD2Amount;
            this.SB1ScoreD2Unit = calculator.SB1ScoreD2Unit;
            this.SB1ScoreMathExpression = calculator.SB1ScoreMathExpression;
            this.SB1ScoreM = calculator.SB1ScoreM;
            this.SB1ScoreMUnit = calculator.SB1ScoreMUnit;
            this.SB1ScoreLAmount = calculator.SB1ScoreLAmount;
            this.SB1ScoreLUnit = calculator.SB1ScoreLUnit;
            this.SB1ScoreUAmount = calculator.SB1ScoreUAmount; 
            this.SB1ScoreUUnit = calculator.SB1ScoreUUnit;
            this.SB1ScoreDistType = calculator.SB1ScoreDistType;
            this.SB1ScoreMathType = calculator.SB1ScoreMathType;
            this.SB1ScoreMathSubType = calculator.SB1ScoreMathSubType;
            this.SB1ScoreMathResult = calculator.SB1ScoreMathResult;
            this.SB1JointDataURL = calculator.SB1JointDataURL;
            this.SB1Iterations = calculator.SB1Iterations;
            this.SB1CILevel = calculator.SB1CILevel;
            this.SB1Random = calculator.SB1Random;
            this.SB1BaseIO = calculator.SB1BaseIO;
            this.SB1Description1 = calculator.SB1Description1;
            this.SB1URL1 = calculator.SB1URL1;
            this.SB1Name1 = calculator.SB1Name1;
            this.SB1Label1 = calculator.SB1Label1;
            this.SB1Type1 = calculator.SB1Type1;
            this.SB1RelLabel1 = calculator.SB1RelLabel1;
            this.SB1TAmount1 = calculator.SB1TAmount1;
            this.SB1TUnit1 = calculator.SB1TUnit1;
            this.SB1TD1Amount1 = calculator.SB1TD1Amount1;
            this.SB1TD1Unit1 = calculator.SB1TD1Unit1;
            this.SB1TD2Amount1 = calculator.SB1TD2Amount1;
            this.SB1TD2Unit1 = calculator.SB1TD2Unit1;
            this.SB1MathResult1 = calculator.SB1MathResult1;
            this.SB1MathSubType1 = calculator.SB1MathSubType1;

            this.SB1TMAmount1 = calculator.SB1TMAmount1;
            this.SB1TMUnit1 = calculator.SB1TMUnit1;
            this.SB1TLAmount1 = calculator.SB1TLAmount1;
            this.SB1TLUnit1 = calculator.SB1TLUnit1;
            this.SB1TUAmount1 = calculator.SB1TUAmount1;
            this.SB1TUUnit1 = calculator.SB1TUUnit1;
            this.SB1MathOperator1 = calculator.SB1MathOperator1;
            this.SB1MathExpression1 = calculator.SB1MathExpression1;
            this.SB1BaseIO1 = calculator.SB1BaseIO1;
            this.SB1Date1 = calculator.SB1Date1;
            this.SB1MathType1 = calculator.SB1MathType1;
            this.SB11Amount1 = calculator.SB11Amount1;
            this.SB11Unit1 = calculator.SB11Unit1;
            this.SB12Amount1 = calculator.SB12Amount1;
            this.SB12Unit1 = calculator.SB12Unit1;
            this.SB15Amount1 = calculator.SB15Amount1;
            this.SB15Unit1 = calculator.SB15Unit1;
            this.SB13Amount1 = calculator.SB13Amount1;
            this.SB13Unit1 = calculator.SB13Unit1;
            this.SB14Amount1 = calculator.SB14Amount1;
            this.SB14Unit1 = calculator.SB14Unit1;

            this.SB1Description2 = calculator.SB1Description2;
            this.SB1URL2 = calculator.SB1URL2;
            this.SB1Name2 = calculator.SB1Name2;
            this.SB1Label2 = calculator.SB1Label2;
            this.SB1Type2 = calculator.SB1Type2;
            this.SB1RelLabel2 = calculator.SB1RelLabel2;
            this.SB1TAmount2 = calculator.SB1TAmount2;
            this.SB1TUnit2 = calculator.SB1TUnit2;
            this.SB1TD1Amount2 = calculator.SB1TD1Amount2;
            this.SB1TD1Unit2 = calculator.SB1TD1Unit2;
            this.SB1TD2Amount2 = calculator.SB1TD2Amount2;
            this.SB1TD2Unit2 = calculator.SB1TD2Unit2;
            this.SB1MathResult2 = calculator.SB1MathResult2;
            this.SB1MathSubType2 = calculator.SB1MathSubType2;

            this.SB1TMAmount2 = calculator.SB1TMAmount2;
            this.SB1TMUnit2 = calculator.SB1TMUnit2;
            this.SB1TLAmount2 = calculator.SB1TLAmount2;
            this.SB1TLUnit2 = calculator.SB1TLUnit2;
            this.SB1TUAmount2 = calculator.SB1TUAmount2;
            this.SB1TUUnit2 = calculator.SB1TUUnit2;
            this.SB1MathOperator2 = calculator.SB1MathOperator2;
            this.SB1MathExpression2 = calculator.SB1MathExpression2;
            this.SB1BaseIO2 = calculator.SB1BaseIO2;
            this.SB1Date2 = calculator.SB1Date2;
            this.SB1MathType2 = calculator.SB1MathType2;
            this.SB11Amount2 = calculator.SB11Amount2;
            this.SB11Unit2 = calculator.SB11Unit2;
            this.SB12Amount2 = calculator.SB12Amount2;
            this.SB12Unit2 = calculator.SB12Unit2;
            this.SB15Amount2 = calculator.SB15Amount2;
            this.SB15Unit2 = calculator.SB15Unit2;
            this.SB13Amount2 = calculator.SB13Amount2;
            this.SB13Unit2 = calculator.SB13Unit2;
            this.SB14Amount2 = calculator.SB14Amount2;
            this.SB14Unit2 = calculator.SB14Unit2;

            this.SB1Description3 = calculator.SB1Description3;
            this.SB1URL3 = calculator.SB1URL3;
            this.SB1Name3 = calculator.SB1Name3;
            this.SB1Label3 = calculator.SB1Label3;
            this.SB1Type3 = calculator.SB1Type3;
            this.SB1RelLabel3 = calculator.SB1RelLabel3;
            this.SB1TAmount3 = calculator.SB1TAmount3;
            this.SB1TUnit3 = calculator.SB1TUnit3;
            this.SB1TD1Amount3 = calculator.SB1TD1Amount3;
            this.SB1TD1Unit3 = calculator.SB1TD1Unit3;
            this.SB1TD2Amount3 = calculator.SB1TD2Amount3;
            this.SB1TD2Unit3 = calculator.SB1TD2Unit3;
            this.SB1MathResult3 = calculator.SB1MathResult3;
            this.SB1MathSubType3 = calculator.SB1MathSubType3;

            this.SB1TMAmount3 = calculator.SB1TMAmount3;
            this.SB1TMUnit3 = calculator.SB1TMUnit3;
            this.SB1TLAmount3 = calculator.SB1TLAmount3;
            this.SB1TLUnit3 = calculator.SB1TLUnit3;
            this.SB1TUAmount3 = calculator.SB1TUAmount3;
            this.SB1TUUnit3 = calculator.SB1TUUnit3;
            this.SB1MathOperator3 = calculator.SB1MathOperator3;
            this.SB1MathExpression3 = calculator.SB1MathExpression3;
            this.SB1BaseIO3 = calculator.SB1BaseIO3;
            this.SB1Date3 = calculator.SB1Date3;
            this.SB1MathType3 = calculator.SB1MathType3;
            this.SB11Amount3 = calculator.SB11Amount3;
            this.SB11Unit3 = calculator.SB11Unit3;
            this.SB12Amount3 = calculator.SB12Amount3;
            this.SB12Unit3 = calculator.SB12Unit3;
            this.SB15Amount3 = calculator.SB15Amount3;
            this.SB15Unit3 = calculator.SB15Unit3;
            this.SB13Amount3 = calculator.SB13Amount3;
            this.SB13Unit3 = calculator.SB13Unit3;
            this.SB14Amount3 = calculator.SB14Amount3;
            this.SB14Unit3 = calculator.SB14Unit3;

            this.SB1Description4 = calculator.SB1Description4;
            this.SB1URL4 = calculator.SB1URL4;
            this.SB1Name4 = calculator.SB1Name4;
            this.SB1Label4 = calculator.SB1Label4;
            this.SB1Type4 = calculator.SB1Type4;
            this.SB1RelLabel4 = calculator.SB1RelLabel4;
            this.SB1TAmount4 = calculator.SB1TAmount4;
            this.SB1TUnit4 = calculator.SB1TUnit4;
            this.SB1TD1Amount4 = calculator.SB1TD1Amount4;
            this.SB1TD1Unit4 = calculator.SB1TD1Unit4;
            this.SB1TD2Amount4 = calculator.SB1TD2Amount4;
            this.SB1TD2Unit4 = calculator.SB1TD2Unit4;
            this.SB1MathResult4 = calculator.SB1MathResult4;
            this.SB1MathSubType4 = calculator.SB1MathSubType4;

            this.SB1TMAmount4 = calculator.SB1TMAmount4;
            this.SB1TMUnit4 = calculator.SB1TMUnit4;
            this.SB1TLAmount4 = calculator.SB1TLAmount4;
            this.SB1TLUnit4 = calculator.SB1TLUnit4;
            this.SB1TUAmount4 = calculator.SB1TUAmount4;
            this.SB1TUUnit4 = calculator.SB1TUUnit4;
            this.SB1MathOperator4 = calculator.SB1MathOperator4;
            this.SB1MathExpression4 = calculator.SB1MathExpression4;
            this.SB1BaseIO4 = calculator.SB1BaseIO4;
            this.SB1Date4 = calculator.SB1Date4;
            this.SB1MathType4 = calculator.SB1MathType4;
            this.SB11Amount4 = calculator.SB11Amount4;
            this.SB11Unit4 = calculator.SB11Unit4;
            this.SB12Amount4 = calculator.SB12Amount4;
            this.SB12Unit4 = calculator.SB12Unit4;
            this.SB15Amount4 = calculator.SB15Amount4;
            this.SB15Unit4 = calculator.SB15Unit4;
            this.SB13Amount4 = calculator.SB13Amount4;
            this.SB13Unit4 = calculator.SB13Unit4;
            this.SB14Amount4 = calculator.SB14Amount4;
            this.SB14Unit4 = calculator.SB14Unit4;

            this.SB1Description5 = calculator.SB1Description5;
            this.SB1URL5 = calculator.SB1URL5;
            this.SB1Name5 = calculator.SB1Name5;
            this.SB1Label5 = calculator.SB1Label5;
            this.SB1Type5 = calculator.SB1Type5;
            this.SB1RelLabel5 = calculator.SB1RelLabel5;
            this.SB1TAmount5 = calculator.SB1TAmount5;
            this.SB1TUnit5 = calculator.SB1TUnit5;
            this.SB1TD1Amount5 = calculator.SB1TD1Amount5;
            this.SB1TD1Unit5 = calculator.SB1TD1Unit5;
            this.SB1TD2Amount5 = calculator.SB1TD2Amount5;
            this.SB1TD2Unit5 = calculator.SB1TD2Unit5;
            this.SB1MathResult5 = calculator.SB1MathResult5;
            this.SB1MathSubType5 = calculator.SB1MathSubType5;

            this.SB1TMAmount5 = calculator.SB1TMAmount5;
            this.SB1TMUnit5 = calculator.SB1TMUnit5;
            this.SB1TLAmount5 = calculator.SB1TLAmount5;
            this.SB1TLUnit5 = calculator.SB1TLUnit5;
            this.SB1TUAmount5 = calculator.SB1TUAmount5;
            this.SB1TUUnit5 = calculator.SB1TUUnit5;
            this.SB1MathOperator5 = calculator.SB1MathOperator5;
            this.SB1MathExpression5 = calculator.SB1MathExpression5;
            this.SB1BaseIO5 = calculator.SB1BaseIO5;
            this.SB1Date5 = calculator.SB1Date5;
            this.SB1MathType5 = calculator.SB1MathType5;
            this.SB11Amount5 = calculator.SB11Amount5;
            this.SB11Unit5 = calculator.SB11Unit5;
            this.SB12Amount5 = calculator.SB12Amount5;
            this.SB12Unit5 = calculator.SB12Unit5;
            this.SB15Amount5 = calculator.SB15Amount5;
            this.SB15Unit5 = calculator.SB15Unit5;
            this.SB13Amount5 = calculator.SB13Amount5;
            this.SB13Unit5 = calculator.SB13Unit5;
            this.SB14Amount5 = calculator.SB14Amount5;
            this.SB14Unit5 = calculator.SB14Unit5;

            this.SB1Description6 = calculator.SB1Description6;
            this.SB1URL6 = calculator.SB1URL6;
            this.SB1Name6 = calculator.SB1Name6;
            this.SB1Label6 = calculator.SB1Label6;
            this.SB1Type6 = calculator.SB1Type6;
            this.SB1RelLabel6 = calculator.SB1RelLabel6;
            this.SB1TAmount6 = calculator.SB1TAmount6;
            this.SB1TUnit6 = calculator.SB1TUnit6;
            this.SB1TD1Amount6 = calculator.SB1TD1Amount6;
            this.SB1TD1Unit6 = calculator.SB1TD1Unit6;
            this.SB1TD2Amount6 = calculator.SB1TD2Amount6;
            this.SB1TD2Unit6 = calculator.SB1TD2Unit6;
            this.SB1MathResult6 = calculator.SB1MathResult6;
            this.SB1MathSubType6 = calculator.SB1MathSubType6;

            this.SB1TMAmount6 = calculator.SB1TMAmount6;
            this.SB1TMUnit6 = calculator.SB1TMUnit6;
            this.SB1TLAmount6 = calculator.SB1TLAmount6;
            this.SB1TLUnit6 = calculator.SB1TLUnit6;
            this.SB1TUAmount6 = calculator.SB1TUAmount6;
            this.SB1TUUnit6 = calculator.SB1TUUnit6;
            this.SB1MathOperator6 = calculator.SB1MathOperator6;
            this.SB1MathExpression6 = calculator.SB1MathExpression6;
            this.SB1BaseIO6 = calculator.SB1BaseIO6;
            this.SB1Date6 = calculator.SB1Date6;
            this.SB1MathType6 = calculator.SB1MathType6;
            this.SB11Amount6 = calculator.SB11Amount6;
            this.SB11Unit6 = calculator.SB11Unit6;
            this.SB12Amount6 = calculator.SB12Amount6;
            this.SB12Unit6 = calculator.SB12Unit6;
            this.SB15Amount6 = calculator.SB15Amount6;
            this.SB15Unit6 = calculator.SB15Unit6;
            this.SB13Amount6 = calculator.SB13Amount6;
            this.SB13Unit6 = calculator.SB13Unit6;
            this.SB14Amount6 = calculator.SB14Amount6;
            this.SB14Unit6 = calculator.SB14Unit6;

            this.SB1Description7 = calculator.SB1Description7;
            this.SB1URL7 = calculator.SB1URL7;
            this.SB1Name7 = calculator.SB1Name7;
            this.SB1Label7 = calculator.SB1Label7;
            this.SB1Type7 = calculator.SB1Type7;
            this.SB1RelLabel7 = calculator.SB1RelLabel7;
            this.SB1TAmount7 = calculator.SB1TAmount7;
            this.SB1TUnit7 = calculator.SB1TUnit7;
            this.SB1TD1Amount7 = calculator.SB1TD1Amount7;
            this.SB1TD1Unit7 = calculator.SB1TD1Unit7;
            this.SB1TD2Amount7 = calculator.SB1TD2Amount7;
            this.SB1TD2Unit7 = calculator.SB1TD2Unit7;
            this.SB1MathResult7 = calculator.SB1MathResult7;
            this.SB1MathSubType7 = calculator.SB1MathSubType7;

            this.SB1TMAmount7 = calculator.SB1TMAmount7;
            this.SB1TMUnit7 = calculator.SB1TMUnit7;
            this.SB1TLAmount7 = calculator.SB1TLAmount7;
            this.SB1TLUnit7 = calculator.SB1TLUnit7;
            this.SB1TUAmount7 = calculator.SB1TUAmount7;
            this.SB1TUUnit7 = calculator.SB1TUUnit7;
            this.SB1MathOperator7 = calculator.SB1MathOperator7;
            this.SB1MathExpression7 = calculator.SB1MathExpression7;
            this.SB1BaseIO7 = calculator.SB1BaseIO7;
            this.SB1Date7 = calculator.SB1Date7;
            this.SB1MathType7 = calculator.SB1MathType7;
            this.SB11Amount7 = calculator.SB11Amount7;
            this.SB11Unit7 = calculator.SB11Unit7;
            this.SB12Amount7 = calculator.SB12Amount7;
            this.SB12Unit7 = calculator.SB12Unit7;
            this.SB15Amount7 = calculator.SB15Amount7;
            this.SB15Unit7 = calculator.SB15Unit7;
            this.SB13Amount7 = calculator.SB13Amount7;
            this.SB13Unit7 = calculator.SB13Unit7;
            this.SB14Amount7 = calculator.SB14Amount7;
            this.SB14Unit7 = calculator.SB14Unit7;

            this.SB1Description8 = calculator.SB1Description8;
            this.SB1URL8 = calculator.SB1URL8;
            this.SB1Name8 = calculator.SB1Name8;
            this.SB1Label8 = calculator.SB1Label8;
            this.SB1Type8 = calculator.SB1Type8;
            this.SB1RelLabel8 = calculator.SB1RelLabel8;
            this.SB1TAmount8 = calculator.SB1TAmount8;
            this.SB1TUnit8 = calculator.SB1TUnit8;
            this.SB1TD1Amount8 = calculator.SB1TD1Amount8;
            this.SB1TD1Unit8 = calculator.SB1TD1Unit8;
            this.SB1TD2Amount8 = calculator.SB1TD2Amount8;
            this.SB1TD2Unit8 = calculator.SB1TD2Unit8;
            this.SB1MathResult8 = calculator.SB1MathResult8;
            this.SB1MathSubType8 = calculator.SB1MathSubType8;

            this.SB1TMAmount8 = calculator.SB1TMAmount8;
            this.SB1TMUnit8 = calculator.SB1TMUnit8;
            this.SB1TLAmount8 = calculator.SB1TLAmount8;
            this.SB1TLUnit8 = calculator.SB1TLUnit8;
            this.SB1TUAmount8 = calculator.SB1TUAmount8;
            this.SB1TUUnit8 = calculator.SB1TUUnit8;
            this.SB1MathOperator8 = calculator.SB1MathOperator8;
            this.SB1MathExpression8 = calculator.SB1MathExpression8;
            this.SB1BaseIO8 = calculator.SB1BaseIO8;
            this.SB1Date8 = calculator.SB1Date8;
            this.SB1MathType8 = calculator.SB1MathType8;
            this.SB11Amount8 = calculator.SB11Amount8;
            this.SB11Unit8 = calculator.SB11Unit8;
            this.SB12Amount8 = calculator.SB12Amount8;
            this.SB12Unit8 = calculator.SB12Unit8;
            this.SB15Amount8 = calculator.SB15Amount8;
            this.SB15Unit8 = calculator.SB15Unit8;
            this.SB13Amount8 = calculator.SB13Amount8;
            this.SB13Unit8 = calculator.SB13Unit8;
            this.SB14Amount8 = calculator.SB14Amount8;
            this.SB14Unit8 = calculator.SB14Unit8;

            this.SB1Description9 = calculator.SB1Description9;
            this.SB1URL9 = calculator.SB1URL9;
            this.SB1Name9 = calculator.SB1Name9;
            this.SB1Label9 = calculator.SB1Label9;
            this.SB1Type9 = calculator.SB1Type9;
            this.SB1RelLabel9 = calculator.SB1RelLabel9;
            this.SB1TAmount9 = calculator.SB1TAmount9;
            this.SB1TUnit9 = calculator.SB1TUnit9;
            this.SB1TD1Amount9 = calculator.SB1TD1Amount9;
            this.SB1TD1Unit9 = calculator.SB1TD1Unit9;
            this.SB1TD2Amount9 = calculator.SB1TD2Amount9;
            this.SB1TD2Unit9 = calculator.SB1TD2Unit9;
            this.SB1MathResult9 = calculator.SB1MathResult9;
            this.SB1MathSubType9 = calculator.SB1MathSubType9;

            this.SB1TMAmount9 = calculator.SB1TMAmount9;
            this.SB1TMUnit9 = calculator.SB1TMUnit9;
            this.SB1TLAmount9 = calculator.SB1TLAmount9;
            this.SB1TLUnit9 = calculator.SB1TLUnit9;
            this.SB1TUAmount9 = calculator.SB1TUAmount9;
            this.SB1TUUnit9 = calculator.SB1TUUnit9;
            this.SB1MathOperator9 = calculator.SB1MathOperator9;
            this.SB1MathExpression9 = calculator.SB1MathExpression9;
            this.SB1BaseIO9 = calculator.SB1BaseIO9;
            this.SB1Date9 = calculator.SB1Date9;
            this.SB1MathType9 = calculator.SB1MathType9;
            this.SB11Amount9 = calculator.SB11Amount9;
            this.SB11Unit9 = calculator.SB11Unit9;
            this.SB12Amount9 = calculator.SB12Amount9;
            this.SB12Unit9 = calculator.SB12Unit9;
            this.SB15Amount9 = calculator.SB15Amount9;
            this.SB15Unit9 = calculator.SB15Unit9;
            this.SB13Amount9 = calculator.SB13Amount9;
            this.SB13Unit9 = calculator.SB13Unit9;
            this.SB14Amount9 = calculator.SB14Amount9;
            this.SB14Unit9 = calculator.SB14Unit9;

            this.SB1Description10 = calculator.SB1Description10;
            this.SB1URL10 = calculator.SB1URL10;
            this.SB1Name10 = calculator.SB1Name10;
            this.SB1Label10 = calculator.SB1Label10;
            this.SB1Type10 = calculator.SB1Type10;
            this.SB1RelLabel10 = calculator.SB1RelLabel10;
            this.SB1TAmount10 = calculator.SB1TAmount10;
            this.SB1TUnit10 = calculator.SB1TUnit10;
            this.SB1TD1Amount10 = calculator.SB1TD1Amount10;
            this.SB1TD1Unit10 = calculator.SB1TD1Unit10;
            this.SB1TD2Amount10 = calculator.SB1TD2Amount10;
            this.SB1TD2Unit10 = calculator.SB1TD2Unit10;
            this.SB1MathResult10 = calculator.SB1MathResult10;
            this.SB1MathSubType10 = calculator.SB1MathSubType10;

            this.SB1TMAmount10 = calculator.SB1TMAmount10;
            this.SB1TMUnit10 = calculator.SB1TMUnit10;
            this.SB1TLAmount10 = calculator.SB1TLAmount10;
            this.SB1TLUnit10 = calculator.SB1TLUnit10;
            this.SB1TUAmount10 = calculator.SB1TUAmount10;
            this.SB1TUUnit10 = calculator.SB1TUUnit10;
            this.SB1MathOperator10 = calculator.SB1MathOperator10;
            this.SB1MathExpression10 = calculator.SB1MathExpression10;
            this.SB1BaseIO10 = calculator.SB1BaseIO10;
            this.SB1Date10 = calculator.SB1Date10;
            this.SB1MathType10 = calculator.SB1MathType10;
            this.SB11Amount10 = calculator.SB11Amount10;
            this.SB11Unit10 = calculator.SB11Unit10;
            this.SB12Amount10 = calculator.SB12Amount10;
            this.SB12Unit10 = calculator.SB12Unit10;
            this.SB15Amount10 = calculator.SB15Amount10;
            this.SB15Unit10 = calculator.SB15Unit10;
            this.SB13Amount10 = calculator.SB13Amount10;
            this.SB13Unit10 = calculator.SB13Unit10;
            this.SB14Amount10 = calculator.SB14Amount10;
            this.SB14Unit10 = calculator.SB14Unit10;

            this.SB1Description11 = calculator.SB1Description11;
            this.SB1URL11 = calculator.SB1URL11;
            this.SB1Name11 = calculator.SB1Name11;
            this.SB1Label11 = calculator.SB1Label11;
            this.SB1Type11 = calculator.SB1Type11;
            this.SB1RelLabel11 = calculator.SB1RelLabel11;
            this.SB1TAmount11 = calculator.SB1TAmount11;
            this.SB1TUnit11 = calculator.SB1TUnit11;
            this.SB1TD1Amount11 = calculator.SB1TD1Amount11;
            this.SB1TD1Unit11 = calculator.SB1TD1Unit11;
            this.SB1TD2Amount11 = calculator.SB1TD2Amount11;
            this.SB1TD2Unit11 = calculator.SB1TD2Unit11;
            this.SB1MathResult11 = calculator.SB1MathResult11;
            this.SB1MathSubType11 = calculator.SB1MathSubType11;

            this.SB1TMAmount11 = calculator.SB1TMAmount11;
            this.SB1TMUnit11 = calculator.SB1TMUnit11;
            this.SB1TLAmount11 = calculator.SB1TLAmount11;
            this.SB1TLUnit11 = calculator.SB1TLUnit11;
            this.SB1TUAmount11 = calculator.SB1TUAmount11;
            this.SB1TUUnit11 = calculator.SB1TUUnit11;
            this.SB1MathOperator11 = calculator.SB1MathOperator11;
            this.SB1MathExpression11 = calculator.SB1MathExpression11;
            this.SB1BaseIO11 = calculator.SB1BaseIO11;
            this.SB1Date11 = calculator.SB1Date11;
            this.SB1MathType11 = calculator.SB1MathType11;
            this.SB11Amount11 = calculator.SB11Amount11;
            this.SB11Unit11 = calculator.SB11Unit11;
            this.SB12Amount11 = calculator.SB12Amount11;
            this.SB12Unit11 = calculator.SB12Unit11;
            this.SB15Amount11 = calculator.SB15Amount11;
            this.SB15Unit11 = calculator.SB15Unit11;
            this.SB13Amount11 = calculator.SB13Amount11;
            this.SB13Unit11 = calculator.SB13Unit11;
            this.SB14Amount11 = calculator.SB14Amount11;
            this.SB14Unit11 = calculator.SB14Unit11;

            this.SB1Description12 = calculator.SB1Description12;
            this.SB1URL12 = calculator.SB1URL12;
            this.SB1Name12 = calculator.SB1Name12;
            this.SB1Label12 = calculator.SB1Label12;
            this.SB1Type12 = calculator.SB1Type12;
            this.SB1RelLabel12 = calculator.SB1RelLabel12;
            this.SB1TAmount12 = calculator.SB1TAmount12;
            this.SB1TUnit12 = calculator.SB1TUnit12;
            this.SB1TD1Amount12 = calculator.SB1TD1Amount12;
            this.SB1TD1Unit12 = calculator.SB1TD1Unit12;
            this.SB1TD2Amount12 = calculator.SB1TD2Amount12;
            this.SB1TD2Unit12 = calculator.SB1TD2Unit12;
            this.SB1MathResult12 = calculator.SB1MathResult12;
            this.SB1MathSubType12 = calculator.SB1MathSubType12;

            this.SB1TMAmount12 = calculator.SB1TMAmount12;
            this.SB1TMUnit12 = calculator.SB1TMUnit12;
            this.SB1TLAmount12 = calculator.SB1TLAmount12;
            this.SB1TLUnit12 = calculator.SB1TLUnit12;
            this.SB1TUAmount12 = calculator.SB1TUAmount12;
            this.SB1TUUnit12 = calculator.SB1TUUnit12;
            this.SB1MathOperator12 = calculator.SB1MathOperator12;
            this.SB1MathExpression12 = calculator.SB1MathExpression12;
            this.SB1BaseIO12 = calculator.SB1BaseIO12;
            this.SB1Date12 = calculator.SB1Date12;
            this.SB1MathType12 = calculator.SB1MathType12;
            this.SB11Amount12 = calculator.SB11Amount12;
            this.SB11Unit12 = calculator.SB11Unit12;
            this.SB12Amount12 = calculator.SB12Amount12;
            this.SB12Unit12 = calculator.SB12Unit12;
            this.SB15Amount12 = calculator.SB15Amount12;
            this.SB15Unit12 = calculator.SB15Unit12;
            this.SB13Amount12 = calculator.SB13Amount12;
            this.SB13Unit12 = calculator.SB13Unit12;
            this.SB14Amount12 = calculator.SB14Amount12;
            this.SB14Unit12 = calculator.SB14Unit12;

            this.SB1Description13 = calculator.SB1Description13;
            this.SB1URL13 = calculator.SB1URL13;
            this.SB1Name13 = calculator.SB1Name13;
            this.SB1Label13 = calculator.SB1Label13;
            this.SB1Type13 = calculator.SB1Type13;
            this.SB1RelLabel13 = calculator.SB1RelLabel13;
            this.SB1TAmount13 = calculator.SB1TAmount13;
            this.SB1TUnit13 = calculator.SB1TUnit13;
            this.SB1TD1Amount13 = calculator.SB1TD1Amount13;
            this.SB1TD1Unit13 = calculator.SB1TD1Unit13;
            this.SB1TD2Amount13 = calculator.SB1TD2Amount13;
            this.SB1TD2Unit13 = calculator.SB1TD2Unit13;
            this.SB1MathResult13 = calculator.SB1MathResult13;
            this.SB1MathSubType13 = calculator.SB1MathSubType13;

            this.SB1TMAmount13 = calculator.SB1TMAmount13;
            this.SB1TMUnit13 = calculator.SB1TMUnit13;
            this.SB1TLAmount13 = calculator.SB1TLAmount13;
            this.SB1TLUnit13 = calculator.SB1TLUnit13;
            this.SB1TUAmount13 = calculator.SB1TUAmount13;
            this.SB1TUUnit13 = calculator.SB1TUUnit13;
            this.SB1MathOperator13 = calculator.SB1MathOperator13;
            this.SB1MathExpression13 = calculator.SB1MathExpression13;
            this.SB1BaseIO13 = calculator.SB1BaseIO13;
            this.SB1Date13 = calculator.SB1Date13;
            this.SB1MathType13 = calculator.SB1MathType13;
            this.SB11Amount13 = calculator.SB11Amount13;
            this.SB11Unit13 = calculator.SB11Unit13;
            this.SB12Amount13 = calculator.SB12Amount13;
            this.SB12Unit13 = calculator.SB12Unit13;
            this.SB15Amount13 = calculator.SB15Amount13;
            this.SB15Unit13 = calculator.SB15Unit13;
            this.SB13Amount13 = calculator.SB13Amount13;
            this.SB13Unit13 = calculator.SB13Unit13;
            this.SB14Amount13 = calculator.SB14Amount13;
            this.SB14Unit13 = calculator.SB14Unit13;

            this.SB1Description14 = calculator.SB1Description14;
            this.SB1URL14 = calculator.SB1URL14;
            this.SB1Name14 = calculator.SB1Name14;
            this.SB1Label14 = calculator.SB1Label14;
            this.SB1Type14 = calculator.SB1Type14;
            this.SB1RelLabel14 = calculator.SB1RelLabel14;
            this.SB1TAmount14 = calculator.SB1TAmount14;
            this.SB1TUnit14 = calculator.SB1TUnit14;
            this.SB1TD1Amount14 = calculator.SB1TD1Amount14;
            this.SB1TD1Unit14 = calculator.SB1TD1Unit14;
            this.SB1TD2Amount14 = calculator.SB1TD2Amount14;
            this.SB1TD2Unit14 = calculator.SB1TD2Unit14;
            this.SB1MathResult14 = calculator.SB1MathResult14;
            this.SB1MathSubType14 = calculator.SB1MathSubType14;

            this.SB1TMAmount14 = calculator.SB1TMAmount14;
            this.SB1TMUnit14 = calculator.SB1TMUnit14;
            this.SB1TLAmount14 = calculator.SB1TLAmount14;
            this.SB1TLUnit14 = calculator.SB1TLUnit14;
            this.SB1TUAmount14 = calculator.SB1TUAmount14;
            this.SB1TUUnit14 = calculator.SB1TUUnit14;
            this.SB1MathOperator14 = calculator.SB1MathOperator14;
            this.SB1MathExpression14 = calculator.SB1MathExpression14;
            this.SB1BaseIO14 = calculator.SB1BaseIO14;
            this.SB1Date14 = calculator.SB1Date14;
            this.SB1MathType14 = calculator.SB1MathType14;
            this.SB11Amount14 = calculator.SB11Amount14;
            this.SB11Unit14 = calculator.SB11Unit14;
            this.SB12Amount14 = calculator.SB12Amount14;
            this.SB12Unit14 = calculator.SB12Unit14;
            this.SB15Amount14 = calculator.SB15Amount14;
            this.SB15Unit14 = calculator.SB15Unit14;
            this.SB13Amount14 = calculator.SB13Amount14;
            this.SB13Unit14 = calculator.SB13Unit14;
            this.SB14Amount14 = calculator.SB14Amount14;
            this.SB14Unit14 = calculator.SB14Unit14;

            this.SB1Description15 = calculator.SB1Description15;
            this.SB1URL15 = calculator.SB1URL15;
            this.SB1Name15 = calculator.SB1Name15;
            this.SB1Label15 = calculator.SB1Label15;
            this.SB1Type15 = calculator.SB1Type15;
            this.SB1RelLabel15 = calculator.SB1RelLabel15;
            this.SB1TAmount15 = calculator.SB1TAmount15;
            this.SB1TUnit15 = calculator.SB1TUnit15;
            this.SB1TD1Amount15 = calculator.SB1TD1Amount15;
            this.SB1TD1Unit15 = calculator.SB1TD1Unit15;
            this.SB1TD2Amount15 = calculator.SB1TD2Amount15;
            this.SB1TD2Unit15 = calculator.SB1TD2Unit15;
            this.SB1MathResult15 = calculator.SB1MathResult15;
            this.SB1MathSubType15 = calculator.SB1MathSubType15;

            this.SB1TMAmount15 = calculator.SB1TMAmount15;
            this.SB1TMUnit15 = calculator.SB1TMUnit15;
            this.SB1TLAmount15 = calculator.SB1TLAmount15;
            this.SB1TLUnit15 = calculator.SB1TLUnit15;
            this.SB1TUAmount15 = calculator.SB1TUAmount15;
            this.SB1TUUnit15 = calculator.SB1TUUnit15;
            this.SB1MathOperator15 = calculator.SB1MathOperator15;
            this.SB1MathExpression15 = calculator.SB1MathExpression15;
            this.SB1BaseIO15 = calculator.SB1BaseIO15;
            this.SB1Date15 = calculator.SB1Date15;
            this.SB1MathType15 = calculator.SB1MathType15;
            this.SB11Amount15 = calculator.SB11Amount15;
            this.SB11Unit15 = calculator.SB11Unit15;
            this.SB12Amount15 = calculator.SB12Amount15;
            this.SB12Unit15 = calculator.SB12Unit15;
            this.SB15Amount15 = calculator.SB15Amount15;
            this.SB15Unit15 = calculator.SB15Unit15;
            this.SB13Amount15 = calculator.SB13Amount15;
            this.SB13Unit15 = calculator.SB13Unit15;
            this.SB14Amount15 = calculator.SB14Amount15;
            this.SB14Unit15 = calculator.SB14Unit15;

            this.SB1Description16 = calculator.SB1Description16;
            this.SB1URL16 = calculator.SB1URL16;
            this.SB1Name16 = calculator.SB1Name16;
            this.SB1Label16 = calculator.SB1Label16;
            this.SB1Type16 = calculator.SB1Type16;
            this.SB1RelLabel16 = calculator.SB1RelLabel16;
            this.SB1TAmount16 = calculator.SB1TAmount16;
            this.SB1TUnit16 = calculator.SB1TUnit16;
            this.SB1TD1Amount16 = calculator.SB1TD1Amount16;
            this.SB1TD1Unit16 = calculator.SB1TD1Unit16;
            this.SB1TD2Amount16 = calculator.SB1TD2Amount16;
            this.SB1TD2Unit16 = calculator.SB1TD2Unit16;
            this.SB1MathResult16 = calculator.SB1MathResult16;
            this.SB1MathSubType16 = calculator.SB1MathSubType16;

            this.SB1TMAmount16 = calculator.SB1TMAmount16;
            this.SB1TMUnit16 = calculator.SB1TMUnit16;
            this.SB1TLAmount16 = calculator.SB1TLAmount16;
            this.SB1TLUnit16 = calculator.SB1TLUnit16;
            this.SB1TUAmount16 = calculator.SB1TUAmount16;
            this.SB1TUUnit16 = calculator.SB1TUUnit16;
            this.SB1MathOperator16 = calculator.SB1MathOperator16;
            this.SB1MathExpression16 = calculator.SB1MathExpression16;
            this.SB1BaseIO16 = calculator.SB1BaseIO16;
            this.SB1Date16 = calculator.SB1Date16;
            this.SB1MathType16 = calculator.SB1MathType16;
            this.SB11Amount16 = calculator.SB11Amount16;
            this.SB11Unit16 = calculator.SB11Unit16;
            this.SB12Amount16 = calculator.SB12Amount16;
            this.SB12Unit16 = calculator.SB12Unit16;
            this.SB15Amount16 = calculator.SB15Amount16;
            this.SB15Unit16 = calculator.SB15Unit16;
            this.SB13Amount16 = calculator.SB13Amount16;
            this.SB13Unit16 = calculator.SB13Unit16;
            this.SB14Amount16 = calculator.SB14Amount16;
            this.SB14Unit16 = calculator.SB14Unit16;

            this.SB1Description17 = calculator.SB1Description17;
            this.SB1URL17 = calculator.SB1URL17;
            this.SB1Name17 = calculator.SB1Name17;
            this.SB1Label17 = calculator.SB1Label17;
            this.SB1Type17 = calculator.SB1Type17;
            this.SB1RelLabel17 = calculator.SB1RelLabel17;
            this.SB1TAmount17 = calculator.SB1TAmount17;
            this.SB1TUnit17 = calculator.SB1TUnit17;
            this.SB1TD1Amount17 = calculator.SB1TD1Amount17;
            this.SB1TD1Unit17 = calculator.SB1TD1Unit17;
            this.SB1TD2Amount17 = calculator.SB1TD2Amount17;
            this.SB1TD2Unit17 = calculator.SB1TD2Unit17;
            this.SB1MathResult17 = calculator.SB1MathResult17;
            this.SB1MathSubType17 = calculator.SB1MathSubType17;

            this.SB1TMAmount17 = calculator.SB1TMAmount17;
            this.SB1TMUnit17 = calculator.SB1TMUnit17;
            this.SB1TLAmount17 = calculator.SB1TLAmount17;
            this.SB1TLUnit17 = calculator.SB1TLUnit17;
            this.SB1TUAmount17 = calculator.SB1TUAmount17;
            this.SB1TUUnit17 = calculator.SB1TUUnit17;
            this.SB1MathOperator17 = calculator.SB1MathOperator17;
            this.SB1MathExpression17 = calculator.SB1MathExpression17;
            this.SB1BaseIO17 = calculator.SB1BaseIO17;
            this.SB1Date17 = calculator.SB1Date17;
            this.SB1MathType17 = calculator.SB1MathType17;
            this.SB11Amount17 = calculator.SB11Amount17;
            this.SB11Unit17 = calculator.SB11Unit17;
            this.SB12Amount17 = calculator.SB12Amount17;
            this.SB12Unit17 = calculator.SB12Unit17;
            this.SB15Amount17 = calculator.SB15Amount17;
            this.SB15Unit17 = calculator.SB15Unit17;
            this.SB13Amount17 = calculator.SB13Amount17;
            this.SB13Unit17 = calculator.SB13Unit17;
            this.SB14Amount17 = calculator.SB14Amount17;
            this.SB14Unit17 = calculator.SB14Unit17;

            this.SB1Description18 = calculator.SB1Description18;
            this.SB1URL18 = calculator.SB1URL18;
            this.SB1Name18 = calculator.SB1Name18;
            this.SB1Label18 = calculator.SB1Label18;
            this.SB1Type18 = calculator.SB1Type18;
            this.SB1RelLabel18 = calculator.SB1RelLabel18;
            this.SB1TAmount18 = calculator.SB1TAmount18;
            this.SB1TUnit18 = calculator.SB1TUnit18;
            this.SB1TD1Amount18 = calculator.SB1TD1Amount18;
            this.SB1TD1Unit18 = calculator.SB1TD1Unit18;
            this.SB1TD2Amount18 = calculator.SB1TD2Amount18;
            this.SB1TD2Unit18 = calculator.SB1TD2Unit18;
            this.SB1MathResult18 = calculator.SB1MathResult18;
            this.SB1MathSubType18 = calculator.SB1MathSubType18;

            this.SB1TMAmount18 = calculator.SB1TMAmount18;
            this.SB1TMUnit18 = calculator.SB1TMUnit18;
            this.SB1TLAmount18 = calculator.SB1TLAmount18;
            this.SB1TLUnit18 = calculator.SB1TLUnit18;
            this.SB1TUAmount18 = calculator.SB1TUAmount18;
            this.SB1TUUnit18 = calculator.SB1TUUnit18;
            this.SB1MathOperator18 = calculator.SB1MathOperator18;
            this.SB1MathExpression18 = calculator.SB1MathExpression18;
            this.SB1BaseIO18 = calculator.SB1BaseIO18;
            this.SB1Date18 = calculator.SB1Date18;
            this.SB1MathType18 = calculator.SB1MathType18;
            this.SB11Amount18 = calculator.SB11Amount18;
            this.SB11Unit18 = calculator.SB11Unit18;
            this.SB12Amount18 = calculator.SB12Amount18;
            this.SB12Unit18 = calculator.SB12Unit18;
            this.SB15Amount18 = calculator.SB15Amount18;
            this.SB15Unit18 = calculator.SB15Unit18;
            this.SB13Amount18 = calculator.SB13Amount18;
            this.SB13Unit18 = calculator.SB13Unit18;
            this.SB14Amount18 = calculator.SB14Amount18;
            this.SB14Unit18 = calculator.SB14Unit18;

            this.SB1Description19 = calculator.SB1Description19;
            this.SB1URL19 = calculator.SB1URL19;
            this.SB1Name19 = calculator.SB1Name19;
            this.SB1Label19 = calculator.SB1Label19;
            this.SB1Type19 = calculator.SB1Type19;
            this.SB1RelLabel19 = calculator.SB1RelLabel19;
            this.SB1TAmount19 = calculator.SB1TAmount19;
            this.SB1TUnit19 = calculator.SB1TUnit19;
            this.SB1TD1Amount19 = calculator.SB1TD1Amount19;
            this.SB1TD1Unit19 = calculator.SB1TD1Unit19;
            this.SB1TD2Amount19 = calculator.SB1TD2Amount19;
            this.SB1TD2Unit19 = calculator.SB1TD2Unit19;
            this.SB1MathResult19 = calculator.SB1MathResult19;
            this.SB1MathSubType19 = calculator.SB1MathSubType19;

            this.SB1TMAmount19 = calculator.SB1TMAmount19;
            this.SB1TMUnit19 = calculator.SB1TMUnit19;
            this.SB1TLAmount19 = calculator.SB1TLAmount19;
            this.SB1TLUnit19 = calculator.SB1TLUnit19;
            this.SB1TUAmount19 = calculator.SB1TUAmount19;
            this.SB1TUUnit19 = calculator.SB1TUUnit19;
            this.SB1MathOperator19 = calculator.SB1MathOperator19;
            this.SB1MathExpression19 = calculator.SB1MathExpression19;
            this.SB1BaseIO19 = calculator.SB1BaseIO19;
            this.SB1Date19 = calculator.SB1Date19;
            this.SB1MathType19 = calculator.SB1MathType19;
            this.SB11Amount19 = calculator.SB11Amount19;
            this.SB11Unit19 = calculator.SB11Unit19;
            this.SB12Amount19 = calculator.SB12Amount19;
            this.SB12Unit19 = calculator.SB12Unit19;
            this.SB15Amount19 = calculator.SB15Amount19;
            this.SB15Unit19 = calculator.SB15Unit19;
            this.SB13Amount19 = calculator.SB13Amount19;
            this.SB13Unit19 = calculator.SB13Unit19;
            this.SB14Amount19 = calculator.SB14Amount19;
            this.SB14Unit19 = calculator.SB14Unit19;

            this.SB1Description20 = calculator.SB1Description20;
            this.SB1URL20 = calculator.SB1URL20;
            this.SB1Name20 = calculator.SB1Name20;
            this.SB1Label20 = calculator.SB1Label20;
            this.SB1Type20 = calculator.SB1Type20;
            this.SB1RelLabel20 = calculator.SB1RelLabel20;
            this.SB1TAmount20 = calculator.SB1TAmount20;
            this.SB1TUnit20 = calculator.SB1TUnit20;
            this.SB1TD1Amount20 = calculator.SB1TD1Amount20;
            this.SB1TD1Unit20 = calculator.SB1TD1Unit20;
            this.SB1TD2Amount20 = calculator.SB1TD2Amount20;
            this.SB1TD2Unit20 = calculator.SB1TD2Unit20;
            this.SB1MathResult20 = calculator.SB1MathResult20;
            this.SB1MathSubType20 = calculator.SB1MathSubType20;

            this.SB1TMAmount20 = calculator.SB1TMAmount20;
            this.SB1TMUnit20 = calculator.SB1TMUnit20;
            this.SB1TLAmount20 = calculator.SB1TLAmount20;
            this.SB1TLUnit20 = calculator.SB1TLUnit20;
            this.SB1TUAmount20 = calculator.SB1TUAmount20;
            this.SB1TUUnit20 = calculator.SB1TUUnit20;
            this.SB1MathOperator20 = calculator.SB1MathOperator20;
            this.SB1MathExpression20 = calculator.SB1MathExpression20;
            this.SB1BaseIO20 = calculator.SB1BaseIO20;
            this.SB1Date20 = calculator.SB1Date20;
            this.SB1MathType20 = calculator.SB1MathType20;
            this.SB11Amount20 = calculator.SB11Amount20;
            this.SB11Unit20 = calculator.SB11Unit20;
            this.SB12Amount20 = calculator.SB12Amount20;
            this.SB12Unit20 = calculator.SB12Unit20;
            this.SB15Amount20 = calculator.SB15Amount20;
            this.SB15Unit20 = calculator.SB15Unit20;
            this.SB13Amount20 = calculator.SB13Amount20;
            this.SB13Unit20 = calculator.SB13Unit20;
            this.SB14Amount20 = calculator.SB14Amount20;
            this.SB14Unit20 = calculator.SB14Unit20;
            //186 calc params are used in copies
            this.CalcParameters = calculator.CalcParameters;
        }
        public virtual void SetSB1BaseProperties(CalculatorParameters calcParameters,
            XElement calculator, XElement currentElement)
        {
            SetCalculatorProperties(calculator);
            SetSB1BaseProperties(calculator);
        }
        //set the class properties using the XElement
        public virtual void SetSB1BaseProperties(XElement calculator)
        {
            this.SB1Score = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1Score);
            this.SB1ScoreUnit = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreUnit);
            this.SB1ScoreD1Amount = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1ScoreD1Amount);
            this.SB1ScoreD1Unit = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreD1Unit);
            this.SB1ScoreD2Amount = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1ScoreD2Amount);
            this.SB1ScoreD2Unit = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreD2Unit);
            this.SB1ScoreMathExpression = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreMathExpression);
            this.SB1ScoreM = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1ScoreM);
            this.SB1ScoreMUnit = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreMUnit);
            this.SB1ScoreLAmount = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1ScoreLAmount);
            this.SB1ScoreLUnit = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreLUnit);
            this.SB1ScoreUAmount = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1ScoreUAmount);
            this.SB1ScoreUUnit = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreUUnit);
            this.SB1ScoreDistType = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreDistType);
            this.SB1ScoreMathType = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreMathType);
            this.SB1ScoreMathSubType = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreMathSubType);
            this.SB1ScoreMathResult = CalculatorHelpers.GetAttribute(calculator,
              cSB1ScoreMathResult);
            this.SB1JointDataURL = CalculatorHelpers.GetAttribute(calculator,
              cSB1JointDataURL);
            this.SB1Iterations = CalculatorHelpers.GetAttributeInt(calculator,
              cSB1Iterations);
            this.SB1CILevel = CalculatorHelpers.GetAttributeInt(calculator,
              cSB1CILevel);
            this.SB1Random = CalculatorHelpers.GetAttributeInt(calculator,
              cSB1Random);
            this.SB1BaseIO = CalculatorHelpers.GetAttribute(calculator,
              cSB1BaseIO);
            this.SB1Description1 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description1);
            this.SB1URL1 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL1);
            this.SB1Name1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name1);
            this.SB1Label1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label1);
            this.SB1Type1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type1);
            this.SB11Amount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount1);
            this.SB11Unit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit1);
            this.SB1RelLabel1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel1);
            this.SB1TAmount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount1);
            this.SB1TUnit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit1);
            this.SB1TD1Amount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD1Amount1);
            this.SB1TD1Unit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit1);
            this.SB1TD2Amount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount1);
            this.SB1TD2Unit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit1);
            this.SB1MathResult1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult1);
            this.SB1MathSubType1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType1);

            this.SB1TMAmount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TMAmount1);
            this.SB1TMUnit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit1);
            this.SB1TLAmount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TLAmount1);
            this.SB1TLUnit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit1);
            this.SB1TUAmount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount1);
            this.SB1TUUnit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit1);
            this.SB1MathOperator1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator1);
            this.SB1MathExpression1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression1);
            this.SB1BaseIO1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO1);
            this.SB1Date1 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date1);
            this.SB1MathType1 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType1);
            this.SB12Amount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount1);
            this.SB12Unit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit1);
            this.SB15Amount1 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount1);
            this.SB15Unit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit1);
            this.SB13Amount1 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount1);
            this.SB13Unit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit1);
            this.SB14Amount1 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount1);
            this.SB14Unit1 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit1);

            this.SB1Description2 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description2);
            this.SB1URL2 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL2);
            this.SB1Name2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name2);
            this.SB1Label2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label2);
            this.SB1Type2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type2);
            this.SB11Amount2 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount2);
            this.SB11Unit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit2);
            this.SB1RelLabel2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel2);
            this.SB1TAmount2 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount2);
            this.SB1TUnit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit2);
            this.SB1TD1Amount2 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount2);
            this.SB1TD1Unit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit2);
            this.SB1TD2Amount2 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount2);
            this.SB1TD2Unit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit2);
            this.SB1MathResult2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult2);
            this.SB1MathSubType2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType2);

            this.SB1TMAmount2 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount2);
            this.SB1TMUnit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit2);
            this.SB1TLAmount2 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount2);
            this.SB1TLUnit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit2);
            this.SB1TUAmount2 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount2);
            this.SB1TUUnit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit2);
            this.SB1MathOperator2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator2);
            this.SB1MathExpression2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression2);
            this.SB1BaseIO2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO2);
            this.SB1Date2 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date2);
            this.SB1MathType2 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType2);
            this.SB12Amount2 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount2);
            this.SB12Unit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit2);
            this.SB15Amount2 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount2);
            this.SB15Unit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit2);
            this.SB13Amount2 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount2);
            this.SB13Unit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit2);
            this.SB14Amount2 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount2);
            this.SB14Unit2 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit2);

            this.SB1Description3 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description3);
            this.SB1URL3 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL3);
            this.SB1Name3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name3);
            this.SB1Label3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label3);
            this.SB1Type3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type3);
            this.SB11Amount3 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount3);
            this.SB11Unit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit3);
            this.SB1RelLabel3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel3);
            this.SB1TAmount3 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount3);
            this.SB1TUnit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit3);
            this.SB1TD1Amount3 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount3);
            this.SB1TD1Unit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit3);
            this.SB1TD2Amount3 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount3);
            this.SB1TD2Unit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit3);
            this.SB1MathResult3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult3);
            this.SB1MathSubType3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType3);

            this.SB1TMAmount3 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount3);
            this.SB1TMUnit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit3);
            this.SB1TLAmount3 = CalculatorHelpers.GetAttributeDouble(calculator,
             cSB1TLAmount3);
            this.SB1TLUnit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit3);
            this.SB1TUAmount3 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount3);
            this.SB1TUUnit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit3);
            this.SB1MathOperator3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator3);
            this.SB1MathExpression3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression3);
            this.SB1BaseIO3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO3);
            this.SB1Date3 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date3);
            this.SB1MathType3 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType3);
            this.SB12Amount3 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount3);
            this.SB12Unit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit3);
            this.SB15Amount3 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount3);
            this.SB15Unit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit3);
            this.SB13Amount3 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB13Amount3);
            this.SB13Unit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit3);
            this.SB14Amount3 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount3);
            this.SB14Unit3 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit3);

            this.SB1Description4 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description4);
            this.SB1URL4 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL4);
            this.SB1Name4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name4);
            this.SB1Label4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label4);
            this.SB1Type4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type4);
            this.SB11Amount4 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount4);
            this.SB11Unit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit4);
            this.SB1RelLabel4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel4);
            this.SB1TAmount4 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount4);
            this.SB1TUnit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit4);
            this.SB1TD1Amount4 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount4);
            this.SB1TD1Unit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit4);
            this.SB1TD2Amount4 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount4);
            this.SB1TD2Unit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit4);
            this.SB1MathResult4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult4);
            this.SB1MathSubType4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType4);

            this.SB1TMAmount4 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount4);
            this.SB1TMUnit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit4);
            this.SB1TLAmount4 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount4);
            this.SB1TLUnit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit4);
            this.SB1TUAmount4 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount4);
            this.SB1TUUnit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit4);
            this.SB1MathOperator4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator4);
            this.SB1MathExpression4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression4);
            this.SB1BaseIO4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO4);
            this.SB1Date4 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date4);
            this.SB1MathType4 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType4);
            this.SB12Amount4 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount4);
            this.SB12Unit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit4);
            this.SB15Amount4 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount4);
            this.SB15Unit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit4);
            this.SB13Amount4 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount4);
            this.SB13Unit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit4);
            this.SB14Amount4 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount4);
            this.SB14Unit4 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit4);

            this.SB1Description5 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description5);
            this.SB1URL5 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL5);
            this.SB1Name5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name5);
            this.SB1Label5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label5);
            this.SB1Type5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type5);
            this.SB11Amount5 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount5);
            this.SB11Unit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit5);
            this.SB1RelLabel5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel5);
            this.SB1TAmount5 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount5);
            this.SB1TUnit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit5);
            this.SB1TD1Amount5 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount5);
            this.SB1TD1Unit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit5);
            this.SB1TD2Amount5 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount5);
            this.SB1TD2Unit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit5);
            this.SB1MathResult5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult5);
            this.SB1MathSubType5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType5);

            this.SB1TMAmount5 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount5);
            this.SB1TMUnit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit5);
            this.SB1TLAmount5 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount5);
            this.SB1TLUnit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit5);
            this.SB1TUAmount5 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount5);
            this.SB1TUUnit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit5);
            this.SB1MathOperator5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator5);
            this.SB1MathExpression5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression5);
            this.SB1BaseIO5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO5);
            this.SB1Date5 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date5);
            this.SB1MathType5 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType5);
            this.SB12Amount5 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount5);
            this.SB12Unit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit5);
            this.SB15Amount5 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount5);
            this.SB15Unit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit5);
            this.SB13Amount5 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount5);
            this.SB13Unit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit5);
            this.SB14Amount5 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount5);
            this.SB14Unit5 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit5);

            this.SB1Description6 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description6);
            this.SB1URL6 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL6);
            this.SB1Name6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name6);
            this.SB1Label6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label6);
            this.SB1Type6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type6);
            this.SB11Amount6 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount6);
            this.SB11Unit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit6);
            this.SB1RelLabel6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel6);
            this.SB1TAmount6 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount6);
            this.SB1TUnit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit6);
            this.SB1TD1Amount6 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount6);
            this.SB1TD1Unit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit6);
            this.SB1TD2Amount6 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount6);
            this.SB1TD2Unit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit6);
            this.SB1MathResult6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult6);
            this.SB1MathSubType6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType6);

            this.SB1TMAmount6 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount6);
            this.SB1TMUnit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit6);
            this.SB1TLAmount6 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount6);
            this.SB1TLUnit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit6);
            this.SB1TUAmount6 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount6);
            this.SB1TUUnit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit6);
            this.SB1MathOperator6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator6);
            this.SB1MathExpression6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression6);
            this.SB1BaseIO6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO6);
            this.SB1Date6 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date6);
            this.SB1MathType6 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType6);
            this.SB12Amount6 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount6);
            this.SB12Unit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit6);
            this.SB15Amount6 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount6);
            this.SB15Unit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit6);
            this.SB13Amount6 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount6);
            this.SB13Unit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit6);
            this.SB14Amount6 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount6);
            this.SB14Unit6 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit6);

            this.SB1Description7 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description7);
            this.SB1URL7 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL7);
            this.SB1Name7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name7);
            this.SB1Label7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label7);
            this.SB1Type7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type7);
            this.SB11Amount7 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount7);
            this.SB11Unit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit7);
            this.SB1RelLabel7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel7);
            this.SB1TAmount7 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount7);
            this.SB1TUnit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit7);
            this.SB1TD1Amount7 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount7);
            this.SB1TD1Unit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit7);
            this.SB1TD2Amount7 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount7);
            this.SB1TD2Unit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit7);
            this.SB1MathResult7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult7);
            this.SB1MathSubType7 = CalculatorHelpers.GetAttribute(calculator,
              cSB1MathSubType7);

            this.SB1TMAmount7 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount7);
            this.SB1TMUnit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit7);
            this.SB1TLAmount7 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount7);
            this.SB1TLUnit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit7);
            this.SB1TUAmount7 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount7);
            this.SB1TUUnit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit7);
            this.SB1MathOperator7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator7);
            this.SB1MathExpression7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression7);
            this.SB1BaseIO7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO7);
            this.SB1Date7 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date7);
            this.SB1MathType7 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType7);
            this.SB12Amount7 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount7);
            this.SB12Unit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit7);
            this.SB15Amount7 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount7);
            this.SB15Unit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit7);
            this.SB13Amount7 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount7);
            this.SB13Unit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit7);
            this.SB14Amount7 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount7);
            this.SB14Unit7 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit7);

            this.SB1Description8 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description8);
            this.SB1URL8 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL8);
            this.SB1Name8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name8);
            this.SB1Label8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label8);
            this.SB1Type8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type8);
            this.SB11Amount8 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount8);
            this.SB11Unit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit8);
            this.SB1RelLabel8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel8);
            this.SB1TAmount8 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount8);
            this.SB1TUnit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit8);
            this.SB1TD1Amount8 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount8);
            this.SB1TD1Unit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit8);
            this.SB1TD2Amount8 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount8);
            this.SB1TD2Unit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit8);
            this.SB1MathResult8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult8);
            this.SB1MathSubType8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType8);

            this.SB1TMAmount8 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount8);
            this.SB1TMUnit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit8);
            this.SB1TLAmount8 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount8);
            this.SB1TLUnit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit8);
            this.SB1TUAmount8 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount8);
            this.SB1TUUnit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit8);
            this.SB1MathOperator8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator8);
            this.SB1MathExpression8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression8);
            this.SB1BaseIO8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO8);
            this.SB1Date8 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date8);
            this.SB1MathType8 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType8);
            this.SB12Amount8 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount8);
            this.SB12Unit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit8);
            this.SB15Amount8 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount8);
            this.SB15Unit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit8);
            this.SB13Amount8 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount8);
            this.SB13Unit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit8);
            this.SB14Amount8 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount8);
            this.SB14Unit8 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit8);

            this.SB1Description9 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description9);
            this.SB1URL9 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL9);
            this.SB1Name9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name9);
            this.SB1Label9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label9);
            this.SB1Type9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type9);
            this.SB11Amount9 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount9);
            this.SB11Unit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit9);
            this.SB1RelLabel9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel9);
            this.SB1TAmount9 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount9);
            this.SB1TUnit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit9);
            this.SB1TD1Amount9 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount9);
            this.SB1TD1Unit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit9);
            this.SB1TD2Amount9 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount9);
            this.SB1TD2Unit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit9);
            this.SB1MathResult9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult9);
            this.SB1MathSubType9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType9);

            this.SB1TMAmount9 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount9);
            this.SB1TMUnit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit9);
            this.SB1TLAmount9 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount9);
            this.SB1TLUnit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit9);
            this.SB1TUAmount9 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount9);
            this.SB1TUUnit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit9);
            this.SB1MathOperator9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator9);
            this.SB1MathExpression9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression9);
            this.SB1BaseIO9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO9);
            this.SB1Date9 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date9);
            this.SB1MathType9 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType9);
            this.SB12Amount9 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount9);
            this.SB12Unit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit9);
            this.SB15Amount9 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount9);
            this.SB15Unit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit9);
            this.SB13Amount9 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount9);
            this.SB13Unit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit9);
            this.SB14Amount9 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount9);
            this.SB14Unit9 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit9);

            this.SB1Description10 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description10);
            this.SB1URL10 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL10);
            this.SB1Name10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name10);
            this.SB1Label10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label10);
            this.SB1Type10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type10);
            this.SB11Amount10 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount10);
            this.SB11Unit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit10);
            this.SB1RelLabel10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel10);
            this.SB1TAmount10 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount10);
            this.SB1TUnit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit10);
            this.SB1TD1Amount10 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount10);
            this.SB1TD1Unit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit10);
            this.SB1TD2Amount10 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount10);
            this.SB1TD2Unit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit10);
            this.SB1MathResult10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult10);
            this.SB1MathSubType10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType10);

            this.SB1TMAmount10 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount10);
            this.SB1TMUnit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit10);
            this.SB1TLAmount10 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount10);
            this.SB1TLUnit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit10);
            this.SB1TUAmount10 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount10);
            this.SB1TUUnit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit10);
            this.SB1MathOperator10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator10);
            this.SB1MathExpression10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression10);
            this.SB1BaseIO10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO10);
            this.SB1Date10 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date10);
            this.SB1MathType10 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType10);
            this.SB12Amount10 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount10);
            this.SB12Unit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit10);
            this.SB15Amount10 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount10);
            this.SB15Unit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit10);
            this.SB13Amount10 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount10);
            this.SB13Unit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit10);
            this.SB14Amount10 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount10);
            this.SB14Unit10 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit10);

            this.SB1Description11 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description11);
            this.SB1URL11 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL11);
            this.SB1Name11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name11);
            this.SB1Label11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label11);
            this.SB1Type11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type11);
            this.SB11Amount11 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount11);
            this.SB11Unit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit11);
            this.SB1RelLabel11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel11);
            this.SB1TAmount11 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount11);
            this.SB1TUnit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit11);
            this.SB1TD1Amount11 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount11);
            this.SB1TD1Unit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit11);
            this.SB1TD2Amount11 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount11);
            this.SB1TD2Unit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit11);
            this.SB1MathResult11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult11);
            this.SB1MathSubType11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType11);

            this.SB1TMAmount11 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount11);
            this.SB1TMUnit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit11);
            this.SB1TLAmount11 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount11);
            this.SB1TLUnit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit11);
            this.SB1TUAmount11 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount11);
            this.SB1TUUnit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit11);
            this.SB1MathOperator11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator11);
            this.SB1MathExpression11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression11);
            this.SB1BaseIO11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO11);
            this.SB1Date11 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date11);
            this.SB1MathType11 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType11);
            this.SB12Amount11 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount11);
            this.SB12Unit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit11);
            this.SB15Amount11 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount11);
            this.SB15Unit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit11);
            this.SB13Amount11 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount11);
            this.SB13Unit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit11);
            this.SB14Amount11 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount11);
            this.SB14Unit11 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit11);

            this.SB1Description12 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description12);
            this.SB1URL12 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL12);
            this.SB1Name12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name12);
            this.SB1Label12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label12);
            this.SB1Type12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type12);
            this.SB11Amount12 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount12);
            this.SB11Unit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit12);
            this.SB1RelLabel12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel12);
            this.SB1TAmount12 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount12);
            this.SB1TUnit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit12);
            this.SB1TD1Amount12 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount12);
            this.SB1TD1Unit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit12);
            this.SB1TD2Amount12 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount12);
            this.SB1TD2Unit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit12);
            this.SB1MathResult12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult12);
            this.SB1MathSubType12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType12);

            this.SB1TMAmount12 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount12);
            this.SB1TMUnit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit12);
            this.SB1TLAmount12 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount12);
            this.SB1TLUnit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit12);
            this.SB1TUAmount12 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount12);
            this.SB1TUUnit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit12);
            this.SB1MathOperator12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator12);
            this.SB1MathExpression12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression12);
            this.SB1BaseIO12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO12);
            this.SB1Date12 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date12);
            this.SB1MathType12 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType12);
            this.SB12Amount12 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount12);
            this.SB12Unit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit12);
            this.SB15Amount12 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount12);
            this.SB15Unit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit12);
            this.SB13Amount12 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount12);
            this.SB13Unit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit12);
            this.SB14Amount12 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount12);
            this.SB14Unit12 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit12);

            this.SB1Description13 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description13);
            this.SB1URL13 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL13);
            this.SB1Name13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name13);
            this.SB1Label13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label13);
            this.SB1Type13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type13);
            this.SB11Amount13 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount13);
            this.SB11Unit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit13);
            this.SB1RelLabel13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel13);
            this.SB1TAmount13 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount13);
            this.SB1TUnit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit13);
            this.SB1TD1Amount13 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount13);
            this.SB1TD1Unit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit13);
            this.SB1TD2Amount13 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount13);
            this.SB1TD2Unit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit13);
            this.SB1MathResult13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult13);
            this.SB1MathSubType13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType13);

            this.SB1TMAmount13 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount13);
            this.SB1TMUnit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit13);
            this.SB1TLAmount13 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount13);
            this.SB1TLUnit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit13);
            this.SB1TUAmount13 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount13);
            this.SB1TUUnit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit13);
            this.SB1MathOperator13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator13);
            this.SB1MathExpression13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression13);
            this.SB1BaseIO13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO13);
            this.SB1Date13 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date13);
            this.SB1MathType13 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType13);
            this.SB12Amount13 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount13);
            this.SB12Unit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit13);
            this.SB15Amount13 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount13);
            this.SB15Unit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit13);
            this.SB13Amount13 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount13);
            this.SB13Unit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit13);
            this.SB14Amount13 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount13);
            this.SB14Unit13 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit13);

            this.SB1Description14 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description14);
            this.SB1URL14 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL14);
            this.SB1Name14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name14);
            this.SB1Label14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label14);
            this.SB1Type14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type14);
            this.SB11Amount14 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount14);
            this.SB11Unit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit14);
            this.SB1RelLabel14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel14);
            this.SB1TAmount14 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount14);
            this.SB1TUnit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit14);
            this.SB1TD1Amount14 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount14);
            this.SB1TD1Unit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit14);
            this.SB1TD2Amount14 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount14);
            this.SB1TD2Unit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit14);
            this.SB1MathResult14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult14);
            this.SB1MathSubType14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType14);

            this.SB1TMAmount14 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount14);
            this.SB1TMUnit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit14);
            this.SB1TLAmount14 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount14);
            this.SB1TLUnit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit14);
            this.SB1TUAmount14 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount14);
            this.SB1TUUnit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit14);
            this.SB1MathOperator14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator14);
            this.SB1MathExpression14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression14);
            this.SB1BaseIO14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO14);
            this.SB1Date14 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date14);
            this.SB1MathType14 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType14);
            this.SB12Amount14 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount14);
            this.SB12Unit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit14);
            this.SB15Amount14 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount14);
            this.SB15Unit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit14);
            this.SB13Amount14 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount14);
            this.SB13Unit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit14);
            this.SB14Amount14 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount14);
            this.SB14Unit14 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit14);

            this.SB1Description15 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description15);
            this.SB1URL15 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL15);
            this.SB1Name15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name15);
            this.SB1Label15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label15);
            this.SB1Type15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type15);
            this.SB11Amount15 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount15);
            this.SB11Unit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit15);
            this.SB1RelLabel15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel15);
            this.SB1TAmount15 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount15);
            this.SB1TUnit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit15);
            this.SB1TD1Amount15 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount15);
            this.SB1TD1Unit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit15);
            this.SB1TD2Amount15 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount15);
            this.SB1TD2Unit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit15);
            this.SB1MathResult15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult15);
            this.SB1MathSubType15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType15);

            this.SB1TMAmount15 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount15);
            this.SB1TMUnit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit15);
            this.SB1TLAmount15 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount15);
            this.SB1TLUnit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit15);
            this.SB1TUAmount15 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount15);
            this.SB1TUUnit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit15);
            this.SB1MathOperator15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator15);
            this.SB1MathExpression15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression15);
            this.SB1BaseIO15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO15);
            this.SB1Date15 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date15);
            this.SB1MathType15 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType15);
            this.SB12Amount15 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount15);
            this.SB12Unit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit15);
            this.SB15Amount15 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount15);
            this.SB15Unit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit15);
            this.SB13Amount15 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount15);
            this.SB13Unit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit15);
            this.SB14Amount15 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount15);
            this.SB14Unit15 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit15);

            this.SB1Description16 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description16);
            this.SB1URL16 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL16);
            this.SB1Name16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name16);
            this.SB1Label16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label16);
            this.SB1Type16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type16);
            this.SB11Amount16 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount16);
            this.SB11Unit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit16);
            this.SB1RelLabel16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel16);
            this.SB1TAmount16 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount16);
            this.SB1TUnit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit16);
            this.SB1TD1Amount16 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount16);
            this.SB1TD1Unit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit16);
            this.SB1TD2Amount16 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount16);
            this.SB1TD2Unit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit16);
            this.SB1MathResult16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult16);
            this.SB1MathSubType16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType16);

            this.SB1TMAmount16 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount16);
            this.SB1TMUnit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit16);
            this.SB1TLAmount16 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount16);
            this.SB1TLUnit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit16);
            this.SB1TUAmount16 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount16);
            this.SB1TUUnit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit16);
            this.SB1MathOperator16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator16);
            this.SB1MathExpression16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression16);
            this.SB1BaseIO16 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO16);
            this.SB1Date16 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date16);
            this.SB1MathType17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType17);
            this.SB12Amount16 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount16);
            this.SB12Unit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit16);
            this.SB15Amount16 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount16);
            this.SB15Unit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit16);
            this.SB13Amount16 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount16);
            this.SB13Unit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit16);
            this.SB14Amount16 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount16);
            this.SB14Unit16 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit16);

            this.SB1Description17 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description17);
            this.SB1URL17 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL17);
            this.SB1Name17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name17);
            this.SB1Label17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label17);
            this.SB1Type17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type17);
            this.SB11Amount17 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount17);
            this.SB11Unit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit17);
            this.SB1RelLabel17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel17);
            this.SB1TAmount17 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount17);
            this.SB1TUnit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit17);
            this.SB1TD1Amount17 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount17);
            this.SB1TD1Unit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit17);
            this.SB1TD2Amount17 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount17);
            this.SB1TD2Unit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit17);
            this.SB1MathResult17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult17);
            this.SB1MathSubType17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType17);

            this.SB1TMAmount17 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount17);
            this.SB1TMUnit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit17);
            this.SB1TLAmount17 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount17);
            this.SB1TLUnit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit17);
            this.SB1TUAmount17 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount17);
            this.SB1TUUnit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit17);
            this.SB1MathOperator17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator17);
            this.SB1MathExpression17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression17);
            this.SB1BaseIO17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO17);
            this.SB1Date17 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date17);
            this.SB1MathType17 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType17);
            this.SB12Amount17 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount17);
            this.SB12Unit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit17);
            this.SB15Amount17 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount17);
            this.SB15Unit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit17);
            this.SB13Amount17 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount17);
            this.SB13Unit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit17);
            this.SB14Amount17 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount17);
            this.SB14Unit17 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit17);

            this.SB1Description18 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description18);
            this.SB1URL18 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL18);
            this.SB1Name18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name18);
            this.SB1Label18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label18);
            this.SB1Type18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type18);
            this.SB11Amount18 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount18);
            this.SB11Unit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit18);
            this.SB1RelLabel18 = CalculatorHelpers.GetAttribute(calculator,
                cSB1RelLabel18);
            this.SB1TAmount18 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount18);
            this.SB1TUnit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit18);
            this.SB1TD1Amount18 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount18);
            this.SB1TD1Unit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit18);
            this.SB1TD2Amount18 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount18);
            this.SB1TD2Unit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit18);
            this.SB1MathResult18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult18);
            this.SB1MathSubType18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType18);

            this.SB1TMAmount18 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount18);
            this.SB1TMUnit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit18);
            this.SB1TLAmount18 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount18);
            this.SB1TLUnit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit18);
            this.SB1TUAmount18 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount18);
            this.SB1TUUnit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit18);
            this.SB1MathOperator18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator18);
            this.SB1MathExpression18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression18);
            this.SB1BaseIO18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO18);
            this.SB1Date18 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date18);
            this.SB1MathType18 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType18);
            this.SB12Amount18 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount18);
            this.SB12Unit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit18);
            this.SB15Amount18 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount18);
            this.SB15Unit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit18);
            this.SB13Amount18 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount18);
            this.SB13Unit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit18);
            this.SB14Amount18 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount18);
            this.SB14Unit18 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit18);

            this.SB1Description19 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description19);
            this.SB1URL19 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL19);
            this.SB1Name19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name19);
            this.SB1Label19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label19);
            this.SB1Type19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type19);
            this.SB11Amount19 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount19);
            this.SB11Unit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit19);
            this.SB1RelLabel19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel19);
            this.SB1TAmount19 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount19);
            this.SB1TUnit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit19);
            this.SB1TD1Amount19 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount19);
            this.SB1TD1Unit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit19);
            this.SB1TD2Amount19 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount19);
            this.SB1TD2Unit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit19);
            this.SB1MathResult19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult19);
            this.SB1MathSubType19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType19);

            this.SB1TMAmount19 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount19);
            this.SB1TMUnit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit19);
            this.SB1TLAmount19 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TLAmount19);
            this.SB1TLUnit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit19);
            this.SB1TUAmount19 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount19);
            this.SB1TUUnit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit19);
            this.SB1MathOperator19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator19);
            this.SB1MathExpression19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression19);
            this.SB1BaseIO19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO19);
            this.SB1Date19 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date19);
            this.SB1MathType19 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType19);
            this.SB12Amount19 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount19);
            this.SB12Unit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit19);
            this.SB15Amount19 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount19);
            this.SB15Unit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit19);
            this.SB13Amount19 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount19);
            this.SB13Unit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit19);
            this.SB14Amount19 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount19);
            this.SB14Unit19 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit19);

            this.SB1Description20 = CalculatorHelpers.GetAttribute(calculator,
              cSB1Description20);
            this.SB1URL20 = CalculatorHelpers.GetAttribute(calculator,
                cSB1URL20);
            this.SB1Name20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Name20);
            this.SB1Label20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Label20);
            this.SB1Type20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1Type20);
            this.SB11Amount20 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB11Amount20);
            this.SB11Unit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB11Unit20);
            this.SB1RelLabel20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1RelLabel20);
            this.SB1TAmount20 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TAmount20);
            this.SB1TUnit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUnit20);
            this.SB1TD1Amount20 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TD1Amount20);
            this.SB1TD1Unit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD1Unit20);
            this.SB1TD2Amount20 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TD2Amount20);
            this.SB1TD2Unit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TD2Unit20);
            this.SB1MathResult20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathResult20);
            this.SB1MathSubType20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathSubType20);

            this.SB1TMAmount20 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB1TMAmount20);
            this.SB1TMUnit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TMUnit20);
            this.SB1TLAmount20 = CalculatorHelpers.GetAttributeDouble(calculator,
             cSB1TLAmount20);
            this.SB1TLUnit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TLUnit20);
            this.SB1TUAmount20 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB1TUAmount20);
            this.SB1TUUnit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1TUUnit20);
            this.SB1MathOperator20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathOperator20);
            this.SB1MathExpression20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathExpression20);
            this.SB1BaseIO20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1BaseIO20);
            this.SB1Date20 = CalculatorHelpers.GetAttributeDate(calculator,
               cSB1Date20);
            this.SB1MathType20 = CalculatorHelpers.GetAttribute(calculator,
               cSB1MathType20);
            this.SB12Amount20 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB12Amount20);
            this.SB12Unit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB12Unit20);
            this.SB15Amount20 = CalculatorHelpers.GetAttributeDouble(calculator,
               cSB15Amount20);
            this.SB15Unit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB15Unit20);
            this.SB13Amount20 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB13Amount20);
            this.SB13Unit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB13Unit20);
            this.SB14Amount20 = CalculatorHelpers.GetAttributeDouble(calculator,
              cSB14Amount20);
            this.SB14Unit20 = CalculatorHelpers.GetAttribute(calculator,
               cSB14Unit20);
        }
        //attname and attvalue generally passed in from a reader
        public virtual void SetSB1BaseProperty(string attName,
            string attValue)
        {
            switch (attName)
            {
                case cSB1Score:
                    this.SB1Score = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1ScoreUnit:
                    this.SB1ScoreUnit = attValue;
                    break;
                case cSB1ScoreD1Amount:
                    this.SB1ScoreD1Amount = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1ScoreD1Unit:
                    this.SB1ScoreD1Unit = attValue;
                    break;
                case cSB1ScoreD2Amount:
                    this.SB1ScoreD2Amount = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1ScoreD2Unit:
                    this.SB1ScoreD2Unit = attValue;
                    break;
                case cSB1ScoreMathExpression:
                    this.SB1ScoreMathExpression = attValue;
                    break;
                case cSB1ScoreM:
                    this.SB1ScoreM = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1ScoreMUnit:
                    this.SB1ScoreMUnit = attValue;
                    break;
                case cSB1ScoreLAmount:
                    this.SB1ScoreLAmount = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1ScoreLUnit:
                    this.SB1ScoreLUnit = attValue;
                    break;
                case cSB1ScoreUAmount:
                    this.SB1ScoreUAmount = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1ScoreUUnit:
                    this.SB1ScoreUUnit = attValue;
                    break;
                case cSB1ScoreDistType:
                    this.SB1ScoreDistType = attValue;
                    break;
                case cSB1ScoreMathType:
                    this.SB1ScoreMathType = attValue;
                    break;
                case cSB1ScoreMathSubType:
                    this.SB1ScoreMathSubType = attValue;
                    break;
                case cSB1ScoreMathResult:
                    this.SB1ScoreMathResult = attValue;
                    break;
                case cSB1JointDataURL:
                    this.SB1JointDataURL = attValue;
                    break;
                case cSB1Iterations:
                    this.SB1Iterations = CalculatorHelpers.ConvertStringToInt(attValue);
                    break;
                case cSB1CILevel:
                    this.SB1CILevel = CalculatorHelpers.ConvertStringToInt(attValue);
                    break;
                case cSB1Random:
                    this.SB1Random = CalculatorHelpers.ConvertStringToInt(attValue);
                    break;
                case cSB1BaseIO:
                    this.SB1BaseIO = attValue;
                    break;
                case cSB1Description1:
                    this.SB1Description1 = attValue;
                    break;
                case cSB1URL1:
                    this.SB1URL1 = attValue;
                    break;
                case cSB1Name1:
                    this.SB1Name1 = attValue;
                    break;
                case cSB1Label1:
                    this.SB1Label1 = attValue;
                    break;
                case cSB1Type1:
                    this.SB1Type1 = attValue;
                    break;
                case cSB1RelLabel1:
                    this.SB1RelLabel1 = attValue;
                    break;
                case cSB1TAmount1:
                    this.SB1TAmount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit1:
                    this.SB1TUnit1 = attValue;
                    break;
                case cSB1TD1Amount1:
                    this.SB1TD1Amount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit1:
                    this.SB1TD1Unit1 = attValue;
                    break;
                case cSB1TD2Amount1:
                    this.SB1TD2Amount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit1:
                    this.SB1TD2Unit1 = attValue;
                    break;
                case cSB1MathResult1:
                    this.SB1MathResult1 = attValue;
                    break;
                case cSB1MathSubType1:
                    this.SB1MathSubType1 = attValue;
                    break;
                case cSB1TMAmount1:
                    this.SB1TMAmount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit1:
                    this.SB1TMUnit1 = attValue;
                    break;
                case cSB1TLAmount1:
                    this.SB1TLAmount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit1:
                    this.SB1TLUnit1 = attValue;
                    break;
                case cSB1TUAmount1:
                    this.SB1TUAmount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit1:
                    this.SB1TUUnit1 = attValue;
                    break;
                case cSB1MathOperator1:
                    this.SB1MathOperator1 = attValue;
                    break;
                case cSB1MathExpression1:
                    this.SB1MathExpression1 = attValue;
                    break;
                case cSB1BaseIO1:
                    this.SB1BaseIO1 = attValue;
                    break;
                case cSB1Date1:
                    this.SB1Date1 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType1:
                    this.SB1MathType1 = attValue;
                    break;
                case cSB11Amount1:
                    this.SB11Amount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit1:
                    this.SB11Unit1 = attValue;
                    break;
                case cSB12Amount1:
                    this.SB12Amount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit1:
                    this.SB12Unit1 = attValue;
                    break;
                case cSB15Amount1:
                    this.SB15Amount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit1:
                    this.SB15Unit1 = attValue;
                    break;
                case cSB13Amount1:
                    this.SB13Amount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit1:
                    this.SB13Unit1 = attValue;
                    break;
                case cSB14Amount1:
                    this.SB14Amount1 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit1:
                    this.SB14Unit1 = attValue;
                    break;
                case cSB1Description2:
                    this.SB1Description2 = attValue;
                    break;
                case cSB1URL2:
                    this.SB1URL2 = attValue;
                    break;
                case cSB1Name2:
                    this.SB1Name2 = attValue;
                    break;
                case cSB1Label2:
                    this.SB1Label2 = attValue;
                    break;
                case cSB1Type2:
                    this.SB1Type2 = attValue;
                    break;
                case cSB1RelLabel2:
                    this.SB1RelLabel2 = attValue;
                    break;
                case cSB1TAmount2:
                    this.SB1TAmount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit2:
                    this.SB1TUnit2 = attValue;
                    break;
                case cSB1TD1Amount2:
                    this.SB1TD1Amount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit2:
                    this.SB1TD1Unit2 = attValue;
                    break;
                case cSB1TD2Amount2:
                    this.SB1TD2Amount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit2:
                    this.SB1TD2Unit2 = attValue;
                    break;
                case cSB1MathResult2:
                    this.SB1MathResult2 = attValue;
                    break;
                case cSB1MathSubType2:
                    this.SB1MathSubType2 = attValue;
                    break;
                case cSB1TMAmount2:
                    this.SB1TMAmount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit2:
                    this.SB1TMUnit2 = attValue;
                    break;
                case cSB1TLAmount2:
                    this.SB1TLAmount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit2:
                    this.SB1TLUnit2 = attValue;
                    break;
                case cSB1TUAmount2:
                    this.SB1TUAmount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit2:
                    this.SB1TUUnit2 = attValue;
                    break;
                case cSB1MathOperator2:
                    this.SB1MathOperator2 = attValue;
                    break;
                case cSB1MathExpression2:
                    this.SB1MathExpression2 = attValue;
                    break;
                case cSB1BaseIO2:
                    this.SB1BaseIO2 = attValue;
                    break;
                case cSB1Date2:
                    this.SB1Date2 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType2:
                    this.SB1MathType2 = attValue;
                    break;
                case cSB11Amount2:
                    this.SB11Amount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit2:
                    this.SB11Unit2 = attValue;
                    break;
                case cSB12Amount2:
                    this.SB12Amount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit2:
                    this.SB12Unit2 = attValue;
                    break;
                case cSB15Amount2:
                    this.SB15Amount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit2:
                    this.SB15Unit2 = attValue;
                    break;
                case cSB13Amount2:
                    this.SB13Amount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit2:
                    this.SB13Unit2 = attValue;
                    break;
                case cSB14Amount2:
                    this.SB14Amount2 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit2:
                    this.SB14Unit2 = attValue;
                    break;
                case cSB1Description3:
                    this.SB1Description3 = attValue;
                    break;
                case cSB1URL3:
                    this.SB1URL3 = attValue;
                    break;
                case cSB1Name3:
                    this.SB1Name3 = attValue;
                    break;
                case cSB1Label3:
                    this.SB1Label3 = attValue;
                    break;
                case cSB1Type3:
                    this.SB1Type3 = attValue;
                    break;
                case cSB1RelLabel3:
                    this.SB1RelLabel3 = attValue;
                    break;
                case cSB1TAmount3:
                    this.SB1TAmount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit3:
                    this.SB1TUnit3 = attValue;
                    break;
                case cSB1TD1Amount3:
                    this.SB1TD1Amount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit3:
                    this.SB1TD1Unit3 = attValue;
                    break;
                case cSB1TD2Amount3:
                    this.SB1TD2Amount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit3:
                    this.SB1TD2Unit3 = attValue;
                    break;
                case cSB1MathResult3:
                    this.SB1MathResult3 = attValue;
                    break;
                case cSB1MathSubType3:
                    this.SB1MathResult3 = attValue;
                    break;
                case cSB1TMAmount3:
                    this.SB1TMAmount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit3:
                    this.SB1TMUnit3 = attValue;
                    break;
                case cSB1TLAmount3:
                    this.SB1TLAmount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit3:
                    this.SB1TLUnit3 = attValue;
                    break;
                case cSB1TUAmount3:
                    this.SB1TUAmount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit3:
                    this.SB1TUUnit3 = attValue;
                    break;
                case cSB1MathOperator3:
                    this.SB1MathOperator3 = attValue;
                    break;
                case cSB1MathExpression3:
                    this.SB1MathExpression3 = attValue;
                    break;
                case cSB1BaseIO3:
                    this.SB1BaseIO3 = attValue;
                    break;
                case cSB1Date3:
                    this.SB1Date3 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType3:
                    this.SB1MathType3 = attValue;
                    break;
                case cSB11Amount3:
                    this.SB11Amount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit3:
                    this.SB11Unit3 = attValue;
                    break;
                case cSB12Amount3:
                    this.SB12Amount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit3:
                    this.SB12Unit3 = attValue;
                    break;
                case cSB15Amount3:
                    this.SB15Amount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit3:
                    this.SB15Unit3 = attValue;
                    break;
                case cSB13Amount3:
                    this.SB13Amount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit3:
                    this.SB13Unit3 = attValue;
                    break;
                case cSB14Amount3:
                    this.SB14Amount3 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit3:
                    this.SB14Unit3 = attValue;
                    break;
                case cSB1Description4:
                    this.SB1Description4 = attValue;
                    break;
                case cSB1URL4:
                    this.SB1URL4 = attValue;
                    break;
                case cSB1Name4:
                    this.SB1Name4 = attValue;
                    break;
                case cSB1Label4:
                    this.SB1Label4 = attValue;
                    break;
                case cSB1Type4:
                    this.SB1Type4 = attValue;
                    break;
                case cSB1RelLabel4:
                    this.SB1RelLabel4 = attValue;
                    break;
                case cSB1TAmount4:
                    this.SB1TAmount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit4:
                    this.SB1TUnit4 = attValue;
                    break;
                case cSB1TD1Amount4:
                    this.SB1TD1Amount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit4:
                    this.SB1TD1Unit4 = attValue;
                    break;
                case cSB1TD2Amount4:
                    this.SB1TD2Amount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit4:
                    this.SB1TD2Unit4 = attValue;
                    break;
                case cSB1MathResult4:
                    this.SB1MathResult4 = attValue;
                    break;
                case cSB1MathSubType4:
                    this.SB1MathResult4 = attValue;
                    break;
                case cSB1TMAmount4:
                    this.SB1TMAmount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit4:
                    this.SB1TMUnit4 = attValue;
                    break;
                case cSB1TLAmount4:
                    this.SB1TLAmount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit4:
                    this.SB1TLUnit4 = attValue;
                    break;
                case cSB1TUAmount4:
                    this.SB1TUAmount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit4:
                    this.SB1TUUnit4 = attValue;
                    break;
                case cSB1MathOperator4:
                    this.SB1MathOperator4 = attValue;
                    break;
                case cSB1MathExpression4:
                    this.SB1MathExpression4 = attValue;
                    break;
                case cSB1BaseIO4:
                    this.SB1BaseIO4 = attValue;
                    break;
                case cSB1Date4:
                    this.SB1Date4 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType4:
                    this.SB1MathType4 = attValue;
                    break;
                case cSB11Amount4:
                    this.SB11Amount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit4:
                    this.SB11Unit4 = attValue;
                    break;
                case cSB12Amount4:
                    this.SB12Amount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit4:
                    this.SB12Unit4 = attValue;
                    break;
                case cSB15Amount4:
                    this.SB15Amount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit4:
                    this.SB15Unit4 = attValue;
                    break;
                case cSB13Amount4:
                    this.SB13Amount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit4:
                    this.SB13Unit4 = attValue;
                    break;
                case cSB14Amount4:
                    this.SB14Amount4 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit4:
                    this.SB14Unit4 = attValue;
                    break;
                case cSB1Description5:
                    this.SB1Description5 = attValue;
                    break;
                case cSB1URL5:
                    this.SB1URL5 = attValue;
                    break;
                case cSB1Name5:
                    this.SB1Name5 = attValue;
                    break;
                case cSB1Label5:
                    this.SB1Label5 = attValue;
                    break;
                case cSB1Type5:
                    this.SB1Type5 = attValue;
                    break;
                case cSB1RelLabel5:
                    this.SB1RelLabel5 = attValue;
                    break;
                case cSB1TAmount5:
                    this.SB1TAmount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit5:
                    this.SB1TUnit5 = attValue;
                    break;
                case cSB1TD1Amount5:
                    this.SB1TD1Amount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit5:
                    this.SB1TD1Unit5 = attValue;
                    break;
                case cSB1TD2Amount5:
                    this.SB1TD2Amount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit5:
                    this.SB1TD2Unit5 = attValue;
                    break;
                case cSB1MathResult5:
                    this.SB1MathResult5 = attValue;
                    break;
                case cSB1MathSubType5:
                    this.SB1MathResult5 = attValue;
                    break;
                case cSB1TMAmount5:
                    this.SB1TMAmount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit5:
                    this.SB1TMUnit5 = attValue;
                    break;
                case cSB1TLAmount5:
                    this.SB1TLAmount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit5:
                    this.SB1TLUnit5 = attValue;
                    break;
                case cSB1TUAmount5:
                    this.SB1TUAmount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit5:
                    this.SB1TUUnit5 = attValue;
                    break;
                case cSB1MathOperator5:
                    this.SB1MathOperator5 = attValue;
                    break;
                case cSB1MathExpression5:
                    this.SB1MathExpression5 = attValue;
                    break;
                case cSB1BaseIO5:
                    this.SB1BaseIO5 = attValue;
                    break;
                case cSB1Date5:
                    this.SB1Date5 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType5:
                    this.SB1MathType5 = attValue;
                    break;
                case cSB11Amount5:
                    this.SB11Amount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit5:
                    this.SB11Unit5 = attValue;
                    break;
                case cSB12Amount5:
                    this.SB12Amount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit5:
                    this.SB12Unit5 = attValue;
                    break;
                case cSB15Amount5:
                    this.SB15Amount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit5:
                    this.SB15Unit5 = attValue;
                    break;
                case cSB13Amount5:
                    this.SB13Amount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit5:
                    this.SB13Unit5 = attValue;
                    break;
                case cSB14Amount5:
                    this.SB14Amount5 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit5:
                    this.SB14Unit5 = attValue;
                    break;
                case cSB1Description6:
                    this.SB1Description6 = attValue;
                    break;
                case cSB1URL6:
                    this.SB1URL6 = attValue;
                    break;
                case cSB1Name6:
                    this.SB1Name6 = attValue;
                    break;
                case cSB1Label6:
                    this.SB1Label6 = attValue;
                    break;
                case cSB1Type6:
                    this.SB1Type6 = attValue;
                    break;
                case cSB1RelLabel6:
                    this.SB1RelLabel6 = attValue;
                    break;
                case cSB1TAmount6:
                    this.SB1TAmount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit6:
                    this.SB1TUnit6 = attValue;
                    break;
                case cSB1TD1Amount6:
                    this.SB1TD1Amount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit6:
                    this.SB1TD1Unit6 = attValue;
                    break;
                case cSB1TD2Amount6:
                    this.SB1TD2Amount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit6:
                    this.SB1TD2Unit6 = attValue;
                    break;
                case cSB1MathResult6:
                    this.SB1MathResult6 = attValue;
                    break;
                case cSB1MathSubType6:
                    this.SB1MathResult6 = attValue;
                    break;
                case cSB1TMAmount6:
                    this.SB1TMAmount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit6:
                    this.SB1TMUnit6 = attValue;
                    break;
                case cSB1TLAmount6:
                    this.SB1TLAmount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit6:
                    this.SB1TLUnit6 = attValue;
                    break;
                case cSB1TUAmount6:
                    this.SB1TUAmount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit6:
                    this.SB1TUUnit6 = attValue;
                    break;
                case cSB1MathOperator6:
                    this.SB1MathOperator6 = attValue;
                    break;
                case cSB1MathExpression6:
                    this.SB1MathExpression6 = attValue;
                    break;
                case cSB1BaseIO6:
                    this.SB1BaseIO6 = attValue;
                    break;
                case cSB1Date6:
                    this.SB1Date6 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType6:
                    this.SB1MathType6 = attValue;
                    break;
                case cSB11Amount6:
                    this.SB11Amount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit6:
                    this.SB11Unit6 = attValue;
                    break;
                case cSB12Amount6:
                    this.SB12Amount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit6:
                    this.SB12Unit6 = attValue;
                    break;
                case cSB15Amount6:
                    this.SB15Amount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit6:
                    this.SB15Unit6 = attValue;
                    break;
                case cSB13Amount6:
                    this.SB13Amount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit6:
                    this.SB13Unit6 = attValue;
                    break;
                case cSB14Amount6:
                    this.SB14Amount6 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit6:
                    this.SB14Unit6 = attValue;
                    break;
                case cSB1Description7:
                    this.SB1Description7 = attValue;
                    break;
                case cSB1URL7:
                    this.SB1URL7 = attValue;
                    break;
                case cSB1Name7:
                    this.SB1Name7 = attValue;
                    break;
                case cSB1Label7:
                    this.SB1Label7 = attValue;
                    break;
                case cSB1Type7:
                    this.SB1Type7 = attValue;
                    break;
                case cSB1RelLabel7:
                    this.SB1RelLabel7 = attValue;
                    break;
                case cSB1TAmount7:
                    this.SB1TAmount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit7:
                    this.SB1TUnit7 = attValue;
                    break;
                case cSB1TD1Amount7:
                    this.SB1TD1Amount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit7:
                    this.SB1TD1Unit7 = attValue;
                    break;
                case cSB1TD2Amount7:
                    this.SB1TD2Amount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit7:
                    this.SB1TD2Unit7 = attValue;
                    break;
                case cSB1MathResult7:
                    this.SB1MathResult7 = attValue;
                    break;
                case cSB1MathSubType7:
                    this.SB1MathResult7 = attValue;
                    break;
                case cSB1TMAmount7:
                    this.SB1TMAmount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit7:
                    this.SB1TMUnit7 = attValue;
                    break;
                case cSB1TLAmount7:
                    this.SB1TLAmount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit7:
                    this.SB1TLUnit7 = attValue;
                    break;
                case cSB1TUAmount7:
                    this.SB1TUAmount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit7:
                    this.SB1TUUnit7 = attValue;
                    break;
                case cSB1MathOperator7:
                    this.SB1MathOperator7 = attValue;
                    break;
                case cSB1MathExpression7:
                    this.SB1MathExpression7 = attValue;
                    break;
                case cSB1BaseIO7:
                    this.SB1BaseIO7 = attValue;
                    break;
                case cSB1Date7:
                    this.SB1Date7 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType7:
                    this.SB1MathType7 = attValue;
                    break;
                case cSB11Amount7:
                    this.SB11Amount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit7:
                    this.SB11Unit7 = attValue;
                    break;
                case cSB12Amount7:
                    this.SB12Amount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit7:
                    this.SB12Unit7 = attValue;
                    break;
                case cSB15Amount7:
                    this.SB15Amount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit7:
                    this.SB15Unit7 = attValue;
                    break;
                case cSB13Amount7:
                    this.SB13Amount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit7:
                    this.SB13Unit7 = attValue;
                    break;
                case cSB14Amount7:
                    this.SB14Amount7 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit7:
                    this.SB14Unit7 = attValue;
                    break;
                case cSB1Description8:
                    this.SB1Description8 = attValue;
                    break;
                case cSB1URL8:
                    this.SB1URL8 = attValue;
                    break;
                case cSB1Name8:
                    this.SB1Name8 = attValue;
                    break;
                case cSB1Label8:
                    this.SB1Label8 = attValue;
                    break;
                case cSB1Type8:
                    this.SB1Type8 = attValue;
                    break;
                case cSB1RelLabel8:
                    this.SB1RelLabel8 = attValue;
                    break;
                case cSB1TAmount8:
                    this.SB1TAmount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit8:
                    this.SB1TUnit8 = attValue;
                    break;
                case cSB1TD1Amount8:
                    this.SB1TD1Amount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit8:
                    this.SB1TD1Unit8 = attValue;
                    break;
                case cSB1TD2Amount8:
                    this.SB1TD2Amount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit8:
                    this.SB1TD2Unit8 = attValue;
                    break;
                case cSB1MathResult8:
                    this.SB1MathResult8 = attValue;
                    break;
                case cSB1MathSubType8:
                    this.SB1MathResult8 = attValue;
                    break;
                case cSB1TMAmount8:
                    this.SB1TMAmount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit8:
                    this.SB1TMUnit8 = attValue;
                    break;
                case cSB1TLAmount8:
                    this.SB1TLAmount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit8:
                    this.SB1TLUnit8 = attValue;
                    break;
                case cSB1TUAmount8:
                    this.SB1TUAmount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit8:
                    this.SB1TUUnit8 = attValue;
                    break;
                case cSB1MathOperator8:
                    this.SB1MathOperator8 = attValue;
                    break;
                case cSB1MathExpression8:
                    this.SB1MathExpression8 = attValue;
                    break;
                case cSB1BaseIO8:
                    this.SB1BaseIO8 = attValue;
                    break;
                case cSB1Date8:
                    this.SB1Date8 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType8:
                    this.SB1MathType8 = attValue;
                    break;
                case cSB11Amount8:
                    this.SB11Amount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit8:
                    this.SB11Unit8 = attValue;
                    break;
                case cSB12Amount8:
                    this.SB12Amount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit8:
                    this.SB12Unit8 = attValue;
                    break;
                case cSB15Amount8:
                    this.SB15Amount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit8:
                    this.SB15Unit8 = attValue;
                    break;
                case cSB13Amount8:
                    this.SB13Amount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit8:
                    this.SB13Unit8 = attValue;
                    break;
                case cSB14Amount8:
                    this.SB14Amount8 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit8:
                    this.SB14Unit8 = attValue;
                    break;
                case cSB1Description9:
                    this.SB1Description9 = attValue;
                    break;
                case cSB1URL9:
                    this.SB1URL9 = attValue;
                    break;
                case cSB1Name9:
                    this.SB1Name9 = attValue;
                    break;
                case cSB1Label9:
                    this.SB1Label9 = attValue;
                    break;
                case cSB1Type9:
                    this.SB1Type9 = attValue;
                    break;
                case cSB1RelLabel9:
                    this.SB1RelLabel9 = attValue;
                    break;
                case cSB1TAmount9:
                    this.SB1TAmount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit9:
                    this.SB1TUnit9 = attValue;
                    break;
                case cSB1TD1Amount9:
                    this.SB1TD1Amount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit9:
                    this.SB1TD1Unit9 = attValue;
                    break;
                case cSB1TD2Amount9:
                    this.SB1TD2Amount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit9:
                    this.SB1TD2Unit9 = attValue;
                    break;
                case cSB1MathResult9:
                    this.SB1MathResult9 = attValue;
                    break;
                case cSB1MathSubType9:
                    this.SB1MathResult9 = attValue;
                    break;
                case cSB1TMAmount9:
                    this.SB1TMAmount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit9:
                    this.SB1TMUnit9 = attValue;
                    break;
                case cSB1TLAmount9:
                    this.SB1TLAmount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit9:
                    this.SB1TLUnit9 = attValue;
                    break;
                case cSB1TUAmount9:
                    this.SB1TUAmount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit9:
                    this.SB1TUUnit9 = attValue;
                    break;
                case cSB1MathOperator9:
                    this.SB1MathOperator9 = attValue;
                    break;
                case cSB1MathExpression9:
                    this.SB1MathExpression9 = attValue;
                    break;
                case cSB1BaseIO9:
                    this.SB1BaseIO9 = attValue;
                    break;
                case cSB1Date9:
                    this.SB1Date9 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType9:
                    this.SB1MathType9 = attValue;
                    break;
                case cSB11Amount9:
                    this.SB11Amount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit9:
                    this.SB11Unit9 = attValue;
                    break;
                case cSB12Amount9:
                    this.SB12Amount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit9:
                    this.SB12Unit9 = attValue;
                    break;
                case cSB15Amount9:
                    this.SB15Amount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit9:
                    this.SB15Unit9 = attValue;
                    break;
                case cSB13Amount9:
                    this.SB13Amount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit9:
                    this.SB13Unit9 = attValue;
                    break;
                case cSB14Amount9:
                    this.SB14Amount9 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit9:
                    this.SB14Unit9 = attValue;
                    break;
                case cSB1Description10:
                    this.SB1Description10 = attValue;
                    break;
                case cSB1URL10:
                    this.SB1URL10 = attValue;
                    break;
                case cSB1Name10:
                    this.SB1Name10 = attValue;
                    break;
                case cSB1Label10:
                    this.SB1Label10 = attValue;
                    break;
                case cSB1Type10:
                    this.SB1Type10 = attValue;
                    break;
                case cSB1RelLabel10:
                    this.SB1RelLabel10 = attValue;
                    break;
                case cSB1TAmount10:
                    this.SB1TAmount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit10:
                    this.SB1TUnit10 = attValue;
                    break;
                case cSB1TD1Amount10:
                    this.SB1TD1Amount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit10:
                    this.SB1TD1Unit10 = attValue;
                    break;
                case cSB1TD2Amount10:
                    this.SB1TD2Amount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit10:
                    this.SB1TD2Unit10 = attValue;
                    break;
                case cSB1MathResult10:
                    this.SB1MathResult10 = attValue;
                    break;
                case cSB1MathSubType10:
                    this.SB1MathResult10 = attValue;
                    break;
                case cSB1TMAmount10:
                    this.SB1TMAmount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit10:
                    this.SB1TMUnit10 = attValue;
                    break;
                case cSB1TLAmount10:
                    this.SB1TLAmount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit10:
                    this.SB1TLUnit10 = attValue;
                    break;
                case cSB1TUAmount10:
                    this.SB1TUAmount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit10:
                    this.SB1TUUnit10 = attValue;
                    break;
                case cSB1MathOperator10:
                    this.SB1MathOperator10 = attValue;
                    break;
                case cSB1MathExpression10:
                    this.SB1MathExpression10 = attValue;
                    break;
                case cSB1BaseIO10:
                    this.SB1BaseIO10 = attValue;
                    break;
                case cSB1Date10:
                    this.SB1Date10 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType10:
                    this.SB1MathType10 = attValue;
                    break;
                case cSB11Amount10:
                    this.SB11Amount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit10:
                    this.SB11Unit10 = attValue;
                    break;
                case cSB12Amount10:
                    this.SB12Amount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit10:
                    this.SB12Unit10 = attValue;
                    break;
                case cSB15Amount10:
                    this.SB15Amount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit10:
                    this.SB15Unit10 = attValue;
                    break;
                case cSB13Amount10:
                    this.SB13Amount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit10:
                    this.SB13Unit10 = attValue;
                    break;
                case cSB14Amount10:
                    this.SB14Amount10 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit10:
                    this.SB14Unit10 = attValue;
                    break;
                case cSB1Description11:
                    this.SB1Description11 = attValue;
                    break;
                case cSB1URL11:
                    this.SB1URL11 = attValue;
                    break;
                case cSB1Name11:
                    this.SB1Name11 = attValue;
                    break;
                case cSB1Label11:
                    this.SB1Label11 = attValue;
                    break;
                case cSB1Type11:
                    this.SB1Type11 = attValue;
                    break;
                case cSB1RelLabel11:
                    this.SB1RelLabel11 = attValue;
                    break;
                case cSB1TAmount11:
                    this.SB1TAmount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit11:
                    this.SB1TUnit11 = attValue;
                    break;
                case cSB1TD1Amount11:
                    this.SB1TD1Amount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit11:
                    this.SB1TD1Unit11 = attValue;
                    break;
                case cSB1TD2Amount11:
                    this.SB1TD2Amount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit11:
                    this.SB1TD2Unit11 = attValue;
                    break;
                case cSB1MathResult11:
                    this.SB1MathResult11 = attValue;
                    break;
                case cSB1MathSubType11:
                    this.SB1MathResult11 = attValue;
                    break;
                case cSB1TMAmount11:
                    this.SB1TMAmount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit11:
                    this.SB1TMUnit11 = attValue;
                    break;
                case cSB1TLAmount11:
                    this.SB1TLAmount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit11:
                    this.SB1TLUnit11 = attValue;
                    break;
                case cSB1TUAmount11:
                    this.SB1TUAmount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit11:
                    this.SB1TUUnit11 = attValue;
                    break;
                case cSB1MathOperator11:
                    this.SB1MathOperator11 = attValue;
                    break;
                case cSB1MathExpression11:
                    this.SB1MathExpression11 = attValue;
                    break;
                case cSB1BaseIO11:
                    this.SB1BaseIO11 = attValue;
                    break;
                case cSB1Date11:
                    this.SB1Date11 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType11:
                    this.SB1MathType11 = attValue;
                    break;
                case cSB11Amount11:
                    this.SB11Amount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit11:
                    this.SB11Unit11 = attValue;
                    break;
                case cSB12Amount11:
                    this.SB12Amount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit11:
                    this.SB12Unit11 = attValue;
                    break;
                case cSB15Amount11:
                    this.SB15Amount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit11:
                    this.SB15Unit11 = attValue;
                    break;
                case cSB13Amount11:
                    this.SB13Amount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit11:
                    this.SB13Unit11 = attValue;
                    break;
                case cSB14Amount11:
                    this.SB14Amount11 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit11:
                    this.SB14Unit11 = attValue;
                    break;
                case cSB1Description12:
                    this.SB1Description12 = attValue;
                    break;
                case cSB1URL12:
                    this.SB1URL12 = attValue;
                    break;
                case cSB1Name12:
                    this.SB1Name12 = attValue;
                    break;
                case cSB1Label12:
                    this.SB1Label12 = attValue;
                    break;
                case cSB1Type12:
                    this.SB1Type12 = attValue;
                    break;
                case cSB1RelLabel12:
                    this.SB1RelLabel12 = attValue;
                    break;
                case cSB1TAmount12:
                    this.SB1TAmount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit12:
                    this.SB1TUnit12 = attValue;
                    break;
                case cSB1TD1Amount12:
                    this.SB1TD1Amount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit12:
                    this.SB1TD1Unit12 = attValue;
                    break;
                case cSB1TD2Amount12:
                    this.SB1TD2Amount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit12:
                    this.SB1TD2Unit12 = attValue;
                    break;
                case cSB1MathResult12:
                    this.SB1MathResult12 = attValue;
                    break;
                case cSB1MathSubType12:
                    this.SB1MathResult12 = attValue;
                    break;
                case cSB1TMAmount12:
                    this.SB1TMAmount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit12:
                    this.SB1TMUnit12 = attValue;
                    break;
                case cSB1TLAmount12:
                    this.SB1TLAmount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit12:
                    this.SB1TLUnit12 = attValue;
                    break;
                case cSB1TUAmount12:
                    this.SB1TUAmount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit12:
                    this.SB1TUUnit12 = attValue;
                    break;
                case cSB1MathOperator12:
                    this.SB1MathOperator12 = attValue;
                    break;
                case cSB1MathExpression12:
                    this.SB1MathExpression12 = attValue;
                    break;
                case cSB1BaseIO12:
                    this.SB1BaseIO12 = attValue;
                    break;
                case cSB1Date12:
                    this.SB1Date12 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType12:
                    this.SB1MathType12 = attValue;
                    break;
                case cSB11Amount12:
                    this.SB11Amount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit12:
                    this.SB11Unit12 = attValue;
                    break;
                case cSB12Amount12:
                    this.SB12Amount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit12:
                    this.SB12Unit12 = attValue;
                    break;
                case cSB15Amount12:
                    this.SB15Amount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit12:
                    this.SB15Unit12 = attValue;
                    break;
                case cSB13Amount12:
                    this.SB13Amount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit12:
                    this.SB13Unit12 = attValue;
                    break;
                case cSB14Amount12:
                    this.SB14Amount12 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit12:
                    this.SB14Unit12 = attValue;
                    break;
                case cSB1Description13:
                    this.SB1Description13 = attValue;
                    break;
                case cSB1URL13:
                    this.SB1URL13 = attValue;
                    break;
                case cSB1Name13:
                    this.SB1Name13 = attValue;
                    break;
                case cSB1Label13:
                    this.SB1Label13 = attValue;
                    break;
                case cSB1Type13:
                    this.SB1Type13 = attValue;
                    break;
                case cSB1RelLabel13:
                    this.SB1RelLabel13 = attValue;
                    break;
                case cSB1TAmount13:
                    this.SB1TAmount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit13:
                    this.SB1TUnit13 = attValue;
                    break;
                case cSB1TD1Amount13:
                    this.SB1TD1Amount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit13:
                    this.SB1TD1Unit13 = attValue;
                    break;
                case cSB1TD2Amount13:
                    this.SB1TD2Amount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit13:
                    this.SB1TD2Unit13 = attValue;
                    break;
                case cSB1MathResult13:
                    this.SB1MathResult13 = attValue;
                    break;
                case cSB1MathSubType13:
                    this.SB1MathResult13 = attValue;
                    break;
                case cSB1TMAmount13:
                    this.SB1TMAmount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit13:
                    this.SB1TMUnit13 = attValue;
                    break;
                case cSB1TLAmount13:
                    this.SB1TLAmount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit13:
                    this.SB1TLUnit13 = attValue;
                    break;
                case cSB1TUAmount13:
                    this.SB1TUAmount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit13:
                    this.SB1TUUnit13 = attValue;
                    break;
                case cSB1MathOperator13:
                    this.SB1MathOperator13 = attValue;
                    break;
                case cSB1MathExpression13:
                    this.SB1MathExpression13 = attValue;
                    break;
                case cSB1BaseIO13:
                    this.SB1BaseIO13 = attValue;
                    break;
                case cSB1Date13:
                    this.SB1Date13 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType13:
                    this.SB1MathType13 = attValue;
                    break;
                case cSB11Amount13:
                    this.SB11Amount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit13:
                    this.SB11Unit13 = attValue;
                    break;
                case cSB12Amount13:
                    this.SB12Amount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit13:
                    this.SB12Unit13 = attValue;
                    break;
                case cSB15Amount13:
                    this.SB15Amount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit13:
                    this.SB15Unit13 = attValue;
                    break;
                case cSB13Amount13:
                    this.SB13Amount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit13:
                    this.SB13Unit13 = attValue;
                    break;
                case cSB14Amount13:
                    this.SB14Amount13 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit13:
                    this.SB14Unit13 = attValue;
                    break;
                case cSB1Description14:
                    this.SB1Description14 = attValue;
                    break;
                case cSB1URL14:
                    this.SB1URL14 = attValue;
                    break;
                case cSB1Name14:
                    this.SB1Name14 = attValue;
                    break;
                case cSB1Label14:
                    this.SB1Label14 = attValue;
                    break;
                case cSB1Type14:
                    this.SB1Type14 = attValue;
                    break;
                case cSB1RelLabel14:
                    this.SB1RelLabel14 = attValue;
                    break;
                case cSB1TAmount14:
                    this.SB1TAmount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit14:
                    this.SB1TUnit14 = attValue;
                    break;
                case cSB1TD1Amount14:
                    this.SB1TD1Amount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit14:
                    this.SB1TD1Unit14 = attValue;
                    break;
                case cSB1TD2Amount14:
                    this.SB1TD2Amount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit14:
                    this.SB1TD2Unit14 = attValue;
                    break;
                case cSB1MathResult14:
                    this.SB1MathResult14 = attValue;
                    break;
                case cSB1MathSubType14:
                    this.SB1MathResult14 = attValue;
                    break;
                case cSB1TMAmount14:
                    this.SB1TMAmount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit14:
                    this.SB1TMUnit14 = attValue;
                    break;
                case cSB1TLAmount14:
                    this.SB1TLAmount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit14:
                    this.SB1TLUnit14 = attValue;
                    break;
                case cSB1TUAmount14:
                    this.SB1TUAmount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit14:
                    this.SB1TUUnit14 = attValue;
                    break;
                case cSB1MathOperator14:
                    this.SB1MathOperator14 = attValue;
                    break;
                case cSB1MathExpression14:
                    this.SB1MathExpression14 = attValue;
                    break;
                case cSB1BaseIO14:
                    this.SB1BaseIO14 = attValue;
                    break;
                case cSB1Date14:
                    this.SB1Date14 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType14:
                    this.SB1MathType14 = attValue;
                    break;
                case cSB11Amount14:
                    this.SB11Amount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit14:
                    this.SB11Unit14 = attValue;
                    break;
                case cSB12Amount14:
                    this.SB12Amount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit14:
                    this.SB12Unit14 = attValue;
                    break;
                case cSB15Amount14:
                    this.SB15Amount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit14:
                    this.SB15Unit14 = attValue;
                    break;
                case cSB13Amount14:
                    this.SB13Amount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit14:
                    this.SB13Unit14 = attValue;
                    break;
                case cSB14Amount14:
                    this.SB14Amount14 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit14:
                    this.SB14Unit14 = attValue;
                    break;
                case cSB1Description15:
                    this.SB1Description15 = attValue;
                    break;
                case cSB1URL15:
                    this.SB1URL15 = attValue;
                    break;
                case cSB1Name15:
                    this.SB1Name15 = attValue;
                    break;
                case cSB1Label15:
                    this.SB1Label15 = attValue;
                    break;
                case cSB1Type15:
                    this.SB1Type15 = attValue;
                    break;
                case cSB1RelLabel15:
                    this.SB1RelLabel15 = attValue;
                    break;
                case cSB1TAmount15:
                    this.SB1TAmount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit15:
                    this.SB1TUnit15 = attValue;
                    break;
                case cSB1TD1Amount15:
                    this.SB1TD1Amount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit15:
                    this.SB1TD1Unit15 = attValue;
                    break;
                case cSB1TD2Amount15:
                    this.SB1TD2Amount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit15:
                    this.SB1TD2Unit15 = attValue;
                    break;
                case cSB1MathResult15:
                    this.SB1MathResult15 = attValue;
                    break;
                case cSB1MathSubType15:
                    this.SB1MathResult15 = attValue;
                    break;
                case cSB1TMAmount15:
                    this.SB1TMAmount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit15:
                    this.SB1TMUnit15 = attValue;
                    break;
                case cSB1TLAmount15:
                    this.SB1TLAmount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit15:
                    this.SB1TLUnit15 = attValue;
                    break;
                case cSB1TUAmount15:
                    this.SB1TUAmount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit15:
                    this.SB1TUUnit15 = attValue;
                    break;
                case cSB1MathOperator15:
                    this.SB1MathOperator15 = attValue;
                    break;
                case cSB1MathExpression15:
                    this.SB1MathExpression15 = attValue;
                    break;
                case cSB1BaseIO15:
                    this.SB1BaseIO15 = attValue;
                    break;
                case cSB1Date15:
                    this.SB1Date15 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType15:
                    this.SB1MathType15 = attValue;
                    break;
                case cSB11Amount15:
                    this.SB11Amount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit15:
                    this.SB11Unit15 = attValue;
                    break;
                case cSB12Amount15:
                    this.SB12Amount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit15:
                    this.SB12Unit15 = attValue;
                    break;
                case cSB15Amount15:
                    this.SB15Amount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit15:
                    this.SB15Unit15 = attValue;
                    break;
                case cSB13Amount15:
                    this.SB13Amount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit15:
                    this.SB13Unit15 = attValue;
                    break;
                case cSB14Amount15:
                    this.SB14Amount15 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit15:
                    this.SB14Unit15 = attValue;
                    break;
                case cSB1Description16:
                    this.SB1Description16 = attValue;
                    break;
                case cSB1URL16:
                    this.SB1URL16 = attValue;
                    break;
                case cSB1Name16:
                    this.SB1Name16 = attValue;
                    break;
                case cSB1Label16:
                    this.SB1Label16 = attValue;
                    break;
                case cSB1Type16:
                    this.SB1Type16 = attValue;
                    break;
                case cSB1RelLabel16:
                    this.SB1RelLabel16 = attValue;
                    break;
                case cSB1TAmount16:
                    this.SB1TAmount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit16:
                    this.SB1TUnit16 = attValue;
                    break;
                case cSB1TD1Amount16:
                    this.SB1TD1Amount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit16:
                    this.SB1TD1Unit16 = attValue;
                    break;
                case cSB1TD2Amount16:
                    this.SB1TD2Amount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit16:
                    this.SB1TD2Unit16 = attValue;
                    break;
                case cSB1MathResult16:
                    this.SB1MathResult16 = attValue;
                    break;
                case cSB1MathSubType16:
                    this.SB1MathResult16 = attValue;
                    break;
                case cSB1TMAmount16:
                    this.SB1TMAmount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit16:
                    this.SB1TMUnit16 = attValue;
                    break;
                case cSB1TLAmount16:
                    this.SB1TLAmount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit16:
                    this.SB1TLUnit16 = attValue;
                    break;
                case cSB1TUAmount16:
                    this.SB1TUAmount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit16:
                    this.SB1TUUnit16 = attValue;
                    break;
                case cSB1MathOperator16:
                    this.SB1MathOperator16 = attValue;
                    break;
                case cSB1MathExpression16:
                    this.SB1MathExpression16 = attValue;
                    break;
                case cSB1BaseIO16:
                    this.SB1BaseIO16 = attValue;
                    break;
                case cSB1Date16:
                    this.SB1Date16 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType16:
                    this.SB1MathType16 = attValue;
                    break;
                case cSB11Amount16:
                    this.SB11Amount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit16:
                    this.SB11Unit16 = attValue;
                    break;
                case cSB12Amount16:
                    this.SB12Amount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit16:
                    this.SB12Unit16 = attValue;
                    break;
                case cSB15Amount16:
                    this.SB15Amount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit16:
                    this.SB15Unit16 = attValue;
                    break;
                case cSB13Amount16:
                    this.SB13Amount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit16:
                    this.SB13Unit16 = attValue;
                    break;
                case cSB14Amount16:
                    this.SB14Amount16 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit16:
                    this.SB14Unit16 = attValue;
                    break;
                case cSB1Description17:
                    this.SB1Description17 = attValue;
                    break;
                case cSB1URL17:
                    this.SB1URL17 = attValue;
                    break;
                case cSB1Name17:
                    this.SB1Name17 = attValue;
                    break;
                case cSB1Label17:
                    this.SB1Label17 = attValue;
                    break;
                case cSB1Type17:
                    this.SB1Type17 = attValue;
                    break;
                case cSB1RelLabel17:
                    this.SB1RelLabel17 = attValue;
                    break;
                case cSB1TAmount17:
                    this.SB1TAmount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit17:
                    this.SB1TUnit17 = attValue;
                    break;
                case cSB1TD1Amount17:
                    this.SB1TD1Amount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit17:
                    this.SB1TD1Unit17 = attValue;
                    break;
                case cSB1TD2Amount17:
                    this.SB1TD2Amount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit17:
                    this.SB1TD2Unit17 = attValue;
                    break;
                case cSB1MathResult17:
                    this.SB1MathResult17 = attValue;
                    break;
                case cSB1MathSubType17:
                    this.SB1MathResult17 = attValue;
                    break;
                case cSB1TMAmount17:
                    this.SB1TMAmount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit17:
                    this.SB1TMUnit17 = attValue;
                    break;
                case cSB1TLAmount17:
                    this.SB1TLAmount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit17:
                    this.SB1TLUnit17 = attValue;
                    break;
                case cSB1TUAmount17:
                    this.SB1TUAmount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit17:
                    this.SB1TUUnit17 = attValue;
                    break;
                case cSB1MathOperator17:
                    this.SB1MathOperator17 = attValue;
                    break;
                case cSB1MathExpression17:
                    this.SB1MathExpression17 = attValue;
                    break;
                case cSB1BaseIO17:
                    this.SB1BaseIO17 = attValue;
                    break;
                case cSB1Date17:
                    this.SB1Date17 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType17:
                    this.SB1MathType17 = attValue;
                    break;
                case cSB11Amount17:
                    this.SB11Amount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit17:
                    this.SB11Unit17 = attValue;
                    break;
                case cSB12Amount17:
                    this.SB12Amount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit17:
                    this.SB12Unit17 = attValue;
                    break;
                case cSB15Amount17:
                    this.SB15Amount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit17:
                    this.SB15Unit17 = attValue;
                    break;
                case cSB13Amount17:
                    this.SB13Amount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit17:
                    this.SB13Unit17 = attValue;
                    break;
                case cSB14Amount17:
                    this.SB14Amount17 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit17:
                    this.SB14Unit17 = attValue;
                    break;
                case cSB1Description18:
                    this.SB1Description18 = attValue;
                    break;
                case cSB1URL18:
                    this.SB1URL18 = attValue;
                    break;
                case cSB1Name18:
                    this.SB1Name18 = attValue;
                    break;
                case cSB1Label18:
                    this.SB1Label18 = attValue;
                    break;
                case cSB1Type18:
                    this.SB1Type18 = attValue;
                    break;
                case cSB1RelLabel18:
                    this.SB1RelLabel18 = attValue;
                    break;
                case cSB1TAmount18:
                    this.SB1TAmount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit18:
                    this.SB1TUnit18 = attValue;
                    break;
                case cSB1TD1Amount18:
                    this.SB1TD1Amount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit18:
                    this.SB1TD1Unit18 = attValue;
                    break;
                case cSB1TD2Amount18:
                    this.SB1TD2Amount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit18:
                    this.SB1TD2Unit18 = attValue;
                    break;
                case cSB1MathResult18:
                    this.SB1MathResult18 = attValue;
                    break;
                case cSB1MathSubType18:
                    this.SB1MathResult18 = attValue;
                    break;
                case cSB1TMAmount18:
                    this.SB1TMAmount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit18:
                    this.SB1TMUnit18 = attValue;
                    break;
                case cSB1TLAmount18:
                    this.SB1TLAmount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit18:
                    this.SB1TLUnit18 = attValue;
                    break;
                case cSB1TUAmount18:
                    this.SB1TUAmount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit18:
                    this.SB1TUUnit18 = attValue;
                    break;
                case cSB1MathOperator18:
                    this.SB1MathOperator18 = attValue;
                    break;
                case cSB1MathExpression18:
                    this.SB1MathExpression18 = attValue;
                    break;
                case cSB1BaseIO18:
                    this.SB1BaseIO18 = attValue;
                    break;
                case cSB1Date18:
                    this.SB1Date18 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType18:
                    this.SB1MathType18 = attValue;
                    break;
                case cSB11Amount18:
                    this.SB11Amount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit18:
                    this.SB11Unit18 = attValue;
                    break;
                case cSB12Amount18:
                    this.SB12Amount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit18:
                    this.SB12Unit18 = attValue;
                    break;
                case cSB15Amount18:
                    this.SB15Amount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit18:
                    this.SB15Unit18 = attValue;
                    break;
                case cSB13Amount18:
                    this.SB13Amount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit18:
                    this.SB13Unit18 = attValue;
                    break;
                case cSB14Amount18:
                    this.SB14Amount18 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit18:
                    this.SB14Unit18 = attValue;
                    break;
                case cSB1Description19:
                    this.SB1Description19 = attValue;
                    break;
                case cSB1URL19:
                    this.SB1URL19 = attValue;
                    break;
                case cSB1Name19:
                    this.SB1Name19 = attValue;
                    break;
                case cSB1Label19:
                    this.SB1Label19 = attValue;
                    break;
                case cSB1Type19:
                    this.SB1Type19 = attValue;
                    break;
                case cSB1RelLabel19:
                    this.SB1RelLabel19 = attValue;
                    break;
                case cSB1TAmount19:
                    this.SB1TAmount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit19:
                    this.SB1TUnit19 = attValue;
                    break;
                case cSB1TD1Amount19:
                    this.SB1TD1Amount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit19:
                    this.SB1TD1Unit19 = attValue;
                    break;
                case cSB1TD2Amount19:
                    this.SB1TD2Amount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit19:
                    this.SB1TD2Unit19 = attValue;
                    break;
                case cSB1MathResult19:
                    this.SB1MathResult19 = attValue;
                    break;
                case cSB1MathSubType19:
                    this.SB1MathResult19 = attValue;
                    break;
                case cSB1TMAmount19:
                    this.SB1TMAmount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit19:
                    this.SB1TMUnit19 = attValue;
                    break;
                case cSB1TLAmount19:
                    this.SB1TLAmount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit19:
                    this.SB1TLUnit19 = attValue;
                    break;
                case cSB1TUAmount19:
                    this.SB1TUAmount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit19:
                    this.SB1TUUnit19 = attValue;
                    break;
                case cSB1MathOperator19:
                    this.SB1MathOperator19 = attValue;
                    break;
                case cSB1MathExpression19:
                    this.SB1MathExpression19 = attValue;
                    break;
                case cSB1BaseIO19:
                    this.SB1BaseIO19 = attValue;
                    break;
                case cSB1Date19:
                    this.SB1Date19 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType19:
                    this.SB1MathType19 = attValue;
                    break;
                case cSB11Amount19:
                    this.SB11Amount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit19:
                    this.SB11Unit19 = attValue;
                    break;
                case cSB12Amount19:
                    this.SB12Amount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit19:
                    this.SB12Unit19 = attValue;
                    break;
                case cSB15Amount19:
                    this.SB15Amount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit19:
                    this.SB15Unit19 = attValue;
                    break;
                case cSB13Amount19:
                    this.SB13Amount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit19:
                    this.SB13Unit19 = attValue;
                    break;
                case cSB14Amount19:
                    this.SB14Amount19 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit19:
                    this.SB14Unit19 = attValue;
                    break;
                case cSB1Description20:
                    this.SB1Description20 = attValue;
                    break;
                case cSB1URL20:
                    this.SB1URL20 = attValue;
                    break;
                case cSB1Name20:
                    this.SB1Name20 = attValue;
                    break;
                case cSB1Label20:
                    this.SB1Label20 = attValue;
                    break;
                case cSB1Type20:
                    this.SB1Type20 = attValue;
                    break;
                case cSB1RelLabel20:
                    this.SB1RelLabel20 = attValue;
                    break;
                case cSB1TAmount20:
                    this.SB1TAmount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUnit20:
                    this.SB1TUnit20 = attValue;
                    break;
                case cSB1TD1Amount20:
                    this.SB1TD1Amount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD1Unit20:
                    this.SB1TD1Unit20 = attValue;
                    break;
                case cSB1TD2Amount20:
                    this.SB1TD2Amount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TD2Unit20:
                    this.SB1TD2Unit20 = attValue;
                    break;
                case cSB1MathResult20:
                    this.SB1MathResult20 = attValue;
                    break;
                case cSB1MathSubType20:
                    this.SB1MathResult20 = attValue;
                    break;
                case cSB1TMAmount20:
                    this.SB1TMAmount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TMUnit20:
                    this.SB1TMUnit20 = attValue;
                    break;
                case cSB1TLAmount20:
                    this.SB1TLAmount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TLUnit20:
                    this.SB1TLUnit20 = attValue;
                    break;
                case cSB1TUAmount20:
                    this.SB1TUAmount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB1TUUnit20:
                    this.SB1TUUnit20 = attValue;
                    break;
                case cSB1MathOperator20:
                    this.SB1MathOperator20 = attValue;
                    break;
                case cSB1MathExpression20:
                    this.SB1MathExpression20 = attValue;
                    break;
                case cSB1BaseIO20:
                    this.SB1BaseIO20 = attValue;
                    break;
                case cSB1Date20:
                    this.SB1Date20 = CalculatorHelpers.ConvertStringToDate(attValue);
                    break;
                case cSB1MathType20:
                    this.SB1MathType20 = attValue;
                    break;
                case cSB11Amount20:
                    this.SB11Amount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB11Unit20:
                    this.SB11Unit20 = attValue;
                    break;
                case cSB12Amount20:
                    this.SB12Amount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB12Unit20:
                    this.SB12Unit20 = attValue;
                    break;
                case cSB15Amount20:
                    this.SB15Amount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB15Unit20:
                    this.SB15Unit20 = attValue;
                    break;
                case cSB13Amount20:
                    this.SB13Amount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB13Unit20:
                    this.SB13Unit20 = attValue;
                    break;
                case cSB14Amount20:
                    this.SB14Amount20 = CalculatorHelpers.ConvertStringToDouble(attValue);
                    break;
                case cSB14Unit20:
                    this.SB14Unit20 = attValue;
                    break;
                default:
                    break;
            }
        }
        private string GetSB1BaseProperty(string attName)
        {
            string sPropertyValue = string.Empty;
            switch (attName)
            {
                case cSB1Score:
                    sPropertyValue = this.SB1Score.ToString();
                    break;
                case cSB1ScoreUnit:
                    sPropertyValue = this.SB1ScoreUnit;
                    break;
                case cSB1ScoreD1Amount:
                    sPropertyValue = this.SB1ScoreD1Amount.ToString();
                    break;
                case cSB1ScoreD1Unit:
                    sPropertyValue = this.SB1ScoreD1Unit.ToString();
                    break;
                case cSB1ScoreD2Amount:
                    sPropertyValue = this.SB1ScoreD2Amount.ToString();
                    break;
                case cSB1ScoreD2Unit:
                    sPropertyValue = this.SB1ScoreD2Unit.ToString();
                    break;
                case cSB1ScoreMathExpression:
                    sPropertyValue = this.SB1ScoreMathExpression;
                    break;
                case cSB1ScoreM:
                    sPropertyValue = this.SB1ScoreM.ToString();
                    break;
                case cSB1ScoreMUnit:
                    sPropertyValue = this.SB1ScoreMUnit;
                    break;
                case cSB1ScoreLAmount:
                    sPropertyValue = this.SB1ScoreLAmount.ToString();
                    break;
                case cSB1ScoreLUnit:
                    sPropertyValue = this.SB1ScoreLUnit.ToString();
                    break;
                case cSB1ScoreUAmount:
                    sPropertyValue = this.SB1ScoreUAmount.ToString();
                    break;
                case cSB1ScoreUUnit:
                    sPropertyValue = this.SB1ScoreUUnit.ToString();
                    break;
                case cSB1ScoreDistType:
                    sPropertyValue = this.SB1ScoreDistType.ToString();
                    break;
                case cSB1ScoreMathType:
                    sPropertyValue = this.SB1ScoreMathType.ToString();
                    break;
                case cSB1ScoreMathSubType:
                    sPropertyValue = this.SB1ScoreMathSubType.ToString();
                    break;
                case cSB1ScoreMathResult:
                    sPropertyValue = this.SB1ScoreMathResult.ToString();
                    break;
                case cSB1JointDataURL:
                    sPropertyValue = this.SB1JointDataURL.ToString();
                    break;
                case cSB1Iterations:
                    sPropertyValue = this.SB1Iterations.ToString();
                    break;
                case cSB1CILevel:
                    sPropertyValue = this.SB1CILevel.ToString();
                    break;
                case cSB1Random:
                    sPropertyValue = this.SB1Random.ToString();
                    break;
                case cSB1BaseIO:
                    sPropertyValue = this.SB1BaseIO.ToString();
                    break;
                case cSB1Description1:
                    sPropertyValue = this.SB1Description1;
                    break;
                case cSB1URL1:
                    sPropertyValue = this.SB1URL1;
                    break;
                case cSB1Name1:
                    sPropertyValue = this.SB1Name1;
                    break;
                case cSB1Type1:
                    sPropertyValue = this.SB1Type1;
                    break;
                case cSB1Label1:
                    sPropertyValue = this.SB1Label1;
                    break;
                case cSB1RelLabel1:
                    sPropertyValue = this.SB1RelLabel1;
                    break;
                case cSB1TAmount1:
                    sPropertyValue = this.SB1TAmount1.ToString();
                    break;
                case cSB1TUnit1:
                    sPropertyValue = this.SB1TUnit1.ToString();
                    break;
                case cSB1TD1Amount1:
                    sPropertyValue = this.SB1TD1Amount1.ToString();
                    break;
                case cSB1TD1Unit1:
                    sPropertyValue = this.SB1TD1Unit1.ToString();
                    break;
                case cSB1TD2Amount1:
                    sPropertyValue = this.SB1TD2Amount1.ToString();
                    break;
                case cSB1TD2Unit1:
                    sPropertyValue = this.SB1TD2Unit1.ToString();
                    break;
                case cSB1MathResult1:
                    sPropertyValue = this.SB1MathResult1.ToString();
                    break;
                case cSB1MathSubType1:
                    sPropertyValue = this.SB1MathSubType1.ToString();
                    break;
                case cSB1TMAmount1:
                    sPropertyValue = this.SB1TMAmount1.ToString();
                    break;
                case cSB1TMUnit1:
                    sPropertyValue = this.SB1TMUnit1.ToString();
                    break;
                case cSB1TLAmount1:
                    sPropertyValue = this.SB1TLAmount1.ToString();
                    break;
                case cSB1TLUnit1:
                    sPropertyValue = this.SB1TLUnit1.ToString();
                    break;
                case cSB1TUAmount1:
                    sPropertyValue = this.SB1TUAmount1.ToString();
                    break;
                case cSB1TUUnit1:
                    sPropertyValue = this.SB1TUUnit1.ToString();
                    break;
                case cSB1MathOperator1:
                    sPropertyValue = this.SB1MathOperator1.ToString();
                    break;
                case cSB1MathExpression1:
                    sPropertyValue = this.SB1MathExpression1.ToString();
                    break;
                case cSB1BaseIO1:
                    sPropertyValue = this.SB1BaseIO1.ToString();
                    break;
                case cSB1Date1:
                    sPropertyValue = this.SB1Date1.ToString();
                    break;
                case cSB1MathType1:
                    sPropertyValue = this.SB1MathType1;
                    break;
                case cSB11Amount1:
                    sPropertyValue = this.SB11Amount1.ToString();
                    break;
                case cSB11Unit1:
                    sPropertyValue = this.SB11Unit1.ToString();
                    break;
                case cSB12Amount1:
                    sPropertyValue = this.SB12Amount1.ToString();
                    break;
                case cSB12Unit1:
                    sPropertyValue = this.SB12Unit1;
                    break;
                case cSB15Amount1:
                    sPropertyValue = this.SB15Amount1.ToString();
                    break;
                case cSB15Unit1:
                    sPropertyValue = this.SB15Unit1.ToString();
                    break;
                case cSB13Amount1:
                    sPropertyValue = this.SB13Amount1.ToString();
                    break;
                case cSB13Unit1:
                    sPropertyValue = this.SB13Unit1;
                    break;
                case cSB14Amount1:
                    sPropertyValue = this.SB14Amount1.ToString();
                    break;
                case cSB14Unit1:
                    sPropertyValue = this.SB14Unit1;
                    break;
                case cSB1Description2:
                    sPropertyValue = this.SB1Description2;
                    break;
                case cSB1URL2:
                    sPropertyValue = this.SB1URL2;
                    break;
                case cSB1Name2:
                    sPropertyValue = this.SB1Name2;
                    break;
                case cSB1Label2:
                    sPropertyValue = this.SB1Label2;
                    break;
                case cSB1Type2:
                    sPropertyValue = this.SB1Type2;
                    break;
                case cSB1RelLabel2:
                    sPropertyValue = this.SB1RelLabel2;
                    break;
                case cSB1TAmount2:
                    sPropertyValue = this.SB1TAmount2.ToString();
                    break;
                case cSB1TUnit2:
                    sPropertyValue = this.SB1TUnit2.ToString();
                    break;
                case cSB1TD1Amount2:
                    sPropertyValue = this.SB1TD1Amount2.ToString();
                    break;
                case cSB1TD1Unit2:
                    sPropertyValue = this.SB1TD1Unit2.ToString();
                    break;
                case cSB1TD2Amount2:
                    sPropertyValue = this.SB1TD2Amount2.ToString();
                    break;
                case cSB1TD2Unit2:
                    sPropertyValue = this.SB1TD2Unit2.ToString();
                    break;
                case cSB1MathResult2:
                    sPropertyValue = this.SB1MathResult2.ToString();
                    break;
                case cSB1MathSubType2:
                    sPropertyValue = this.SB1MathSubType2.ToString();
                    break;
                case cSB1TMAmount2:
                    sPropertyValue = this.SB1TMAmount2.ToString();
                    break;
                case cSB1TMUnit2:
                    sPropertyValue = this.SB1TMUnit2.ToString();
                    break;
                case cSB1TLAmount2:
                    sPropertyValue = this.SB1TLAmount2.ToString();
                    break;
                case cSB1TLUnit2:
                    sPropertyValue = this.SB1TLUnit2.ToString();
                    break;
                case cSB1TUAmount2:
                    sPropertyValue = this.SB1TUAmount2.ToString();
                    break;
                case cSB1TUUnit2:
                    sPropertyValue = this.SB1TUUnit2.ToString();
                    break;
                case cSB1MathOperator2:
                    sPropertyValue = this.SB1MathOperator2.ToString();
                    break;
                case cSB1MathExpression2:
                    sPropertyValue = this.SB1MathExpression2.ToString();
                    break;
                case cSB1BaseIO2:
                    sPropertyValue = this.SB1BaseIO2.ToString();
                    break;
                case cSB1Date2:
                    sPropertyValue = this.SB1Date2.ToString();
                    break;
                case cSB1MathType2:
                    sPropertyValue = this.SB1MathType2;
                    break;
                case cSB11Amount2:
                    sPropertyValue = this.SB11Amount2.ToString();
                    break;
                case cSB11Unit2:
                    sPropertyValue = this.SB11Unit2.ToString();
                    break;
                case cSB12Amount2:
                    sPropertyValue = this.SB12Amount2.ToString();
                    break;
                case cSB12Unit2:
                    sPropertyValue = this.SB12Unit2;
                    break;
                case cSB15Amount2:
                    sPropertyValue = this.SB15Amount2.ToString();
                    break;
                case cSB15Unit2:
                    sPropertyValue = this.SB15Unit2.ToString();
                    break;
                case cSB13Amount2:
                    sPropertyValue = this.SB13Amount2.ToString();
                    break;
                case cSB13Unit2:
                    sPropertyValue = this.SB13Unit2;
                    break;
                case cSB14Amount2:
                    sPropertyValue = this.SB14Amount2.ToString();
                    break;
                case cSB14Unit2:
                    sPropertyValue = this.SB14Unit2;
                    break;
                case cSB1Description3:
                    sPropertyValue = this.SB1Description3;
                    break;
                case cSB1URL3:
                    sPropertyValue = this.SB1URL3;
                    break;
                case cSB1Name3:
                    sPropertyValue = this.SB1Name3;
                    break;
                case cSB1Label3:
                    sPropertyValue = this.SB1Label3;
                    break;
                case cSB1Type3:
                    sPropertyValue = this.SB1Type3;
                    break;
                case cSB1RelLabel3:
                    sPropertyValue = this.SB1RelLabel3;
                    break;
                case cSB1TAmount3:
                    sPropertyValue = this.SB1TAmount3.ToString();
                    break;
                case cSB1TUnit3:
                    sPropertyValue = this.SB1TUnit3.ToString();
                    break;
                case cSB1TD1Amount3:
                    sPropertyValue = this.SB1TD1Amount3.ToString();
                    break;
                case cSB1TD1Unit3:
                    sPropertyValue = this.SB1TD1Unit3.ToString();
                    break;
                case cSB1TD2Amount3:
                    sPropertyValue = this.SB1TD2Amount3.ToString();
                    break;
                case cSB1TD2Unit3:
                    sPropertyValue = this.SB1TD2Unit3.ToString();
                    break;
                case cSB1MathResult3:
                    sPropertyValue = this.SB1MathResult3.ToString();
                    break;
                case cSB1MathSubType3:
                    sPropertyValue = this.SB1MathSubType3.ToString();
                    break;
                case cSB1TMAmount3:
                    sPropertyValue = this.SB1TMAmount3.ToString();
                    break;
                case cSB1TMUnit3:
                    sPropertyValue = this.SB1TMUnit3.ToString();
                    break;
                case cSB1TLAmount3:
                    sPropertyValue = this.SB1TLAmount3.ToString();
                    break;
                case cSB1TLUnit3:
                    sPropertyValue = this.SB1TLUnit3.ToString();
                    break;
                case cSB1TUAmount3:
                    sPropertyValue = this.SB1TUAmount3.ToString();
                    break;
                case cSB1TUUnit3:
                    sPropertyValue = this.SB1TUUnit3.ToString();
                    break;
                case cSB1MathOperator3:
                    sPropertyValue = this.SB1MathOperator3.ToString();
                    break;
                case cSB1MathExpression3:
                    sPropertyValue = this.SB1MathExpression3.ToString();
                    break;
                case cSB1BaseIO3:
                    sPropertyValue = this.SB1BaseIO3.ToString();
                    break;
                case cSB1Date3:
                    sPropertyValue = this.SB1Date3.ToString();
                    break;
                case cSB1MathType3:
                    sPropertyValue = this.SB1MathType3;
                    break;
                case cSB11Amount3:
                    sPropertyValue = this.SB11Amount3.ToString();
                    break;
                case cSB11Unit3:
                    sPropertyValue = this.SB11Unit3.ToString();
                    break;
                case cSB12Amount3:
                    sPropertyValue = this.SB12Amount3.ToString();
                    break;
                case cSB12Unit3:
                    sPropertyValue = this.SB12Unit3;
                    break;
                case cSB15Amount3:
                    sPropertyValue = this.SB15Amount3.ToString();
                    break;
                case cSB15Unit3:
                    sPropertyValue = this.SB15Unit3.ToString();
                    break;
                case cSB13Amount3:
                    sPropertyValue = this.SB13Amount3.ToString();
                    break;
                case cSB13Unit3:
                    sPropertyValue = this.SB13Unit3;
                    break;
                case cSB14Amount3:
                    sPropertyValue = this.SB14Amount3.ToString();
                    break;
                case cSB14Unit3:
                    sPropertyValue = this.SB14Unit3;
                    break;
                case cSB1Description4:
                    sPropertyValue = this.SB1Description4;
                    break;
                case cSB1URL4:
                    sPropertyValue = this.SB1URL4;
                    break;
                case cSB1Name4:
                    sPropertyValue = this.SB1Name4;
                    break;
                case cSB1Label4:
                    sPropertyValue = this.SB1Label4;
                    break;
                case cSB1Type4:
                    sPropertyValue = this.SB1Type4;
                    break;
                case cSB1RelLabel4:
                    sPropertyValue = this.SB1RelLabel4;
                    break;
                case cSB1TAmount4:
                    sPropertyValue = this.SB1TAmount4.ToString();
                    break;
                case cSB1TUnit4:
                    sPropertyValue = this.SB1TUnit4.ToString();
                    break;
                case cSB1TD1Amount4:
                    sPropertyValue = this.SB1TD1Amount4.ToString();
                    break;
                case cSB1TD1Unit4:
                    sPropertyValue = this.SB1TD1Unit4.ToString();
                    break;
                case cSB1TD2Amount4:
                    sPropertyValue = this.SB1TD2Amount4.ToString();
                    break;
                case cSB1TD2Unit4:
                    sPropertyValue = this.SB1TD2Unit4.ToString();
                    break;
                case cSB1MathResult4:
                    sPropertyValue = this.SB1MathResult4.ToString();
                    break;
                case cSB1MathSubType4:
                    sPropertyValue = this.SB1MathSubType4.ToString();
                    break;
                case cSB1TMAmount4:
                    sPropertyValue = this.SB1TMAmount4.ToString();
                    break;
                case cSB1TMUnit4:
                    sPropertyValue = this.SB1TMUnit4.ToString();
                    break;
                case cSB1TLAmount4:
                    sPropertyValue = this.SB1TLAmount4.ToString();
                    break;
                case cSB1TLUnit4:
                    sPropertyValue = this.SB1TLUnit4.ToString();
                    break;
                case cSB1TUAmount4:
                    sPropertyValue = this.SB1TUAmount4.ToString();
                    break;
                case cSB1TUUnit4:
                    sPropertyValue = this.SB1TUUnit4.ToString();
                    break;
                case cSB1MathOperator4:
                    sPropertyValue = this.SB1MathOperator4.ToString();
                    break;
                case cSB1MathExpression4:
                    sPropertyValue = this.SB1MathExpression4.ToString();
                    break;
                case cSB1BaseIO4:
                    sPropertyValue = this.SB1BaseIO4.ToString();
                    break;
                case cSB1Date4:
                    sPropertyValue = this.SB1Date4.ToString();
                    break;
                case cSB1MathType4:
                    sPropertyValue = this.SB1MathType4;
                    break;
                case cSB11Amount4:
                    sPropertyValue = this.SB11Amount4.ToString();
                    break;
                case cSB11Unit4:
                    sPropertyValue = this.SB11Unit4.ToString();
                    break;
                case cSB12Amount4:
                    sPropertyValue = this.SB12Amount4.ToString();
                    break;
                case cSB12Unit4:
                    sPropertyValue = this.SB12Unit4;
                    break;
                case cSB15Amount4:
                    sPropertyValue = this.SB15Amount4.ToString();
                    break;
                case cSB15Unit4:
                    sPropertyValue = this.SB15Unit4.ToString();
                    break;
                case cSB13Amount4:
                    sPropertyValue = this.SB13Amount4.ToString();
                    break;
                case cSB13Unit4:
                    sPropertyValue = this.SB13Unit4;
                    break;
                case cSB14Amount4:
                    sPropertyValue = this.SB14Amount4.ToString();
                    break;
                case cSB14Unit4:
                    sPropertyValue = this.SB14Unit4;
                    break;
                case cSB1Description5:
                    sPropertyValue = this.SB1Description5;
                    break;
                case cSB1URL5:
                    sPropertyValue = this.SB1URL5;
                    break;
                case cSB1Name5:
                    sPropertyValue = this.SB1Name5;
                    break;
                case cSB1Label5:
                    sPropertyValue = this.SB1Label5;
                    break;
                case cSB1Type5:
                    sPropertyValue = this.SB1Type5;
                    break;
                case cSB1RelLabel5:
                    sPropertyValue = this.SB1RelLabel5;
                    break;
                case cSB1TAmount5:
                    sPropertyValue = this.SB1TAmount5.ToString();
                    break;
                case cSB1TUnit5:
                    sPropertyValue = this.SB1TUnit5.ToString();
                    break;
                case cSB1TD1Amount5:
                    sPropertyValue = this.SB1TD1Amount5.ToString();
                    break;
                case cSB1TD1Unit5:
                    sPropertyValue = this.SB1TD1Unit5.ToString();
                    break;
                case cSB1TD2Amount5:
                    sPropertyValue = this.SB1TD2Amount5.ToString();
                    break;
                case cSB1TD2Unit5:
                    sPropertyValue = this.SB1TD2Unit5.ToString();
                    break;
                case cSB1MathResult5:
                    sPropertyValue = this.SB1MathResult5.ToString();
                    break;
                case cSB1MathSubType5:
                    sPropertyValue = this.SB1MathSubType5.ToString();
                    break;
                case cSB1TMAmount5:
                    sPropertyValue = this.SB1TMAmount5.ToString();
                    break;
                case cSB1TMUnit5:
                    sPropertyValue = this.SB1TMUnit5.ToString();
                    break;
                case cSB1TLAmount5:
                    sPropertyValue = this.SB1TLAmount5.ToString();
                    break;
                case cSB1TLUnit5:
                    sPropertyValue = this.SB1TLUnit5.ToString();
                    break;
                case cSB1TUAmount5:
                    sPropertyValue = this.SB1TUAmount5.ToString();
                    break;
                case cSB1TUUnit5:
                    sPropertyValue = this.SB1TUUnit5.ToString();
                    break;
                case cSB1MathOperator5:
                    sPropertyValue = this.SB1MathOperator5.ToString();
                    break;
                case cSB1MathExpression5:
                    sPropertyValue = this.SB1MathExpression5.ToString();
                    break;
                case cSB1BaseIO5:
                    sPropertyValue = this.SB1BaseIO5.ToString();
                    break;
                case cSB1Date5:
                    sPropertyValue = this.SB1Date5.ToString();
                    break;
                case cSB1MathType5:
                    sPropertyValue = this.SB1MathType5;
                    break;
                case cSB11Amount5:
                    sPropertyValue = this.SB11Amount5.ToString();
                    break;
                case cSB11Unit5:
                    sPropertyValue = this.SB11Unit5.ToString();
                    break;
                case cSB12Amount5:
                    sPropertyValue = this.SB12Amount5.ToString();
                    break;
                case cSB12Unit5:
                    sPropertyValue = this.SB12Unit5;
                    break;
                case cSB15Amount5:
                    sPropertyValue = this.SB15Amount5.ToString();
                    break;
                case cSB15Unit5:
                    sPropertyValue = this.SB15Unit5.ToString();
                    break;
                case cSB13Amount5:
                    sPropertyValue = this.SB13Amount5.ToString();
                    break;
                case cSB13Unit5:
                    sPropertyValue = this.SB13Unit5;
                    break;
                case cSB14Amount5:
                    sPropertyValue = this.SB14Amount5.ToString();
                    break;
                case cSB14Unit5:
                    sPropertyValue = this.SB14Unit5;
                    break;
                case cSB1Description6:
                    sPropertyValue = this.SB1Description6;
                    break;
                case cSB1URL6:
                    sPropertyValue = this.SB1URL6;
                    break;
                case cSB1Name6:
                    sPropertyValue = this.SB1Name6;
                    break;
                case cSB1Label6:
                    sPropertyValue = this.SB1Label6;
                    break;
                case cSB1Type6:
                    sPropertyValue = this.SB1Type6;
                    break;
                case cSB1RelLabel6:
                    sPropertyValue = this.SB1RelLabel6;
                    break;
                case cSB1TAmount6:
                    sPropertyValue = this.SB1TAmount6.ToString();
                    break;
                case cSB1TUnit6:
                    sPropertyValue = this.SB1TUnit6.ToString();
                    break;
                case cSB1TD1Amount6:
                    sPropertyValue = this.SB1TD1Amount6.ToString();
                    break;
                case cSB1TD1Unit6:
                    sPropertyValue = this.SB1TD1Unit6.ToString();
                    break;
                case cSB1TD2Amount6:
                    sPropertyValue = this.SB1TD2Amount6.ToString();
                    break;
                case cSB1TD2Unit6:
                    sPropertyValue = this.SB1TD2Unit6.ToString();
                    break;
                case cSB1MathResult6:
                    sPropertyValue = this.SB1MathResult6.ToString();
                    break;
                case cSB1MathSubType6:
                    sPropertyValue = this.SB1MathSubType6.ToString();
                    break;
                case cSB1TMAmount6:
                    sPropertyValue = this.SB1TMAmount6.ToString();
                    break;
                case cSB1TMUnit6:
                    sPropertyValue = this.SB1TMUnit6.ToString();
                    break;
                case cSB1TLAmount6:
                    sPropertyValue = this.SB1TLAmount6.ToString();
                    break;
                case cSB1TLUnit6:
                    sPropertyValue = this.SB1TLUnit6.ToString();
                    break;
                case cSB1TUAmount6:
                    sPropertyValue = this.SB1TUAmount6.ToString();
                    break;
                case cSB1TUUnit6:
                    sPropertyValue = this.SB1TUUnit6.ToString();
                    break;
                case cSB1MathOperator6:
                    sPropertyValue = this.SB1MathOperator6.ToString();
                    break;
                case cSB1MathExpression6:
                    sPropertyValue = this.SB1MathExpression6.ToString();
                    break;
                case cSB1BaseIO6:
                    sPropertyValue = this.SB1BaseIO6.ToString();
                    break;
                case cSB1Date6:
                    sPropertyValue = this.SB1Date6.ToString();
                    break;
                case cSB1MathType6:
                    sPropertyValue = this.SB1MathType6;
                    break;
                case cSB11Amount6:
                    sPropertyValue = this.SB11Amount6.ToString();
                    break;
                case cSB11Unit6:
                    sPropertyValue = this.SB11Unit6.ToString();
                    break;
                case cSB12Amount6:
                    sPropertyValue = this.SB12Amount6.ToString();
                    break;
                case cSB12Unit6:
                    sPropertyValue = this.SB12Unit6;
                    break;
                case cSB15Amount6:
                    sPropertyValue = this.SB15Amount6.ToString();
                    break;
                case cSB15Unit6:
                    sPropertyValue = this.SB15Unit6.ToString();
                    break;
                case cSB13Amount6:
                    sPropertyValue = this.SB13Amount6.ToString();
                    break;
                case cSB13Unit6:
                    sPropertyValue = this.SB13Unit6;
                    break;
                case cSB14Amount6:
                    sPropertyValue = this.SB14Amount6.ToString();
                    break;
                case cSB14Unit6:
                    sPropertyValue = this.SB14Unit6;
                    break;
                case cSB1Description7:
                    sPropertyValue = this.SB1Description7;
                    break;
                case cSB1URL7:
                    sPropertyValue = this.SB1URL7;
                    break;
                case cSB1Name7:
                    sPropertyValue = this.SB1Name7;
                    break;
                case cSB1Label7:
                    sPropertyValue = this.SB1Label7;
                    break;
                case cSB1Type7:
                    sPropertyValue = this.SB1Type7;
                    break;
                case cSB1RelLabel7:
                    sPropertyValue = this.SB1RelLabel7;
                    break;
                case cSB1TAmount7:
                    sPropertyValue = this.SB1TAmount7.ToString();
                    break;
                case cSB1TUnit7:
                    sPropertyValue = this.SB1TUnit7.ToString();
                    break;
                case cSB1TD1Amount7:
                    sPropertyValue = this.SB1TD1Amount7.ToString();
                    break;
                case cSB1TD1Unit7:
                    sPropertyValue = this.SB1TD1Unit7.ToString();
                    break;
                case cSB1TD2Amount7:
                    sPropertyValue = this.SB1TD2Amount7.ToString();
                    break;
                case cSB1TD2Unit7:
                    sPropertyValue = this.SB1TD2Unit7.ToString();
                    break;
                case cSB1MathResult7:
                    sPropertyValue = this.SB1MathResult7.ToString();
                    break;
                case cSB1MathSubType7:
                    sPropertyValue = this.SB1MathSubType7.ToString();
                    break;
                case cSB1TMAmount7:
                    sPropertyValue = this.SB1TMAmount7.ToString();
                    break;
                case cSB1TMUnit7:
                    sPropertyValue = this.SB1TMUnit7.ToString();
                    break;
                case cSB1TLAmount7:
                    sPropertyValue = this.SB1TLAmount7.ToString();
                    break;
                case cSB1TLUnit7:
                    sPropertyValue = this.SB1TLUnit7.ToString();
                    break;
                case cSB1TUAmount7:
                    sPropertyValue = this.SB1TUAmount7.ToString();
                    break;
                case cSB1TUUnit7:
                    sPropertyValue = this.SB1TUUnit7.ToString();
                    break;
                case cSB1MathOperator7:
                    sPropertyValue = this.SB1MathOperator7.ToString();
                    break;
                case cSB1MathExpression7:
                    sPropertyValue = this.SB1MathExpression7.ToString();
                    break;
                case cSB1BaseIO7:
                    sPropertyValue = this.SB1BaseIO7.ToString();
                    break;
                case cSB1Date7:
                    sPropertyValue = this.SB1Date7.ToString();
                    break;
                case cSB1MathType7:
                    sPropertyValue = this.SB1MathType7;
                    break;
                case cSB11Amount7:
                    sPropertyValue = this.SB11Amount7.ToString();
                    break;
                case cSB11Unit7:
                    sPropertyValue = this.SB11Unit7.ToString();
                    break;
                case cSB12Amount7:
                    sPropertyValue = this.SB12Amount7.ToString();
                    break;
                case cSB12Unit7:
                    sPropertyValue = this.SB12Unit7;
                    break;
                case cSB15Amount7:
                    sPropertyValue = this.SB15Amount7.ToString();
                    break;
                case cSB15Unit7:
                    sPropertyValue = this.SB15Unit7.ToString();
                    break;
                case cSB13Amount7:
                    sPropertyValue = this.SB13Amount7.ToString();
                    break;
                case cSB13Unit7:
                    sPropertyValue = this.SB13Unit7;
                    break;
                case cSB14Amount7:
                    sPropertyValue = this.SB14Amount7.ToString();
                    break;
                case cSB14Unit7:
                    sPropertyValue = this.SB14Unit7;
                    break;
                case cSB1Description8:
                    sPropertyValue = this.SB1Description8;
                    break;
                case cSB1URL8:
                    sPropertyValue = this.SB1URL8;
                    break;
                case cSB1Name8:
                    sPropertyValue = this.SB1Name8;
                    break;
                case cSB1Label8:
                    sPropertyValue = this.SB1Label8;
                    break;
                case cSB1Type8:
                    sPropertyValue = this.SB1Type8;
                    break;
                case cSB1RelLabel8:
                    sPropertyValue = this.SB1RelLabel8;
                    break;
                case cSB1TAmount8:
                    sPropertyValue = this.SB1TAmount8.ToString();
                    break;
                case cSB1TUnit8:
                    sPropertyValue = this.SB1TUnit8.ToString();
                    break;
                case cSB1TD1Amount8:
                    sPropertyValue = this.SB1TD1Amount8.ToString();
                    break;
                case cSB1TD1Unit8:
                    sPropertyValue = this.SB1TD1Unit8.ToString();
                    break;
                case cSB1TD2Amount8:
                    sPropertyValue = this.SB1TD2Amount8.ToString();
                    break;
                case cSB1TD2Unit8:
                    sPropertyValue = this.SB1TD2Unit8.ToString();
                    break;
                case cSB1MathResult8:
                    sPropertyValue = this.SB1MathResult8.ToString();
                    break;
                case cSB1MathSubType8:
                    sPropertyValue = this.SB1MathSubType8.ToString();
                    break;
                case cSB1TMAmount8:
                    sPropertyValue = this.SB1TMAmount8.ToString();
                    break;
                case cSB1TMUnit8:
                    sPropertyValue = this.SB1TMUnit8.ToString();
                    break;
                case cSB1TLAmount8:
                    sPropertyValue = this.SB1TLAmount8.ToString();
                    break;
                case cSB1TLUnit8:
                    sPropertyValue = this.SB1TLUnit8.ToString();
                    break;
                case cSB1TUAmount8:
                    sPropertyValue = this.SB1TUAmount8.ToString();
                    break;
                case cSB1TUUnit8:
                    sPropertyValue = this.SB1TUUnit8.ToString();
                    break;
                case cSB1MathOperator8:
                    sPropertyValue = this.SB1MathOperator8.ToString();
                    break;
                case cSB1MathExpression8:
                    sPropertyValue = this.SB1MathExpression8.ToString();
                    break;
                case cSB1BaseIO8:
                    sPropertyValue = this.SB1BaseIO8.ToString();
                    break;
                case cSB1Date8:
                    sPropertyValue = this.SB1Date8.ToString();
                    break;
                case cSB1MathType8:
                    sPropertyValue = this.SB1MathType8;
                    break;
                case cSB11Amount8:
                    sPropertyValue = this.SB11Amount8.ToString();
                    break;
                case cSB11Unit8:
                    sPropertyValue = this.SB11Unit8.ToString();
                    break;
                case cSB12Amount8:
                    sPropertyValue = this.SB12Amount8.ToString();
                    break;
                case cSB12Unit8:
                    sPropertyValue = this.SB12Unit8;
                    break;
                case cSB15Amount8:
                    sPropertyValue = this.SB15Amount8.ToString();
                    break;
                case cSB15Unit8:
                    sPropertyValue = this.SB15Unit8.ToString();
                    break;
                case cSB13Amount8:
                    sPropertyValue = this.SB13Amount8.ToString();
                    break;
                case cSB13Unit8:
                    sPropertyValue = this.SB13Unit8;
                    break;
                case cSB14Amount8:
                    sPropertyValue = this.SB14Amount8.ToString();
                    break;
                case cSB14Unit8:
                    sPropertyValue = this.SB14Unit8;
                    break;
                case cSB1Description9:
                    sPropertyValue = this.SB1Description9;
                    break;
                case cSB1URL9:
                    sPropertyValue = this.SB1URL9;
                    break;
                case cSB1Name9:
                    sPropertyValue = this.SB1Name9;
                    break;
                case cSB1Label9:
                    sPropertyValue = this.SB1Label9;
                    break;
                case cSB1Type9:
                    sPropertyValue = this.SB1Type9;
                    break;
                case cSB1RelLabel9:
                    sPropertyValue = this.SB1RelLabel9;
                    break;
                case cSB1TAmount9:
                    sPropertyValue = this.SB1TAmount9.ToString();
                    break;
                case cSB1TUnit9:
                    sPropertyValue = this.SB1TUnit9.ToString();
                    break;
                case cSB1TD1Amount9:
                    sPropertyValue = this.SB1TD1Amount9.ToString();
                    break;
                case cSB1TD1Unit9:
                    sPropertyValue = this.SB1TD1Unit9.ToString();
                    break;
                case cSB1TD2Amount9:
                    sPropertyValue = this.SB1TD2Amount9.ToString();
                    break;
                case cSB1TD2Unit9:
                    sPropertyValue = this.SB1TD2Unit9.ToString();
                    break;
                case cSB1MathResult9:
                    sPropertyValue = this.SB1MathResult9.ToString();
                    break;
                case cSB1MathSubType9:
                    sPropertyValue = this.SB1MathSubType9.ToString();
                    break;
                case cSB1TMAmount9:
                    sPropertyValue = this.SB1TMAmount9.ToString();
                    break;
                case cSB1TMUnit9:
                    sPropertyValue = this.SB1TMUnit9.ToString();
                    break;
                case cSB1TLAmount9:
                    sPropertyValue = this.SB1TLAmount9.ToString();
                    break;
                case cSB1TLUnit9:
                    sPropertyValue = this.SB1TLUnit9.ToString();
                    break;
                case cSB1TUAmount9:
                    sPropertyValue = this.SB1TUAmount9.ToString();
                    break;
                case cSB1TUUnit9:
                    sPropertyValue = this.SB1TUUnit9.ToString();
                    break;
                case cSB1MathOperator9:
                    sPropertyValue = this.SB1MathOperator9.ToString();
                    break;
                case cSB1MathExpression9:
                    sPropertyValue = this.SB1MathExpression9.ToString();
                    break;
                case cSB1BaseIO9:
                    sPropertyValue = this.SB1BaseIO9.ToString();
                    break;
                case cSB1Date9:
                    sPropertyValue = this.SB1Date9.ToString();
                    break;
                case cSB1MathType9:
                    sPropertyValue = this.SB1MathType9;
                    break;
                case cSB11Amount9:
                    sPropertyValue = this.SB11Amount9.ToString();
                    break;
                case cSB11Unit9:
                    sPropertyValue = this.SB11Unit9.ToString();
                    break;
                case cSB12Amount9:
                    sPropertyValue = this.SB12Amount9.ToString();
                    break;
                case cSB12Unit9:
                    sPropertyValue = this.SB12Unit9;
                    break;
                case cSB15Amount9:
                    sPropertyValue = this.SB15Amount9.ToString();
                    break;
                case cSB15Unit9:
                    sPropertyValue = this.SB15Unit9.ToString();
                    break;
                case cSB13Amount9:
                    sPropertyValue = this.SB13Amount9.ToString();
                    break;
                case cSB13Unit9:
                    sPropertyValue = this.SB13Unit9;
                    break;
                case cSB14Amount9:
                    sPropertyValue = this.SB14Amount9.ToString();
                    break;
                case cSB14Unit9:
                    sPropertyValue = this.SB14Unit9;
                    break;
                case cSB1Description10:
                    sPropertyValue = this.SB1Description10;
                    break;
                case cSB1URL10:
                    sPropertyValue = this.SB1URL10;
                    break;
                case cSB1Name10:
                    sPropertyValue = this.SB1Name10;
                    break;
                case cSB1Label10:
                    sPropertyValue = this.SB1Label10;
                    break;
                case cSB1Type10:
                    sPropertyValue = this.SB1Type10;
                    break;
                case cSB1RelLabel10:
                    sPropertyValue = this.SB1RelLabel10;
                    break;
                case cSB1TAmount10:
                    sPropertyValue = this.SB1TAmount10.ToString();
                    break;
                case cSB1TUnit10:
                    sPropertyValue = this.SB1TUnit10.ToString();
                    break;
                case cSB1TD1Amount10:
                    sPropertyValue = this.SB1TD1Amount10.ToString();
                    break;
                case cSB1TD1Unit10:
                    sPropertyValue = this.SB1TD1Unit10.ToString();
                    break;
                case cSB1TD2Amount10:
                    sPropertyValue = this.SB1TD2Amount10.ToString();
                    break;
                case cSB1TD2Unit10:
                    sPropertyValue = this.SB1TD2Unit10.ToString();
                    break;
                case cSB1MathResult10:
                    sPropertyValue = this.SB1MathResult10.ToString();
                    break;
                case cSB1MathSubType10:
                    sPropertyValue = this.SB1MathSubType10.ToString();
                    break;
                case cSB1TMAmount10:
                    sPropertyValue = this.SB1TMAmount10.ToString();
                    break;
                case cSB1TMUnit10:
                    sPropertyValue = this.SB1TMUnit10.ToString();
                    break;
                case cSB1TLAmount10:
                    sPropertyValue = this.SB1TLAmount10.ToString();
                    break;
                case cSB1TLUnit10:
                    sPropertyValue = this.SB1TLUnit10.ToString();
                    break;
                case cSB1TUAmount10:
                    sPropertyValue = this.SB1TUAmount10.ToString();
                    break;
                case cSB1TUUnit10:
                    sPropertyValue = this.SB1TUUnit10.ToString();
                    break;
                case cSB1MathOperator10:
                    sPropertyValue = this.SB1MathOperator10.ToString();
                    break;
                case cSB1MathExpression10:
                    sPropertyValue = this.SB1MathExpression10.ToString();
                    break;
                case cSB1BaseIO10:
                    sPropertyValue = this.SB1BaseIO10.ToString();
                    break;
                case cSB1Date10:
                    sPropertyValue = this.SB1Date10.ToString();
                    break;
                case cSB1MathType10:
                    sPropertyValue = this.SB1MathType10;
                    break;
                case cSB11Amount10:
                    sPropertyValue = this.SB11Amount10.ToString();
                    break;
                case cSB11Unit10:
                    sPropertyValue = this.SB11Unit10.ToString();
                    break;
                case cSB12Amount10:
                    sPropertyValue = this.SB12Amount10.ToString();
                    break;
                case cSB12Unit10:
                    sPropertyValue = this.SB12Unit10;
                    break;
                case cSB15Amount10:
                    sPropertyValue = this.SB15Amount10.ToString();
                    break;
                case cSB15Unit10:
                    sPropertyValue = this.SB15Unit10.ToString();
                    break;
                case cSB13Amount10:
                    sPropertyValue = this.SB13Amount10.ToString();
                    break;
                case cSB13Unit10:
                    sPropertyValue = this.SB13Unit10;
                    break;
                case cSB14Amount10:
                    sPropertyValue = this.SB14Amount10.ToString();
                    break;
                case cSB14Unit10:
                    sPropertyValue = this.SB14Unit10;
                    break;
                case cSB1Description11:
                    sPropertyValue = this.SB1Description11;
                    break;
                case cSB1URL11:
                    sPropertyValue = this.SB1URL11;
                    break;
                case cSB1Name11:
                    sPropertyValue = this.SB1Name11;
                    break;
                case cSB1Label11:
                    sPropertyValue = this.SB1Label11;
                    break;
                case cSB1Type11:
                    sPropertyValue = this.SB1Type11;
                    break;
                case cSB1RelLabel11:
                    sPropertyValue = this.SB1RelLabel11;
                    break;
                case cSB1TAmount11:
                    sPropertyValue = this.SB1TAmount11.ToString();
                    break;
                case cSB1TUnit11:
                    sPropertyValue = this.SB1TUnit11.ToString();
                    break;
                case cSB1TD1Amount11:
                    sPropertyValue = this.SB1TD1Amount11.ToString();
                    break;
                case cSB1TD1Unit11:
                    sPropertyValue = this.SB1TD1Unit11.ToString();
                    break;
                case cSB1TD2Amount11:
                    sPropertyValue = this.SB1TD2Amount11.ToString();
                    break;
                case cSB1TD2Unit11:
                    sPropertyValue = this.SB1TD2Unit11.ToString();
                    break;
                case cSB1MathResult11:
                    sPropertyValue = this.SB1MathResult11.ToString();
                    break;
                case cSB1MathSubType11:
                    sPropertyValue = this.SB1MathSubType11.ToString();
                    break;
                case cSB1TMAmount11:
                    sPropertyValue = this.SB1TMAmount11.ToString();
                    break;
                case cSB1TMUnit11:
                    sPropertyValue = this.SB1TMUnit11.ToString();
                    break;
                case cSB1TLAmount11:
                    sPropertyValue = this.SB1TLAmount11.ToString();
                    break;
                case cSB1TLUnit11:
                    sPropertyValue = this.SB1TLUnit11.ToString();
                    break;
                case cSB1TUAmount11:
                    sPropertyValue = this.SB1TUAmount11.ToString();
                    break;
                case cSB1TUUnit11:
                    sPropertyValue = this.SB1TUUnit11.ToString();
                    break;
                case cSB1MathOperator11:
                    sPropertyValue = this.SB1MathOperator11.ToString();
                    break;
                case cSB1MathExpression11:
                    sPropertyValue = this.SB1MathExpression11.ToString();
                    break;
                case cSB1BaseIO11:
                    sPropertyValue = this.SB1BaseIO11.ToString();
                    break;
                case cSB1Date11:
                    sPropertyValue = this.SB1Date11.ToString();
                    break;
                case cSB1MathType11:
                    sPropertyValue = this.SB1MathType11;
                    break;
                case cSB11Amount11:
                    sPropertyValue = this.SB11Amount11.ToString();
                    break;
                case cSB11Unit11:
                    sPropertyValue = this.SB11Unit11.ToString();
                    break;
                case cSB12Amount11:
                    sPropertyValue = this.SB12Amount11.ToString();
                    break;
                case cSB12Unit11:
                    sPropertyValue = this.SB12Unit11;
                    break;
                case cSB15Amount11:
                    sPropertyValue = this.SB15Amount11.ToString();
                    break;
                case cSB15Unit11:
                    sPropertyValue = this.SB15Unit11.ToString();
                    break;
                case cSB13Amount11:
                    sPropertyValue = this.SB13Amount11.ToString();
                    break;
                case cSB13Unit11:
                    sPropertyValue = this.SB13Unit11;
                    break;
                case cSB14Amount11:
                    sPropertyValue = this.SB14Amount11.ToString();
                    break;
                case cSB14Unit11:
                    sPropertyValue = this.SB14Unit11;
                    break;
                case cSB1Description12:
                    sPropertyValue = this.SB1Description12;
                    break;
                case cSB1URL12:
                    sPropertyValue = this.SB1URL12;
                    break;
                case cSB1Name12:
                    sPropertyValue = this.SB1Name12;
                    break;
                case cSB1Label12:
                    sPropertyValue = this.SB1Label12;
                    break;
                case cSB1Type12:
                    sPropertyValue = this.SB1Type12;
                    break;
                case cSB1RelLabel12:
                    sPropertyValue = this.SB1RelLabel12;
                    break;
                case cSB1TAmount12:
                    sPropertyValue = this.SB1TAmount12.ToString();
                    break;
                case cSB1TUnit12:
                    sPropertyValue = this.SB1TUnit12.ToString();
                    break;
                case cSB1TD1Amount12:
                    sPropertyValue = this.SB1TD1Amount12.ToString();
                    break;
                case cSB1TD1Unit12:
                    sPropertyValue = this.SB1TD1Unit12.ToString();
                    break;
                case cSB1TD2Amount12:
                    sPropertyValue = this.SB1TD2Amount12.ToString();
                    break;
                case cSB1TD2Unit12:
                    sPropertyValue = this.SB1TD2Unit12.ToString();
                    break;
                case cSB1MathResult12:
                    sPropertyValue = this.SB1MathResult12.ToString();
                    break;
                case cSB1MathSubType12:
                    sPropertyValue = this.SB1MathSubType12.ToString();
                    break;
                case cSB1TMAmount12:
                    sPropertyValue = this.SB1TMAmount12.ToString();
                    break;
                case cSB1TMUnit12:
                    sPropertyValue = this.SB1TMUnit12.ToString();
                    break;
                case cSB1TLAmount12:
                    sPropertyValue = this.SB1TLAmount12.ToString();
                    break;
                case cSB1TLUnit12:
                    sPropertyValue = this.SB1TLUnit12.ToString();
                    break;
                case cSB1TUAmount12:
                    sPropertyValue = this.SB1TUAmount12.ToString();
                    break;
                case cSB1TUUnit12:
                    sPropertyValue = this.SB1TUUnit12.ToString();
                    break;
                case cSB1MathOperator12:
                    sPropertyValue = this.SB1MathOperator12.ToString();
                    break;
                case cSB1MathExpression12:
                    sPropertyValue = this.SB1MathExpression12.ToString();
                    break;
                case cSB1BaseIO12:
                    sPropertyValue = this.SB1BaseIO12.ToString();
                    break;
                case cSB1Date12:
                    sPropertyValue = this.SB1Date12.ToString();
                    break;
                case cSB1MathType12:
                    sPropertyValue = this.SB1MathType12;
                    break;
                case cSB11Amount12:
                    sPropertyValue = this.SB11Amount12.ToString();
                    break;
                case cSB11Unit12:
                    sPropertyValue = this.SB11Unit12.ToString();
                    break;
                case cSB12Amount12:
                    sPropertyValue = this.SB12Amount12.ToString();
                    break;
                case cSB12Unit12:
                    sPropertyValue = this.SB12Unit12;
                    break;
                case cSB15Amount12:
                    sPropertyValue = this.SB15Amount12.ToString();
                    break;
                case cSB15Unit12:
                    sPropertyValue = this.SB15Unit12.ToString();
                    break;
                case cSB13Amount12:
                    sPropertyValue = this.SB13Amount12.ToString();
                    break;
                case cSB13Unit12:
                    sPropertyValue = this.SB13Unit12;
                    break;
                case cSB14Amount12:
                    sPropertyValue = this.SB14Amount12.ToString();
                    break;
                case cSB14Unit12:
                    sPropertyValue = this.SB14Unit12;
                    break;
                case cSB1Description13:
                    sPropertyValue = this.SB1Description13;
                    break;
                case cSB1URL13:
                    sPropertyValue = this.SB1URL13;
                    break;
                case cSB1Name13:
                    sPropertyValue = this.SB1Name13;
                    break;
                case cSB1Label13:
                    sPropertyValue = this.SB1Label13;
                    break;
                case cSB1Type13:
                    sPropertyValue = this.SB1Type13;
                    break;
                case cSB1RelLabel13:
                    sPropertyValue = this.SB1RelLabel13;
                    break;
                case cSB1TAmount13:
                    sPropertyValue = this.SB1TAmount13.ToString();
                    break;
                case cSB1TUnit13:
                    sPropertyValue = this.SB1TUnit13.ToString();
                    break;
                case cSB1TD1Amount13:
                    sPropertyValue = this.SB1TD1Amount13.ToString();
                    break;
                case cSB1TD1Unit13:
                    sPropertyValue = this.SB1TD1Unit13.ToString();
                    break;
                case cSB1TD2Amount13:
                    sPropertyValue = this.SB1TD2Amount13.ToString();
                    break;
                case cSB1TD2Unit13:
                    sPropertyValue = this.SB1TD2Unit13.ToString();
                    break;
                case cSB1MathResult13:
                    sPropertyValue = this.SB1MathResult13.ToString();
                    break;
                case cSB1MathSubType13:
                    sPropertyValue = this.SB1MathSubType13.ToString();
                    break;
                case cSB1TMAmount13:
                    sPropertyValue = this.SB1TMAmount13.ToString();
                    break;
                case cSB1TMUnit13:
                    sPropertyValue = this.SB1TMUnit13.ToString();
                    break;
                case cSB1TLAmount13:
                    sPropertyValue = this.SB1TLAmount13.ToString();
                    break;
                case cSB1TLUnit13:
                    sPropertyValue = this.SB1TLUnit13.ToString();
                    break;
                case cSB1TUAmount13:
                    sPropertyValue = this.SB1TUAmount13.ToString();
                    break;
                case cSB1TUUnit13:
                    sPropertyValue = this.SB1TUUnit13.ToString();
                    break;
                case cSB1MathOperator13:
                    sPropertyValue = this.SB1MathOperator13.ToString();
                    break;
                case cSB1MathExpression13:
                    sPropertyValue = this.SB1MathExpression13.ToString();
                    break;
                case cSB1BaseIO13:
                    sPropertyValue = this.SB1BaseIO13.ToString();
                    break;
                case cSB1Date13:
                    sPropertyValue = this.SB1Date13.ToString();
                    break;
                case cSB1MathType13:
                    sPropertyValue = this.SB1MathType13;
                    break;
                case cSB11Amount13:
                    sPropertyValue = this.SB11Amount13.ToString();
                    break;
                case cSB11Unit13:
                    sPropertyValue = this.SB11Unit13.ToString();
                    break;
                case cSB12Amount13:
                    sPropertyValue = this.SB12Amount13.ToString();
                    break;
                case cSB12Unit13:
                    sPropertyValue = this.SB12Unit13;
                    break;
                case cSB15Amount13:
                    sPropertyValue = this.SB15Amount13.ToString();
                    break;
                case cSB15Unit13:
                    sPropertyValue = this.SB15Unit13.ToString();
                    break;
                case cSB13Amount13:
                    sPropertyValue = this.SB13Amount13.ToString();
                    break;
                case cSB13Unit13:
                    sPropertyValue = this.SB13Unit13;
                    break;
                case cSB14Amount13:
                    sPropertyValue = this.SB14Amount13.ToString();
                    break;
                case cSB14Unit13:
                    sPropertyValue = this.SB14Unit13;
                    break;
                case cSB1Description14:
                    sPropertyValue = this.SB1Description14;
                    break;
                case cSB1URL14:
                    sPropertyValue = this.SB1URL14;
                    break;
                case cSB1Name14:
                    sPropertyValue = this.SB1Name14;
                    break;
                case cSB1Label14:
                    sPropertyValue = this.SB1Label14;
                    break;
                case cSB1Type14:
                    sPropertyValue = this.SB1Type14;
                    break;
                case cSB1RelLabel14:
                    sPropertyValue = this.SB1RelLabel14;
                    break;
                case cSB1TAmount14:
                    sPropertyValue = this.SB1TAmount14.ToString();
                    break;
                case cSB1TUnit14:
                    sPropertyValue = this.SB1TUnit14.ToString();
                    break;
                case cSB1TD1Amount14:
                    sPropertyValue = this.SB1TD1Amount14.ToString();
                    break;
                case cSB1TD1Unit14:
                    sPropertyValue = this.SB1TD1Unit14.ToString();
                    break;
                case cSB1TD2Amount14:
                    sPropertyValue = this.SB1TD2Amount14.ToString();
                    break;
                case cSB1TD2Unit14:
                    sPropertyValue = this.SB1TD2Unit14.ToString();
                    break;
                case cSB1MathResult14:
                    sPropertyValue = this.SB1MathResult14.ToString();
                    break;
                case cSB1MathSubType14:
                    sPropertyValue = this.SB1MathSubType14.ToString();
                    break;
                case cSB1TMAmount14:
                    sPropertyValue = this.SB1TMAmount14.ToString();
                    break;
                case cSB1TMUnit14:
                    sPropertyValue = this.SB1TMUnit14.ToString();
                    break;
                case cSB1TLAmount14:
                    sPropertyValue = this.SB1TLAmount14.ToString();
                    break;
                case cSB1TLUnit14:
                    sPropertyValue = this.SB1TLUnit14.ToString();
                    break;
                case cSB1TUAmount14:
                    sPropertyValue = this.SB1TUAmount14.ToString();
                    break;
                case cSB1TUUnit14:
                    sPropertyValue = this.SB1TUUnit14.ToString();
                    break;
                case cSB1MathOperator14:
                    sPropertyValue = this.SB1MathOperator14.ToString();
                    break;
                case cSB1MathExpression14:
                    sPropertyValue = this.SB1MathExpression14.ToString();
                    break;
                case cSB1BaseIO14:
                    sPropertyValue = this.SB1BaseIO14.ToString();
                    break;
                case cSB1Date14:
                    sPropertyValue = this.SB1Date14.ToString();
                    break;
                case cSB1MathType14:
                    sPropertyValue = this.SB1MathType14;
                    break;
                case cSB11Amount14:
                    sPropertyValue = this.SB11Amount14.ToString();
                    break;
                case cSB11Unit14:
                    sPropertyValue = this.SB11Unit14.ToString();
                    break;
                case cSB12Amount14:
                    sPropertyValue = this.SB12Amount14.ToString();
                    break;
                case cSB12Unit14:
                    sPropertyValue = this.SB12Unit14;
                    break;
                case cSB15Amount14:
                    sPropertyValue = this.SB15Amount14.ToString();
                    break;
                case cSB15Unit14:
                    sPropertyValue = this.SB15Unit14.ToString();
                    break;
                case cSB13Amount14:
                    sPropertyValue = this.SB13Amount14.ToString();
                    break;
                case cSB13Unit14:
                    sPropertyValue = this.SB13Unit14;
                    break;
                case cSB14Amount14:
                    sPropertyValue = this.SB14Amount14.ToString();
                    break;
                case cSB14Unit14:
                    sPropertyValue = this.SB14Unit14;
                    break;
                case cSB1Description15:
                    sPropertyValue = this.SB1Description15;
                    break;
                case cSB1URL15:
                    sPropertyValue = this.SB1URL15;
                    break;
                case cSB1Name15:
                    sPropertyValue = this.SB1Name15;
                    break;
                case cSB1Label15:
                    sPropertyValue = this.SB1Label15;
                    break;
                case cSB1Type15:
                    sPropertyValue = this.SB1Type15;
                    break;
                case cSB1RelLabel15:
                    sPropertyValue = this.SB1RelLabel15;
                    break;
                case cSB1TAmount15:
                    sPropertyValue = this.SB1TAmount15.ToString();
                    break;
                case cSB1TUnit15:
                    sPropertyValue = this.SB1TUnit15.ToString();
                    break;
                case cSB1TD1Amount15:
                    sPropertyValue = this.SB1TD1Amount15.ToString();
                    break;
                case cSB1TD1Unit15:
                    sPropertyValue = this.SB1TD1Unit15.ToString();
                    break;
                case cSB1TD2Amount15:
                    sPropertyValue = this.SB1TD2Amount15.ToString();
                    break;
                case cSB1TD2Unit15:
                    sPropertyValue = this.SB1TD2Unit15.ToString();
                    break;
                case cSB1MathResult15:
                    sPropertyValue = this.SB1MathResult15.ToString();
                    break;
                case cSB1MathSubType15:
                    sPropertyValue = this.SB1MathSubType15.ToString();
                    break;
                case cSB1TMAmount15:
                    sPropertyValue = this.SB1TMAmount15.ToString();
                    break;
                case cSB1TMUnit15:
                    sPropertyValue = this.SB1TMUnit15.ToString();
                    break;
                case cSB1TLAmount15:
                    sPropertyValue = this.SB1TLAmount15.ToString();
                    break;
                case cSB1TLUnit15:
                    sPropertyValue = this.SB1TLUnit15.ToString();
                    break;
                case cSB1TUAmount15:
                    sPropertyValue = this.SB1TUAmount15.ToString();
                    break;
                case cSB1TUUnit15:
                    sPropertyValue = this.SB1TUUnit15.ToString();
                    break;
                case cSB1MathOperator15:
                    sPropertyValue = this.SB1MathOperator15.ToString();
                    break;
                case cSB1MathExpression15:
                    sPropertyValue = this.SB1MathExpression15.ToString();
                    break;
                case cSB1BaseIO15:
                    sPropertyValue = this.SB1BaseIO15.ToString();
                    break;
                case cSB1Date15:
                    sPropertyValue = this.SB1Date15.ToString();
                    break;
                case cSB1MathType15:
                    sPropertyValue = this.SB1MathType15;
                    break;
                case cSB11Amount15:
                    sPropertyValue = this.SB11Amount15.ToString();
                    break;
                case cSB11Unit15:
                    sPropertyValue = this.SB11Unit15.ToString();
                    break;
                case cSB12Amount15:
                    sPropertyValue = this.SB12Amount15.ToString();
                    break;
                case cSB12Unit15:
                    sPropertyValue = this.SB12Unit15;
                    break;
                case cSB15Amount15:
                    sPropertyValue = this.SB15Amount15.ToString();
                    break;
                case cSB15Unit15:
                    sPropertyValue = this.SB15Unit15.ToString();
                    break;
                case cSB13Amount15:
                    sPropertyValue = this.SB13Amount15.ToString();
                    break;
                case cSB13Unit15:
                    sPropertyValue = this.SB13Unit15;
                    break;
                case cSB14Amount15:
                    sPropertyValue = this.SB14Amount15.ToString();
                    break;
                case cSB14Unit15:
                    sPropertyValue = this.SB14Unit15;
                    break;
                case cSB1Description16:
                    sPropertyValue = this.SB1Description16;
                    break;
                case cSB1URL16:
                    sPropertyValue = this.SB1URL16;
                    break;
                case cSB1Name16:
                    sPropertyValue = this.SB1Name16;
                    break;
                case cSB1Label16:
                    sPropertyValue = this.SB1Label16;
                    break;
                case cSB1Type16:
                    sPropertyValue = this.SB1Type16;
                    break;
                case cSB1RelLabel16:
                    sPropertyValue = this.SB1RelLabel16;
                    break;
                case cSB1TAmount16:
                    sPropertyValue = this.SB1TAmount16.ToString();
                    break;
                case cSB1TUnit16:
                    sPropertyValue = this.SB1TUnit16.ToString();
                    break;
                case cSB1TD1Amount16:
                    sPropertyValue = this.SB1TD1Amount16.ToString();
                    break;
                case cSB1TD1Unit16:
                    sPropertyValue = this.SB1TD1Unit16.ToString();
                    break;
                case cSB1TD2Amount16:
                    sPropertyValue = this.SB1TD2Amount16.ToString();
                    break;
                case cSB1TD2Unit16:
                    sPropertyValue = this.SB1TD2Unit16.ToString();
                    break;
                case cSB1MathResult16:
                    sPropertyValue = this.SB1MathResult16.ToString();
                    break;
                case cSB1MathSubType16:
                    sPropertyValue = this.SB1MathSubType16.ToString();
                    break;
                case cSB1TMAmount16:
                    sPropertyValue = this.SB1TMAmount16.ToString();
                    break;
                case cSB1TMUnit16:
                    sPropertyValue = this.SB1TMUnit16.ToString();
                    break;
                case cSB1TLAmount16:
                    sPropertyValue = this.SB1TLAmount16.ToString();
                    break;
                case cSB1TLUnit16:
                    sPropertyValue = this.SB1TLUnit16.ToString();
                    break;
                case cSB1TUAmount16:
                    sPropertyValue = this.SB1TUAmount16.ToString();
                    break;
                case cSB1TUUnit16:
                    sPropertyValue = this.SB1TUUnit16.ToString();
                    break;
                case cSB1MathOperator16:
                    sPropertyValue = this.SB1MathOperator16.ToString();
                    break;
                case cSB1MathExpression16:
                    sPropertyValue = this.SB1MathExpression16.ToString();
                    break;
                case cSB1BaseIO16:
                    sPropertyValue = this.SB1BaseIO16.ToString();
                    break;
                case cSB1Date16:
                    sPropertyValue = this.SB1Date16.ToString();
                    break;
                case cSB1MathType16:
                    sPropertyValue = this.SB1MathType16;
                    break;
                case cSB11Amount16:
                    sPropertyValue = this.SB11Amount16.ToString();
                    break;
                case cSB11Unit16:
                    sPropertyValue = this.SB11Unit16.ToString();
                    break;
                case cSB12Amount16:
                    sPropertyValue = this.SB12Amount16.ToString();
                    break;
                case cSB12Unit16:
                    sPropertyValue = this.SB12Unit16;
                    break;
                case cSB15Amount16:
                    sPropertyValue = this.SB15Amount16.ToString();
                    break;
                case cSB15Unit16:
                    sPropertyValue = this.SB15Unit16.ToString();
                    break;
                case cSB13Amount16:
                    sPropertyValue = this.SB13Amount16.ToString();
                    break;
                case cSB13Unit16:
                    sPropertyValue = this.SB13Unit16;
                    break;
                case cSB14Amount16:
                    sPropertyValue = this.SB14Amount16.ToString();
                    break;
                case cSB14Unit16:
                    sPropertyValue = this.SB14Unit16;
                    break;
                case cSB1Description17:
                    sPropertyValue = this.SB1Description17;
                    break;
                case cSB1URL17:
                    sPropertyValue = this.SB1URL17;
                    break;
                case cSB1Name17:
                    sPropertyValue = this.SB1Name17;
                    break;
                case cSB1Label17:
                    sPropertyValue = this.SB1Label17;
                    break;
                case cSB1Type17:
                    sPropertyValue = this.SB1Type17;
                    break;
                case cSB1RelLabel17:
                    sPropertyValue = this.SB1RelLabel17;
                    break;
                case cSB1TAmount17:
                    sPropertyValue = this.SB1TAmount17.ToString();
                    break;
                case cSB1TUnit17:
                    sPropertyValue = this.SB1TUnit17.ToString();
                    break;
                case cSB1TD1Amount17:
                    sPropertyValue = this.SB1TD1Amount17.ToString();
                    break;
                case cSB1TD1Unit17:
                    sPropertyValue = this.SB1TD1Unit17.ToString();
                    break;
                case cSB1TD2Amount17:
                    sPropertyValue = this.SB1TD2Amount17.ToString();
                    break;
                case cSB1TD2Unit17:
                    sPropertyValue = this.SB1TD2Unit17.ToString();
                    break;
                case cSB1MathResult17:
                    sPropertyValue = this.SB1MathResult17.ToString();
                    break;
                case cSB1MathSubType17:
                    sPropertyValue = this.SB1MathSubType17.ToString();
                    break;
                case cSB1TMAmount17:
                    sPropertyValue = this.SB1TMAmount17.ToString();
                    break;
                case cSB1TMUnit17:
                    sPropertyValue = this.SB1TMUnit17.ToString();
                    break;
                case cSB1TLAmount17:
                    sPropertyValue = this.SB1TLAmount17.ToString();
                    break;
                case cSB1TLUnit17:
                    sPropertyValue = this.SB1TLUnit17.ToString();
                    break;
                case cSB1TUAmount17:
                    sPropertyValue = this.SB1TUAmount17.ToString();
                    break;
                case cSB1TUUnit17:
                    sPropertyValue = this.SB1TUUnit17.ToString();
                    break;
                case cSB1MathOperator17:
                    sPropertyValue = this.SB1MathOperator17.ToString();
                    break;
                case cSB1MathExpression17:
                    sPropertyValue = this.SB1MathExpression17.ToString();
                    break;
                case cSB1BaseIO17:
                    sPropertyValue = this.SB1BaseIO17.ToString();
                    break;
                case cSB1Date17:
                    sPropertyValue = this.SB1Date17.ToString();
                    break;
                case cSB1MathType17:
                    sPropertyValue = this.SB1MathType17;
                    break;
                case cSB11Amount17:
                    sPropertyValue = this.SB11Amount17.ToString();
                    break;
                case cSB11Unit17:
                    sPropertyValue = this.SB11Unit17.ToString();
                    break;
                case cSB12Amount17:
                    sPropertyValue = this.SB12Amount17.ToString();
                    break;
                case cSB12Unit17:
                    sPropertyValue = this.SB12Unit17;
                    break;
                case cSB15Amount17:
                    sPropertyValue = this.SB15Amount17.ToString();
                    break;
                case cSB15Unit17:
                    sPropertyValue = this.SB15Unit17.ToString();
                    break;
                case cSB13Amount17:
                    sPropertyValue = this.SB13Amount17.ToString();
                    break;
                case cSB13Unit17:
                    sPropertyValue = this.SB13Unit17;
                    break;
                case cSB14Amount17:
                    sPropertyValue = this.SB14Amount17.ToString();
                    break;
                case cSB14Unit17:
                    sPropertyValue = this.SB14Unit17;
                    break;
                case cSB1Description18:
                    sPropertyValue = this.SB1Description18;
                    break;
                case cSB1URL18:
                    sPropertyValue = this.SB1URL18;
                    break;
                case cSB1Name18:
                    sPropertyValue = this.SB1Name18;
                    break;
                case cSB1Label18:
                    sPropertyValue = this.SB1Label18;
                    break;
                case cSB1Type18:
                    sPropertyValue = this.SB1Type18;
                    break;
                case cSB1RelLabel18:
                    sPropertyValue = this.SB1RelLabel18;
                    break;
                case cSB1TAmount18:
                    sPropertyValue = this.SB1TAmount18.ToString();
                    break;
                case cSB1TUnit18:
                    sPropertyValue = this.SB1TUnit18.ToString();
                    break;
                case cSB1TD1Amount18:
                    sPropertyValue = this.SB1TD1Amount18.ToString();
                    break;
                case cSB1TD1Unit18:
                    sPropertyValue = this.SB1TD1Unit18.ToString();
                    break;
                case cSB1TD2Amount18:
                    sPropertyValue = this.SB1TD2Amount18.ToString();
                    break;
                case cSB1TD2Unit18:
                    sPropertyValue = this.SB1TD2Unit18.ToString();
                    break;
                case cSB1MathResult18:
                    sPropertyValue = this.SB1MathResult18.ToString();
                    break;
                case cSB1MathSubType18:
                    sPropertyValue = this.SB1MathSubType18.ToString();
                    break;
                case cSB1TMAmount18:
                    sPropertyValue = this.SB1TMAmount18.ToString();
                    break;
                case cSB1TMUnit18:
                    sPropertyValue = this.SB1TMUnit18.ToString();
                    break;
                case cSB1TLAmount18:
                    sPropertyValue = this.SB1TLAmount18.ToString();
                    break;
                case cSB1TLUnit18:
                    sPropertyValue = this.SB1TLUnit18.ToString();
                    break;
                case cSB1TUAmount18:
                    sPropertyValue = this.SB1TUAmount18.ToString();
                    break;
                case cSB1TUUnit18:
                    sPropertyValue = this.SB1TUUnit18.ToString();
                    break;
                case cSB1MathOperator18:
                    sPropertyValue = this.SB1MathOperator18.ToString();
                    break;
                case cSB1MathExpression18:
                    sPropertyValue = this.SB1MathExpression18.ToString();
                    break;
                case cSB1BaseIO18:
                    sPropertyValue = this.SB1BaseIO18.ToString();
                    break;
                case cSB1Date18:
                    sPropertyValue = this.SB1Date18.ToString();
                    break;
                case cSB1MathType18:
                    sPropertyValue = this.SB1MathType18;
                    break;
                case cSB11Amount18:
                    sPropertyValue = this.SB11Amount18.ToString();
                    break;
                case cSB11Unit18:
                    sPropertyValue = this.SB11Unit18.ToString();
                    break;
                case cSB12Amount18:
                    sPropertyValue = this.SB12Amount18.ToString();
                    break;
                case cSB12Unit18:
                    sPropertyValue = this.SB12Unit18;
                    break;
                case cSB15Amount18:
                    sPropertyValue = this.SB15Amount18.ToString();
                    break;
                case cSB15Unit18:
                    sPropertyValue = this.SB15Unit18.ToString();
                    break;
                case cSB13Amount18:
                    sPropertyValue = this.SB13Amount18.ToString();
                    break;
                case cSB13Unit18:
                    sPropertyValue = this.SB13Unit18;
                    break;
                case cSB14Amount18:
                    sPropertyValue = this.SB14Amount18.ToString();
                    break;
                case cSB14Unit18:
                    sPropertyValue = this.SB14Unit18;
                    break;
                case cSB1Description19:
                    sPropertyValue = this.SB1Description19;
                    break;
                case cSB1URL19:
                    sPropertyValue = this.SB1URL19;
                    break;
                case cSB1Name19:
                    sPropertyValue = this.SB1Name19;
                    break;
                case cSB1Label19:
                    sPropertyValue = this.SB1Label19;
                    break;
                case cSB1Type19:
                    sPropertyValue = this.SB1Type19;
                    break;
                case cSB1RelLabel19:
                    sPropertyValue = this.SB1RelLabel19;
                    break;
                case cSB1TAmount19:
                    sPropertyValue = this.SB1TAmount19.ToString();
                    break;
                case cSB1TUnit19:
                    sPropertyValue = this.SB1TUnit19.ToString();
                    break;
                case cSB1TD1Amount19:
                    sPropertyValue = this.SB1TD1Amount19.ToString();
                    break;
                case cSB1TD1Unit19:
                    sPropertyValue = this.SB1TD1Unit19.ToString();
                    break;
                case cSB1TD2Amount19:
                    sPropertyValue = this.SB1TD2Amount19.ToString();
                    break;
                case cSB1TD2Unit19:
                    sPropertyValue = this.SB1TD2Unit19.ToString();
                    break;
                case cSB1MathResult19:
                    sPropertyValue = this.SB1MathResult19.ToString();
                    break;
                case cSB1MathSubType19:
                    sPropertyValue = this.SB1MathSubType19.ToString();
                    break;
                case cSB1TMAmount19:
                    sPropertyValue = this.SB1TMAmount19.ToString();
                    break;
                case cSB1TMUnit19:
                    sPropertyValue = this.SB1TMUnit19.ToString();
                    break;
                case cSB1TLAmount19:
                    sPropertyValue = this.SB1TLAmount19.ToString();
                    break;
                case cSB1TLUnit19:
                    sPropertyValue = this.SB1TLUnit19.ToString();
                    break;
                case cSB1TUAmount19:
                    sPropertyValue = this.SB1TUAmount19.ToString();
                    break;
                case cSB1TUUnit19:
                    sPropertyValue = this.SB1TUUnit19.ToString();
                    break;
                case cSB1MathOperator19:
                    sPropertyValue = this.SB1MathOperator19.ToString();
                    break;
                case cSB1MathExpression19:
                    sPropertyValue = this.SB1MathExpression19.ToString();
                    break;
                case cSB1BaseIO19:
                    sPropertyValue = this.SB1BaseIO19.ToString();
                    break;
                case cSB1Date19:
                    sPropertyValue = this.SB1Date19.ToString();
                    break;
                case cSB1MathType19:
                    sPropertyValue = this.SB1MathType19;
                    break;
                case cSB11Amount19:
                    sPropertyValue = this.SB11Amount19.ToString();
                    break;
                case cSB11Unit19:
                    sPropertyValue = this.SB11Unit19.ToString();
                    break;
                case cSB12Amount19:
                    sPropertyValue = this.SB12Amount19.ToString();
                    break;
                case cSB12Unit19:
                    sPropertyValue = this.SB12Unit19;
                    break;
                case cSB15Amount19:
                    sPropertyValue = this.SB15Amount19.ToString();
                    break;
                case cSB15Unit19:
                    sPropertyValue = this.SB15Unit19.ToString();
                    break;
                case cSB13Amount19:
                    sPropertyValue = this.SB13Amount19.ToString();
                    break;
                case cSB13Unit19:
                    sPropertyValue = this.SB13Unit19;
                    break;
                case cSB14Amount19:
                    sPropertyValue = this.SB14Amount19.ToString();
                    break;
                case cSB14Unit19:
                    sPropertyValue = this.SB14Unit19;
                    break;
                case cSB1Description20:
                    sPropertyValue = this.SB1Description20;
                    break;
                case cSB1URL20:
                    sPropertyValue = this.SB1URL20;
                    break;
                case cSB1Name20:
                    sPropertyValue = this.SB1Name20;
                    break;
                case cSB1Label20:
                    sPropertyValue = this.SB1Label20;
                    break;
                case cSB1Type20:
                    sPropertyValue = this.SB1Type20;
                    break;
                case cSB1RelLabel20:
                    sPropertyValue = this.SB1RelLabel20;
                    break;
                case cSB1TAmount20:
                    sPropertyValue = this.SB1TAmount20.ToString();
                    break;
                case cSB1TUnit20:
                    sPropertyValue = this.SB1TUnit20.ToString();
                    break;
                case cSB1TD1Amount20:
                    sPropertyValue = this.SB1TD1Amount20.ToString();
                    break;
                case cSB1TD1Unit20:
                    sPropertyValue = this.SB1TD1Unit20.ToString();
                    break;
                case cSB1TD2Amount20:
                    sPropertyValue = this.SB1TD2Amount20.ToString();
                    break;
                case cSB1TD2Unit20:
                    sPropertyValue = this.SB1TD2Unit20.ToString();
                    break;
                case cSB1MathResult20:
                    sPropertyValue = this.SB1MathResult20.ToString();
                    break;
                case cSB1MathSubType20:
                    sPropertyValue = this.SB1MathSubType20.ToString();
                    break;
                case cSB1TMAmount20:
                    sPropertyValue = this.SB1TMAmount20.ToString();
                    break;
                case cSB1TMUnit20:
                    sPropertyValue = this.SB1TMUnit20.ToString();
                    break;
                case cSB1TLAmount20:
                    sPropertyValue = this.SB1TLAmount20.ToString();
                    break;
                case cSB1TLUnit20:
                    sPropertyValue = this.SB1TLUnit20.ToString();
                    break;
                case cSB1TUAmount20:
                    sPropertyValue = this.SB1TUAmount20.ToString();
                    break;
                case cSB1TUUnit20:
                    sPropertyValue = this.SB1TUUnit20.ToString();
                    break;
                case cSB1MathOperator20:
                    sPropertyValue = this.SB1MathOperator20.ToString();
                    break;
                case cSB1MathExpression20:
                    sPropertyValue = this.SB1MathExpression20.ToString();
                    break;
                case cSB1BaseIO20:
                    sPropertyValue = this.SB1BaseIO20.ToString();
                    break;
                case cSB1Date20:
                    sPropertyValue = this.SB1Date20.ToString();
                    break;
                case cSB1MathType20:
                    sPropertyValue = this.SB1MathType20;
                    break;
                case cSB11Amount20:
                    sPropertyValue = this.SB11Amount20.ToString();
                    break;
                case cSB11Unit20:
                    sPropertyValue = this.SB11Unit20.ToString();
                    break;
                case cSB12Amount20:
                    sPropertyValue = this.SB12Amount20.ToString();
                    break;
                case cSB12Unit20:
                    sPropertyValue = this.SB12Unit20;
                    break;
                case cSB15Amount20:
                    sPropertyValue = this.SB15Amount20.ToString();
                    break;
                case cSB15Unit20:
                    sPropertyValue = this.SB15Unit20.ToString();
                    break;
                case cSB13Amount20:
                    sPropertyValue = this.SB13Amount20.ToString();
                    break;
                case cSB13Unit20:
                    sPropertyValue = this.SB13Unit20;
                    break;
                case cSB14Amount20:
                    sPropertyValue = this.SB14Amount20.ToString();
                    break;
                case cSB14Unit20:
                    sPropertyValue = this.SB14Unit20;
                    break;
                default:
                    break;
            }
            return sPropertyValue;
        }
        public void SetSB1BaseAttributes(string attNameExtension,
            XElement calculator)
        {
            //test this as an alternative
            //need to open with a root lv
            //run atts
            //close with lv and root

            //StringWriter output = new StringWriter();
            //XmlWriterSettings oXmlWriterSettings = new XmlWriterSettings();
            //oXmlWriterSettings.Indent = true;
            //oXmlWriterSettings.OmitXmlDeclaration = true;
            ////store the results in tempdocpath
            //using (XmlWriter writer
            //    = XmlWriter.Create(output,
            //    oXmlWriterSettings))
            //{
            //    calculator.Save(writer);
            //    SetSB1BaseAttributes(attNameExtension, writer);
            //    writer.FlushAsync();
            //}
            //XElement newcalc = XElement.Parse(output.ToString());

            CalculatorHelpers.SetAttributeDoubleN4(calculator,
                cSB1Score, this.SB1Score);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreUnit, this.SB1ScoreUnit);
            CalculatorHelpers.SetAttributeDoubleN4(calculator,
                cSB1ScoreD1Amount, this.SB1ScoreD1Amount);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreD1Unit, this.SB1ScoreD1Unit);
            CalculatorHelpers.SetAttributeDoubleN4(calculator,
                cSB1ScoreD2Amount, this.SB1ScoreD2Amount);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreD2Unit, this.SB1ScoreD2Unit);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreMathExpression, this.SB1ScoreMathExpression);
            CalculatorHelpers.SetAttributeDoubleN4(calculator,
                cSB1ScoreM, this.SB1ScoreM);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreMUnit, this.SB1ScoreMUnit);
            CalculatorHelpers.SetAttributeDoubleN4(calculator,
                cSB1ScoreLAmount, this.SB1ScoreLAmount);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreLUnit, this.SB1ScoreLUnit);
            CalculatorHelpers.SetAttributeDoubleN4(calculator,
                cSB1ScoreUAmount, this.SB1ScoreUAmount);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreUUnit, this.SB1ScoreUUnit);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreDistType, this.SB1ScoreDistType);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreMathType, this.SB1ScoreMathType);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreMathSubType, this.SB1ScoreMathSubType);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1ScoreMathResult, this.SB1ScoreMathResult);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1JointDataURL, this.SB1JointDataURL);
            CalculatorHelpers.SetAttributeInt(calculator,
                cSB1Iterations, this.SB1Iterations);
            CalculatorHelpers.SetAttributeInt(calculator,
                cSB1CILevel, this.SB1CILevel);
            CalculatorHelpers.SetAttributeInt(calculator,
                cSB1Random, this.SB1Random);
            CalculatorHelpers.SetAttribute(calculator,
                cSB1BaseIO, this.SB1BaseIO);
            //don't needlessly add these to linkedviews if they are not being used
            if (this.SB1Name1 != string.Empty && this.SB1Name1 != Constants.NONE)
            {
                //remember that the calculator inheriting from this class must set id and name atts
                //and remove unwanted old atts i.e. this.SetCalculatorAttributes(calculator);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name1, this.SB1Name1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label1, this.SB1Label1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description1, this.SB1Description1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL1, this.SB1URL1);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date1, this.SB1Date1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType1, this.SB1MathType1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type1, this.SB1Type1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel1, this.SB1RelLabel1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount1, this.SB1TAmount1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit1, this.SB1TUnit1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD1Amount1, this.SB1TD1Amount1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit1, this.SB1TD1Unit1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount1, this.SB1TD2Amount1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit1, this.SB1TD2Unit1);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult1, this.SB1MathResult1);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType1, this.SB1MathSubType1);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TMAmount1, this.SB1TMAmount1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit1, this.SB1TMUnit1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TLAmount1, this.SB1TLAmount1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit1, this.SB1TLUnit1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount1, this.SB1TUAmount1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit1, this.SB1TUUnit1);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator1, this.SB1MathOperator1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression1, this.SB1MathExpression1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO1, this.SB1BaseIO1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount1, this.SB15Amount1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit1, this.SB15Unit1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount1, this.SB11Amount1);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit1, this.SB11Unit1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount1, this.SB12Amount1);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit1, this.SB12Unit1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount1, this.SB13Amount1);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit1, this.SB13Unit1);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount1, this.SB14Amount1);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit1, this.SB14Unit1);
            }
            if (this.SB1Name2 != string.Empty && this.SB1Name2 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name2, this.SB1Name2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label2, this.SB1Label2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description2, this.SB1Description2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL2, this.SB1URL2);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date2, this.SB1Date2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType2, this.SB1MathType2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type2, this.SB1Type2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel2, this.SB1RelLabel2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount2, this.SB1TAmount2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit2, this.SB1TUnit2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount2, this.SB1TD1Amount2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit2, this.SB1TD1Unit2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount2, this.SB1TD2Amount2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit2, this.SB1TD2Unit2);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult2, this.SB1MathResult2);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType2, this.SB1MathSubType2);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount2, this.SB1TMAmount2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit2, this.SB1TMUnit2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount2, this.SB1TLAmount2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit2, this.SB1TLUnit2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount2, this.SB1TUAmount2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit2, this.SB1TUUnit2);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator2, this.SB1MathOperator2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression2, this.SB1MathExpression2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO2, this.SB1BaseIO2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount2, this.SB15Amount2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit2, this.SB15Unit2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount2, this.SB11Amount2);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit2, this.SB11Unit2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount2, this.SB12Amount2);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit2, this.SB12Unit2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount2, this.SB13Amount2);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit2, this.SB13Unit2);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount2, this.SB14Amount2);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit2, this.SB14Unit2);
            }
            if (this.SB1Name3 != string.Empty && this.SB1Name3 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name3, this.SB1Name3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label3, this.SB1Label3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description3, this.SB1Description3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL3, this.SB1URL3);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date3, this.SB1Date3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType3, this.SB1MathType3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type3, this.SB1Type3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel3, this.SB1RelLabel3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount3, this.SB1TAmount3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit3, this.SB1TUnit3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount3, this.SB1TD1Amount3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit3, this.SB1TD1Unit3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount3, this.SB1TD2Amount3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit3, this.SB1TD2Unit3);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult3, this.SB1MathResult3);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType3, this.SB1MathSubType3);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount3, this.SB1TMAmount3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit3, this.SB1TMUnit3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount3, this.SB1TLAmount3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit3, this.SB1TLUnit3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount3, this.SB1TUAmount3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit3, this.SB1TUUnit3);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator3, this.SB1MathOperator3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression3, this.SB1MathExpression3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO3, this.SB1BaseIO3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount3, this.SB15Amount3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit3, this.SB15Unit3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount3, this.SB11Amount3);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit3, this.SB11Unit3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount3, this.SB12Amount3);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit3, this.SB12Unit3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount3, this.SB13Amount3);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit3, this.SB13Unit3);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount3, this.SB14Amount3);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit3, this.SB14Unit3);
            }
            if (this.SB1Name4 != string.Empty && this.SB1Name4 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name4, this.SB1Name4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label4, this.SB1Label4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description4, this.SB1Description4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL4, this.SB1URL4);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date4, this.SB1Date4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType4, this.SB1MathType4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type4, this.SB1Type4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel4, this.SB1RelLabel4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount4, this.SB1TAmount4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit4, this.SB1TUnit4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount4, this.SB1TD1Amount4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit4, this.SB1TD1Unit4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount4, this.SB1TD2Amount4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit4, this.SB1TD2Unit4);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult4, this.SB1MathResult4);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType4, this.SB1MathSubType4);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount4, this.SB1TMAmount4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit4, this.SB1TMUnit4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount4, this.SB1TLAmount4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit4, this.SB1TLUnit4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount4, this.SB1TUAmount4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit4, this.SB1TUUnit4);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator4, this.SB1MathOperator4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression4, this.SB1MathExpression4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO4, this.SB1BaseIO4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount4, this.SB15Amount4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit4, this.SB15Unit4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount4, this.SB11Amount4);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit4, this.SB11Unit4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount4, this.SB12Amount4);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit4, this.SB12Unit4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount4, this.SB13Amount4);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit4, this.SB13Unit4);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount4, this.SB14Amount4);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit4, this.SB14Unit4);
            }
            if (this.SB1Name5 != string.Empty && this.SB1Name5 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name5, this.SB1Name5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label5, this.SB1Label5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description5, this.SB1Description5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL5, this.SB1URL5);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date5, this.SB1Date5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType5, this.SB1MathType5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type5, this.SB1Type5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel5, this.SB1RelLabel5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount5, this.SB1TAmount5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit5, this.SB1TUnit5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount5, this.SB1TD1Amount5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit5, this.SB1TD1Unit5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount5, this.SB1TD2Amount5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit5, this.SB1TD2Unit5);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult5, this.SB1MathResult5);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType5, this.SB1MathSubType5);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount5, this.SB1TMAmount5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit5, this.SB1TMUnit5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount5, this.SB1TLAmount5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit5, this.SB1TLUnit5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount5, this.SB1TUAmount5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit5, this.SB1TUUnit5);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator5, this.SB1MathOperator5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression5, this.SB1MathExpression5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO5, this.SB1BaseIO5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount5, this.SB15Amount5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit5, this.SB15Unit5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount5, this.SB11Amount5);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit5, this.SB11Unit5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount5, this.SB12Amount5);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit5, this.SB12Unit5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount5, this.SB13Amount5);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit5, this.SB13Unit5);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount5, this.SB14Amount5);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit5, this.SB14Unit5);
            }
            if (this.SB1Name6 != string.Empty && this.SB1Name6 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name6, this.SB1Name6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label6, this.SB1Label6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description6, this.SB1Description6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL6, this.SB1URL6);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date6, this.SB1Date6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType6, this.SB1MathType6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type6, this.SB1Type6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel6, this.SB1RelLabel6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount6, this.SB1TAmount6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit6, this.SB1TUnit6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount6, this.SB1TD1Amount6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit6, this.SB1TD1Unit6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount6, this.SB1TD2Amount6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit6, this.SB1TD2Unit6);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult6, this.SB1MathResult6);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType6, this.SB1MathSubType6);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount6, this.SB1TMAmount6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit6, this.SB1TMUnit6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount6, this.SB1TLAmount6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit6, this.SB1TLUnit6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount6, this.SB1TUAmount6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit6, this.SB1TUUnit6);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator6, this.SB1MathOperator6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression6, this.SB1MathExpression6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO6, this.SB1BaseIO6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount6, this.SB15Amount6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit6, this.SB15Unit6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount6, this.SB11Amount6);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit6, this.SB11Unit6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount6, this.SB12Amount6);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit6, this.SB12Unit6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount6, this.SB13Amount6);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit6, this.SB13Unit6);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount6, this.SB14Amount6);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit6, this.SB14Unit6);
            }
            if (this.SB1Name7 != string.Empty && this.SB1Name7 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name7, this.SB1Name7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label7, this.SB1Label7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description7, this.SB1Description7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL7, this.SB1URL7);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date7, this.SB1Date7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType7, this.SB1MathType7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type7, this.SB1Type7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel7, this.SB1RelLabel7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount7, this.SB1TAmount7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit7, this.SB1TUnit7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount7, this.SB1TD1Amount7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit7, this.SB1TD1Unit7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount7, this.SB1TD2Amount7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit7, this.SB1TD2Unit7);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult7, this.SB1MathResult7);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType7, this.SB1MathSubType7);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount7, this.SB1TMAmount7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit7, this.SB1TMUnit7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount7, this.SB1TLAmount7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit7, this.SB1TLUnit7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount7, this.SB1TUAmount7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit7, this.SB1TUUnit7);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator7, this.SB1MathOperator7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression7, this.SB1MathExpression7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO7, this.SB1BaseIO7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount7, this.SB15Amount7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit7, this.SB15Unit7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount7, this.SB11Amount7);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit7, this.SB11Unit7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount7, this.SB12Amount7);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit7, this.SB12Unit7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount7, this.SB13Amount7);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit7, this.SB13Unit7);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount7, this.SB14Amount7);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit7, this.SB14Unit7);
            }
            if (this.SB1Name8 != string.Empty && this.SB1Name8 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name8, this.SB1Name8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label8, this.SB1Label8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description8, this.SB1Description8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL8, this.SB1URL8);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date8, this.SB1Date8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType8, this.SB1MathType8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type8, this.SB1Type8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel8, this.SB1RelLabel8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount8, this.SB1TAmount8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit8, this.SB1TUnit8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount8, this.SB1TD1Amount8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit8, this.SB1TD1Unit8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount8, this.SB1TD2Amount8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit8, this.SB1TD2Unit8);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult8, this.SB1MathResult8);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType8, this.SB1MathSubType8);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount8, this.SB1TMAmount8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit8, this.SB1TMUnit8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount8, this.SB1TLAmount8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit8, this.SB1TLUnit8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount8, this.SB1TUAmount8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit8, this.SB1TUUnit8);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator8, this.SB1MathOperator8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression8, this.SB1MathExpression8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO8, this.SB1BaseIO8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount8, this.SB15Amount8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit8, this.SB15Unit8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount8, this.SB11Amount8);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit8, this.SB11Unit8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount8, this.SB12Amount8);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit8, this.SB12Unit8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount8, this.SB13Amount8);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit8, this.SB13Unit8);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount8, this.SB14Amount8);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit8, this.SB14Unit8);
            }
            if (this.SB1Name9 != string.Empty && this.SB1Name9 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name9, this.SB1Name9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label9, this.SB1Label9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description9, this.SB1Description9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL9, this.SB1URL9);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date9, this.SB1Date9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType9, this.SB1MathType9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type9, this.SB1Type9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel9, this.SB1RelLabel9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount9, this.SB1TAmount9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit9, this.SB1TUnit9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount9, this.SB1TD1Amount9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit9, this.SB1TD1Unit9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount9, this.SB1TD2Amount9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit9, this.SB1TD2Unit9);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult9, this.SB1MathResult9);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType9, this.SB1MathSubType9);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount9, this.SB1TMAmount9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit9, this.SB1TMUnit9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount9, this.SB1TLAmount9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit9, this.SB1TLUnit9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount9, this.SB1TUAmount9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit9, this.SB1TUUnit9);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator9, this.SB1MathOperator9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression9, this.SB1MathExpression9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO9, this.SB1BaseIO9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount9, this.SB15Amount9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit9, this.SB15Unit9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount9, this.SB11Amount9);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit9, this.SB11Unit9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount9, this.SB12Amount9);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit9, this.SB12Unit9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount9, this.SB13Amount9);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit9, this.SB13Unit9);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount9, this.SB14Amount9);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit9, this.SB14Unit9);
            }
            if (this.SB1Name10 != string.Empty && this.SB1Name10 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name10, this.SB1Name10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label10, this.SB1Label10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description10, this.SB1Description10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL10, this.SB1URL10);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date10, this.SB1Date10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType10, this.SB1MathType10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type10, this.SB1Type10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel10, this.SB1RelLabel10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount10, this.SB1TAmount10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit10, this.SB1TUnit10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount10, this.SB1TD1Amount10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit10, this.SB1TD1Unit10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount10, this.SB1TD2Amount10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit10, this.SB1TD2Unit10);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult10, this.SB1MathResult10);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType10, this.SB1MathSubType10);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount10, this.SB1TMAmount10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit10, this.SB1TMUnit10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount10, this.SB1TLAmount10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit10, this.SB1TLUnit10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount10, this.SB1TUAmount10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit10, this.SB1TUUnit10);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator10, this.SB1MathOperator10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression10, this.SB1MathExpression10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO10, this.SB1BaseIO10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount10, this.SB15Amount10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit10, this.SB15Unit10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount10, this.SB11Amount10);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit10, this.SB11Unit10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount10, this.SB12Amount10);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit10, this.SB12Unit10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount10, this.SB13Amount10);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit10, this.SB13Unit10);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount10, this.SB14Amount10);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit10, this.SB14Unit10);
            }
            if (this.SB1Name11 != string.Empty && this.SB1Name11 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name11, this.SB1Name11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label11, this.SB1Label11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description11, this.SB1Description11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL11, this.SB1URL11);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date11, this.SB1Date11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType11, this.SB1MathType11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type11, this.SB1Type11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel11, this.SB1RelLabel11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount11, this.SB1TAmount11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit11, this.SB1TUnit11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount11, this.SB1TD1Amount11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit11, this.SB1TD1Unit11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount11, this.SB1TD2Amount11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit11, this.SB1TD2Unit11);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult11, this.SB1MathResult11);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType11, this.SB1MathSubType11);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount11, this.SB1TMAmount11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit11, this.SB1TMUnit11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount11, this.SB1TLAmount11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit11, this.SB1TLUnit11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount11, this.SB1TUAmount11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit11, this.SB1TUUnit11);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator11, this.SB1MathOperator11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression11, this.SB1MathExpression11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO11, this.SB1BaseIO11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount11, this.SB15Amount11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit11, this.SB15Unit11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount11, this.SB11Amount11);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit11, this.SB11Unit11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount11, this.SB12Amount11);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit11, this.SB12Unit11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount11, this.SB13Amount11);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit11, this.SB13Unit11);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount11, this.SB14Amount11);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit11, this.SB14Unit11);
            }
            if (this.SB1Name12 != string.Empty && this.SB1Name12 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name12, this.SB1Name12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label12, this.SB1Label12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description12, this.SB1Description12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL12, this.SB1URL12);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date12, this.SB1Date12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType12, this.SB1MathType12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type12, this.SB1Type12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel12, this.SB1RelLabel12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount12, this.SB1TAmount12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit12, this.SB1TUnit12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount12, this.SB1TD1Amount12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit12, this.SB1TD1Unit12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount12, this.SB1TD2Amount12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit12, this.SB1TD2Unit12);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult12, this.SB1MathResult12);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType12, this.SB1MathSubType12);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount12, this.SB1TMAmount12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit12, this.SB1TMUnit12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount12, this.SB1TLAmount12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit12, this.SB1TLUnit12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount12, this.SB1TUAmount12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit12, this.SB1TUUnit12);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator12, this.SB1MathOperator12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression12, this.SB1MathExpression12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO12, this.SB1BaseIO12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount12, this.SB15Amount12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit12, this.SB15Unit12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount12, this.SB11Amount12);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit12, this.SB11Unit12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount12, this.SB12Amount12);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit12, this.SB12Unit12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount12, this.SB13Amount12);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit12, this.SB13Unit12);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount12, this.SB14Amount12);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit12, this.SB14Unit12);
            }
            if (this.SB1Name13 != string.Empty && this.SB1Name13 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name13, this.SB1Name13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label13, this.SB1Label13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description13, this.SB1Description13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL13, this.SB1URL13);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date13, this.SB1Date13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType13, this.SB1MathType13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type13, this.SB1Type13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel13, this.SB1RelLabel13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount13, this.SB1TAmount13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit13, this.SB1TUnit13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount13, this.SB1TD1Amount13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit13, this.SB1TD1Unit13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount13, this.SB1TD2Amount13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit13, this.SB1TD2Unit13);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult13, this.SB1MathResult13);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType13, this.SB1MathSubType13);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount13, this.SB1TMAmount13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit13, this.SB1TMUnit13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount13, this.SB1TLAmount13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit13, this.SB1TLUnit13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount13, this.SB1TUAmount13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit13, this.SB1TUUnit13);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator13, this.SB1MathOperator13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression13, this.SB1MathExpression13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO13, this.SB1BaseIO13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount13, this.SB15Amount13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit13, this.SB15Unit13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount13, this.SB11Amount13);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit13, this.SB11Unit13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount13, this.SB12Amount13);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit13, this.SB12Unit13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount13, this.SB13Amount13);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit13, this.SB13Unit13);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount13, this.SB14Amount13);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit13, this.SB14Unit13);
            }
            if (this.SB1Name14 != string.Empty && this.SB1Name14 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name14, this.SB1Name14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label14, this.SB1Label14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description14, this.SB1Description14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL14, this.SB1URL14);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date14, this.SB1Date14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType14, this.SB1MathType14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type14, this.SB1Type14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel14, this.SB1RelLabel14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount14, this.SB1TAmount14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit14, this.SB1TUnit14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount14, this.SB1TD1Amount14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit14, this.SB1TD1Unit14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount14, this.SB1TD2Amount14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit14, this.SB1TD2Unit14);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult14, this.SB1MathResult14);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType14, this.SB1MathSubType14);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount14, this.SB1TMAmount14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit14, this.SB1TMUnit14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount14, this.SB1TLAmount14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit14, this.SB1TLUnit14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount14, this.SB1TUAmount14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit14, this.SB1TUUnit14);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator14, this.SB1MathOperator14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression14, this.SB1MathExpression14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO14, this.SB1BaseIO14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount14, this.SB15Amount14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit14, this.SB15Unit14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount14, this.SB11Amount14);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit14, this.SB11Unit14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount14, this.SB12Amount14);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit14, this.SB12Unit14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount14, this.SB13Amount14);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit14, this.SB13Unit14);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount14, this.SB14Amount14);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit14, this.SB14Unit14);
            }
            if (this.SB1Name15 != string.Empty && this.SB1Name15 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name15, this.SB1Name15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label15, this.SB1Label15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description15, this.SB1Description15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL15, this.SB1URL15);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date15, this.SB1Date15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType15, this.SB1MathType15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type15, this.SB1Type15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel15, this.SB1RelLabel15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount15, this.SB1TAmount15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit15, this.SB1TUnit15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount15, this.SB1TD1Amount15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit15, this.SB1TD1Unit15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount15, this.SB1TD2Amount15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit15, this.SB1TD2Unit15);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult15, this.SB1MathResult15);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType15, this.SB1MathSubType15);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount15, this.SB1TMAmount15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit15, this.SB1TMUnit15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount15, this.SB1TLAmount15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit15, this.SB1TLUnit15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount15, this.SB1TUAmount15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit15, this.SB1TUUnit15);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator15, this.SB1MathOperator15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression15, this.SB1MathExpression15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO15, this.SB1BaseIO15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount15, this.SB15Amount15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit15, this.SB15Unit15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount15, this.SB11Amount15);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit15, this.SB11Unit15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount15, this.SB12Amount15);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit15, this.SB12Unit15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount15, this.SB13Amount15);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit15, this.SB13Unit15);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount15, this.SB14Amount15);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit15, this.SB14Unit15);
            }
            if (this.SB1Name16 != string.Empty && this.SB1Name16 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name16, this.SB1Name16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label16, this.SB1Label16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description16, this.SB1Description16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL16, this.SB1URL16);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date16, this.SB1Date16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType16, this.SB1MathType16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type16, this.SB1Type16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel16, this.SB1RelLabel16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount16, this.SB1TAmount16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit16, this.SB1TUnit16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount16, this.SB1TD1Amount16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit16, this.SB1TD1Unit16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount16, this.SB1TD2Amount16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit16, this.SB1TD2Unit16);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult16, this.SB1MathResult16);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType16, this.SB1MathSubType16);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount16, this.SB1TMAmount16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit16, this.SB1TMUnit16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount16, this.SB1TLAmount16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit16, this.SB1TLUnit16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount16, this.SB1TUAmount16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit16, this.SB1TUUnit16);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator16, this.SB1MathOperator16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression16, this.SB1MathExpression16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO16, this.SB1BaseIO16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount16, this.SB15Amount16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit16, this.SB15Unit16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount16, this.SB11Amount16);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit16, this.SB11Unit16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount16, this.SB12Amount16);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit16, this.SB12Unit16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount16, this.SB13Amount16);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit16, this.SB13Unit16);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount16, this.SB14Amount16);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit16, this.SB14Unit16);
            }
            if (this.SB1Name17 != string.Empty && this.SB1Name17 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name17, this.SB1Name17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label17, this.SB1Label17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description17, this.SB1Description17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL17, this.SB1URL17);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date17, this.SB1Date17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType17, this.SB1MathType17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type17, this.SB1Type17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel17, this.SB1RelLabel17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount17, this.SB1TAmount17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit17, this.SB1TUnit17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount17, this.SB1TD1Amount17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit17, this.SB1TD1Unit17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount17, this.SB1TD2Amount17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit17, this.SB1TD2Unit17);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult17, this.SB1MathResult17);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType17, this.SB1MathSubType17);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount17, this.SB1TMAmount17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit17, this.SB1TMUnit17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount17, this.SB1TLAmount17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit17, this.SB1TLUnit17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount17, this.SB1TUAmount17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit17, this.SB1TUUnit17);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator17, this.SB1MathOperator17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression17, this.SB1MathExpression17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO17, this.SB1BaseIO17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount17, this.SB15Amount17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit17, this.SB15Unit17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount17, this.SB11Amount17);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit17, this.SB11Unit17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount17, this.SB12Amount17);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit17, this.SB12Unit17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount17, this.SB13Amount17);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit17, this.SB13Unit17);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount17, this.SB14Amount17);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit17, this.SB14Unit17);
            }
            if (this.SB1Name18 != string.Empty && this.SB1Name18 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name18, this.SB1Name18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label18, this.SB1Label18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description18, this.SB1Description18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL18, this.SB1URL18);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date18, this.SB1Date18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType18, this.SB1MathType18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type18, this.SB1Type18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel18, this.SB1RelLabel18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount18, this.SB1TAmount18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit18, this.SB1TUnit18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount18, this.SB1TD1Amount18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit18, this.SB1TD1Unit18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount18, this.SB1TD2Amount18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit18, this.SB1TD2Unit18);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult18, this.SB1MathResult18);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType18, this.SB1MathSubType18);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount18, this.SB1TMAmount18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit18, this.SB1TMUnit18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount18, this.SB1TLAmount18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit18, this.SB1TLUnit18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount18, this.SB1TUAmount18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit18, this.SB1TUUnit18);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator18, this.SB1MathOperator18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression18, this.SB1MathExpression18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO18, this.SB1BaseIO18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount18, this.SB15Amount18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit18, this.SB15Unit18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount18, this.SB11Amount18);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit18, this.SB11Unit18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount18, this.SB12Amount18);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit18, this.SB12Unit18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount18, this.SB13Amount18);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit18, this.SB13Unit18);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount18, this.SB14Amount18);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit18, this.SB14Unit18);
            }
            if (this.SB1Name19 != string.Empty && this.SB1Name19 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name19, this.SB1Name19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label19, this.SB1Label19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description19, this.SB1Description19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL19, this.SB1URL19);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date19, this.SB1Date19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType19, this.SB1MathType19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type19, this.SB1Type19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel19, this.SB1RelLabel19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount19, this.SB1TAmount19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit19, this.SB1TUnit19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount19, this.SB1TD1Amount19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit19, this.SB1TD1Unit19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount19, this.SB1TD2Amount19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit19, this.SB1TD2Unit19);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult19, this.SB1MathResult19);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType19, this.SB1MathSubType19);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount19, this.SB1TMAmount19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit19, this.SB1TMUnit19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount19, this.SB1TLAmount19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit19, this.SB1TLUnit19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount19, this.SB1TUAmount19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit19, this.SB1TUUnit19);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator19, this.SB1MathOperator19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression19, this.SB1MathExpression19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO19, this.SB1BaseIO19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount19, this.SB15Amount19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit19, this.SB15Unit19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount19, this.SB11Amount19);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit19, this.SB11Unit19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount19, this.SB12Amount19);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit19, this.SB12Unit19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount19, this.SB13Amount19);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit19, this.SB13Unit19);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount19, this.SB14Amount19);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit19, this.SB14Unit19);
            }
            if (this.SB1Name20 != string.Empty && this.SB1Name20 != Constants.NONE)
            {
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Name20, this.SB1Name20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Label20, this.SB1Label20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Description20, this.SB1Description20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1URL20, this.SB1URL20);
                CalculatorHelpers.SetAttributeDateS(calculator,
                        cSB1Date20, this.SB1Date20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathType20, this.SB1MathType20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1Type20, this.SB1Type20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1RelLabel20, this.SB1RelLabel20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TAmount20, this.SB1TAmount20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUnit20, this.SB1TUnit20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TD1Amount20, this.SB1TD1Amount20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD1Unit20, this.SB1TD1Unit20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TD2Amount20, this.SB1TD2Amount20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TD2Unit20, this.SB1TD2Unit20);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathResult20, this.SB1MathResult20);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathSubType20, this.SB1MathSubType20);

                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TMAmount20, this.SB1TMAmount20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TMUnit20, this.SB1TMUnit20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB1TLAmount20, this.SB1TLAmount20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TLUnit20, this.SB1TLUnit20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB1TUAmount20, this.SB1TUAmount20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1TUUnit20, this.SB1TUUnit20);
                CalculatorHelpers.SetAttribute(calculator,
                       cSB1MathOperator20, this.SB1MathOperator20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1MathExpression20, this.SB1MathExpression20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB1BaseIO20, this.SB1BaseIO20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                    cSB15Amount20, this.SB15Amount20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB15Unit20, this.SB15Unit20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB11Amount20, this.SB11Amount20);
                CalculatorHelpers.SetAttribute(calculator,
                        cSB11Unit20, this.SB11Unit20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                        cSB12Amount20, this.SB12Amount20);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB12Unit20, this.SB12Unit20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB13Amount20, this.SB13Amount20);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB13Unit20, this.SB13Unit20);
                CalculatorHelpers.SetAttributeDoubleN4(calculator,
                       cSB14Amount20, this.SB14Amount20);
                CalculatorHelpers.SetAttribute(calculator,
                    cSB14Unit20, this.SB14Unit20);
            }
        }
        
        public virtual void SetSB1BaseAttributes(string attNameExtension,
           XmlWriter writer)
        {
            writer.WriteAttributeString(
                cSB1Score, this.SB1Score.ToString("N4", CultureInfo.InvariantCulture));
            writer.WriteAttributeString(
                cSB1ScoreUnit, this.SB1ScoreUnit);
            writer.WriteAttributeString(
                cSB1ScoreD1Amount, this.SB1ScoreD1Amount.ToString("N4", CultureInfo.InvariantCulture));
            writer.WriteAttributeString(
                cSB1ScoreD1Unit, this.SB1ScoreD1Unit);
            writer.WriteAttributeString(
                cSB1ScoreD2Amount, this.SB1ScoreD2Amount.ToString("N4", CultureInfo.InvariantCulture));
            writer.WriteAttributeString(
                cSB1ScoreD2Unit, this.SB1ScoreD2Unit);
            writer.WriteAttributeString(
                cSB1ScoreMathExpression, this.SB1ScoreMathExpression);
            string sFormat = this.SB1ScoreM.ToString("N4", CultureInfo.InvariantCulture);
            writer.WriteAttributeString(
                cSB1ScoreM, this.SB1ScoreM.ToString("N4", CultureInfo.InvariantCulture));
            writer.WriteAttributeString(
                cSB1ScoreMUnit, this.SB1ScoreMUnit);
            writer.WriteAttributeString(
                cSB1ScoreLAmount, this.SB1ScoreLAmount.ToString("N4", CultureInfo.InvariantCulture));
            writer.WriteAttributeString(
                cSB1ScoreLUnit, this.SB1ScoreLUnit);
            writer.WriteAttributeString(
                cSB1ScoreUAmount, this.SB1ScoreUAmount.ToString("N4", CultureInfo.InvariantCulture));
            writer.WriteAttributeString(
                cSB1ScoreUUnit, this.SB1ScoreUUnit);
            writer.WriteAttributeString(
                cSB1ScoreDistType, this.SB1ScoreDistType);
            writer.WriteAttributeString(
                cSB1ScoreMathType, this.SB1ScoreMathType);
            writer.WriteAttributeString(
                cSB1ScoreMathSubType, this.SB1ScoreMathSubType);
            writer.WriteAttributeString(
                cSB1ScoreMathResult, this.SB1ScoreMathResult);
            writer.WriteAttributeString(
                cSB1JointDataURL, this.SB1JointDataURL);
            writer.WriteAttributeString(
                cSB1Iterations, this.SB1Iterations.ToString());
            writer.WriteAttributeString(
                cSB1CILevel, this.SB1CILevel.ToString());
            writer.WriteAttributeString(
                cSB1Random, this.SB1Random.ToString());
            writer.WriteAttributeString(
                cSB1BaseIO, this.SB1BaseIO.ToString());
            if (this.SB1Name1 != string.Empty && this.SB1Name1 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name1, this.SB1Name1);
                writer.WriteAttributeString(
                    cSB1Description1, this.SB1Description1);
                writer.WriteAttributeString(
                    cSB1URL1, this.SB1URL1);
                writer.WriteAttributeString(
                        cSB1Label1, this.SB1Label1);
                writer.WriteAttributeString(
                        cSB1Type1, this.SB1Type1);
                writer.WriteAttributeString(
                    cSB1RelLabel1, this.SB1RelLabel1);
                writer.WriteAttributeString(
                    cSB1TAmount1, this.SB1TAmount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit1, this.SB1TUnit1.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount1, this.SB1TD1Amount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit1, this.SB1TD1Unit1.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount1, this.SB1TD2Amount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit1, this.SB1TD2Unit1.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult1, this.SB1MathResult1.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType1, this.SB1MathSubType1.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount1, this.SB1TMAmount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit1, this.SB1TMUnit1.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount1, this.SB1TLAmount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit1, this.SB1TLUnit1.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount1, this.SB1TUAmount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit1, this.SB1TUUnit1.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator1, this.SB1MathOperator1.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression1, this.SB1MathExpression1.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO1, this.SB1BaseIO1.ToString());
                writer.WriteAttributeString(
                        cSB1Date1, this.SB1Date1.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType1, this.SB1MathType1);
                writer.WriteAttributeString(
                        cSB11Amount1, this.SB11Amount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit1, this.SB11Unit1.ToString());
                writer.WriteAttributeString(
                        cSB12Amount1, this.SB12Amount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit1, this.SB12Unit1);
                writer.WriteAttributeString(
                    cSB15Amount1, this.SB15Amount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit1, this.SB15Unit1.ToString());
                writer.WriteAttributeString(
                    cSB13Amount1, this.SB13Amount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit1, this.SB13Unit1);
                writer.WriteAttributeString(
                    cSB14Amount1, this.SB14Amount1.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit1, this.SB14Unit1);
            }
            if (this.SB1Name2 != string.Empty && this.SB1Name2 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name2, this.SB1Name2);
                writer.WriteAttributeString(
                    cSB1Description2, this.SB1Description2);
                writer.WriteAttributeString(
                    cSB1URL2, this.SB1URL2);
                writer.WriteAttributeString(
                        cSB1Label2, this.SB1Label2);
                writer.WriteAttributeString(
                        cSB1Type2, this.SB1Type2);
                writer.WriteAttributeString(
                    cSB1RelLabel2, this.SB1RelLabel2);
                writer.WriteAttributeString(
                    cSB1TAmount2, this.SB1TAmount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit2, this.SB1TUnit2.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount2, this.SB1TD1Amount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit2, this.SB1TD1Unit2.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount2, this.SB1TD2Amount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit2, this.SB1TD2Unit2.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult2, this.SB1MathResult2.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType2, this.SB1MathSubType2.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount2, this.SB1TMAmount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit2, this.SB1TMUnit2.ToString());
                writer.WriteAttributeString(
                   cSB1TLAmount2, this.SB1TLAmount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit2, this.SB1TLUnit2.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount2, this.SB1TUAmount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit2, this.SB1TUUnit2.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator2, this.SB1MathOperator2.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression2, this.SB1MathExpression2.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO2, this.SB1BaseIO2.ToString());
                writer.WriteAttributeString(
                        cSB1Date2, this.SB1Date2.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType2, this.SB1MathType2);
                writer.WriteAttributeString(
                        cSB11Amount2, this.SB11Amount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit2, this.SB11Unit2.ToString());
                writer.WriteAttributeString(
                        cSB12Amount2, this.SB12Amount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit2, this.SB12Unit2);
                writer.WriteAttributeString(
                    cSB15Amount2, this.SB15Amount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit2, this.SB15Unit2.ToString());
                writer.WriteAttributeString(
                   cSB13Amount2, this.SB13Amount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit2, this.SB13Unit2);
                writer.WriteAttributeString(
                    cSB14Amount2, this.SB14Amount2.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit2, this.SB14Unit2);
            }
            if (this.SB1Name3 != string.Empty && this.SB1Name3 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name3, this.SB1Name3);
                writer.WriteAttributeString(
                    cSB1Description3, this.SB1Description3);
                writer.WriteAttributeString(
                    cSB1URL3, this.SB1URL3);
                writer.WriteAttributeString(
                        cSB1Label3, this.SB1Label3);
                writer.WriteAttributeString(
                        cSB1Type3, this.SB1Type3);
                writer.WriteAttributeString(
                    cSB1RelLabel3, this.SB1RelLabel3);
                writer.WriteAttributeString(
                    cSB1TAmount3, this.SB1TAmount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit3, this.SB1TUnit3.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount3, this.SB1TD1Amount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit3, this.SB1TD1Unit3.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount3, this.SB1TD2Amount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit3, this.SB1TD2Unit3.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult3, this.SB1MathResult3.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType3, this.SB1MathSubType3.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount3, this.SB1TMAmount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit3, this.SB1TMUnit3.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount3, this.SB1TLAmount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit3, this.SB1TLUnit3.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount3, this.SB1TUAmount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit3, this.SB1TUUnit3.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator3, this.SB1MathOperator3.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression3, this.SB1MathExpression3.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO3, this.SB1BaseIO3.ToString());
                writer.WriteAttributeString(
                        cSB1Date3, this.SB1Date3.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType3, this.SB1MathType3);
                writer.WriteAttributeString(
                        cSB11Amount3, this.SB11Amount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit3, this.SB11Unit3.ToString());
                writer.WriteAttributeString(
                        cSB12Amount3, this.SB12Amount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit3, this.SB12Unit3);
                writer.WriteAttributeString(
                    cSB15Amount3, this.SB15Amount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit3, this.SB15Unit3.ToString());
                writer.WriteAttributeString(
                    cSB13Amount3, this.SB13Amount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit3, this.SB13Unit3);
                writer.WriteAttributeString(
                    cSB14Amount3, this.SB14Amount3.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit3, this.SB14Unit3);
            }
            if (this.SB1Name4 != string.Empty && this.SB1Name4 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name4, this.SB1Name4);
                writer.WriteAttributeString(
                    cSB1Description4, this.SB1Description4);
                writer.WriteAttributeString(
                    cSB1URL4, this.SB1URL4);
                writer.WriteAttributeString(
                        cSB1Label4, this.SB1Label4);
                writer.WriteAttributeString(
                        cSB1Type4, this.SB1Type4);
                writer.WriteAttributeString(
                    cSB1RelLabel4, this.SB1RelLabel4);
                writer.WriteAttributeString(
                    cSB1TAmount4, this.SB1TAmount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit4, this.SB1TUnit4.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount4, this.SB1TD1Amount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit4, this.SB1TD1Unit4.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount4, this.SB1TD2Amount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit4, this.SB1TD2Unit4.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult4, this.SB1MathResult4.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType4, this.SB1MathSubType4.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount4, this.SB1TMAmount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit4, this.SB1TMUnit4.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount4, this.SB1TLAmount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit4, this.SB1TLUnit4.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount4, this.SB1TUAmount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit4, this.SB1TUUnit4.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator4, this.SB1MathOperator4.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression4, this.SB1MathExpression4.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO4, this.SB1BaseIO4.ToString());
                writer.WriteAttributeString(
                        cSB1Date4, this.SB1Date4.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType4, this.SB1MathType4);
                writer.WriteAttributeString(
                        cSB11Amount4, this.SB11Amount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit4, this.SB11Unit4.ToString());
                writer.WriteAttributeString(
                        cSB12Amount4, this.SB12Amount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit4, this.SB12Unit4);
                writer.WriteAttributeString(
                    cSB15Amount4, this.SB15Amount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit4, this.SB15Unit4.ToString());
                writer.WriteAttributeString(
                   cSB13Amount4, this.SB13Amount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit4, this.SB13Unit4);
                writer.WriteAttributeString(
                    cSB14Amount4, this.SB14Amount4.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit4, this.SB14Unit4);
            }
            if (this.SB1Name5 != string.Empty && this.SB1Name5 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name5, this.SB1Name5);
                writer.WriteAttributeString(
                    cSB1Description5, this.SB1Description5);
                writer.WriteAttributeString(
                    cSB1URL5, this.SB1URL5);
                writer.WriteAttributeString(
                        cSB1Label5, this.SB1Label5);
                writer.WriteAttributeString(
                        cSB1Type5, this.SB1Type5);
                writer.WriteAttributeString(
                    cSB1RelLabel5, this.SB1RelLabel5);
                writer.WriteAttributeString(
                    cSB1TAmount5, this.SB1TAmount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit5, this.SB1TUnit5.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount5, this.SB1TD1Amount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit5, this.SB1TD1Unit5.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount5, this.SB1TD2Amount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit5, this.SB1TD2Unit5.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult5, this.SB1MathResult5.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType5, this.SB1MathSubType5.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount5, this.SB1TMAmount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit5, this.SB1TMUnit5.ToString());
                writer.WriteAttributeString(
                   cSB1TLAmount5, this.SB1TLAmount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit5, this.SB1TLUnit5.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount5, this.SB1TUAmount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit5, this.SB1TUUnit5.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator5, this.SB1MathOperator5.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression5, this.SB1MathExpression5.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO5, this.SB1BaseIO5.ToString());
                writer.WriteAttributeString(
                        cSB1Date5, this.SB1Date5.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType5, this.SB1MathType5);
                writer.WriteAttributeString(
                        cSB11Amount5, this.SB11Amount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit5, this.SB11Unit5.ToString());
                writer.WriteAttributeString(
                        cSB12Amount5, this.SB12Amount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit5, this.SB12Unit5);
                writer.WriteAttributeString(
                    cSB15Amount5, this.SB15Amount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit5, this.SB15Unit5.ToString());
                writer.WriteAttributeString(
                   cSB13Amount5, this.SB13Amount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit5, this.SB13Unit5);
                writer.WriteAttributeString(
                    cSB14Amount5, this.SB14Amount5.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit5, this.SB14Unit5);
            }
            if (this.SB1Name6 != string.Empty && this.SB1Name6 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name6, this.SB1Name6);
                writer.WriteAttributeString(
                    cSB1Description6, this.SB1Description6);
                writer.WriteAttributeString(
                    cSB1URL6, this.SB1URL6);
                writer.WriteAttributeString(
                        cSB1Label6, this.SB1Label6);
                writer.WriteAttributeString(
                        cSB1Type6, this.SB1Type6);
                writer.WriteAttributeString(
                    cSB1RelLabel6, this.SB1RelLabel6);
                writer.WriteAttributeString(
                    cSB1TAmount6, this.SB1TAmount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit6, this.SB1TUnit6.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount6, this.SB1TD1Amount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit6, this.SB1TD1Unit6.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount6, this.SB1TD2Amount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit6, this.SB1TD2Unit6.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult6, this.SB1MathResult6.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType6, this.SB1MathSubType6.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount6, this.SB1TMAmount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit6, this.SB1TMUnit6.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount6, this.SB1TLAmount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit6, this.SB1TLUnit6.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount6, this.SB1TUAmount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit6, this.SB1TUUnit6.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator6, this.SB1MathOperator6.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression6, this.SB1MathExpression6.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO6, this.SB1BaseIO6.ToString());
                writer.WriteAttributeString(
                        cSB1Date6, this.SB1Date6.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType6, this.SB1MathType6);
                writer.WriteAttributeString(
                        cSB11Amount6, this.SB11Amount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit6, this.SB11Unit6.ToString());
                writer.WriteAttributeString(
                        cSB12Amount6, this.SB12Amount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit6, this.SB12Unit6);
                writer.WriteAttributeString(
                    cSB15Amount6, this.SB15Amount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit6, this.SB15Unit6.ToString());
                writer.WriteAttributeString(
                   cSB13Amount6, this.SB13Amount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit6, this.SB13Unit6);
                writer.WriteAttributeString(
                    cSB14Amount6, this.SB14Amount6.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit6, this.SB14Unit6);
            }
            if (this.SB1Name7 != string.Empty && this.SB1Name7 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name7, this.SB1Name7);
                writer.WriteAttributeString(
                    cSB1Description7, this.SB1Description7);
                writer.WriteAttributeString(
                    cSB1URL7, this.SB1URL7);
                writer.WriteAttributeString(
                        cSB1Label7, this.SB1Label7);
                writer.WriteAttributeString(
                        cSB1Type7, this.SB1Type7);
                writer.WriteAttributeString(
                    cSB1RelLabel7, this.SB1RelLabel7);
                writer.WriteAttributeString(
                    cSB1TAmount7, this.SB1TAmount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit7, this.SB1TUnit7.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount7, this.SB1TD1Amount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit7, this.SB1TD1Unit7.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount7, this.SB1TD2Amount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit7, this.SB1TD2Unit7.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult7, this.SB1MathResult7.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType7, this.SB1MathSubType7.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount7, this.SB1TMAmount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit7, this.SB1TMUnit7.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount7, this.SB1TLAmount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit7, this.SB1TLUnit7.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount7, this.SB1TUAmount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit7, this.SB1TUUnit7.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator7, this.SB1MathOperator7.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression7, this.SB1MathExpression7.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO7, this.SB1BaseIO7.ToString());
                writer.WriteAttributeString(
                        cSB1Date7, this.SB1Date7.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType7, this.SB1MathType7);
                writer.WriteAttributeString(
                        cSB11Amount7, this.SB11Amount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit7, this.SB11Unit7.ToString());
                writer.WriteAttributeString(
                        cSB12Amount7, this.SB12Amount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit7, this.SB12Unit7);
                writer.WriteAttributeString(
                    cSB15Amount7, this.SB15Amount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit7, this.SB15Unit7.ToString());
                writer.WriteAttributeString(
                   cSB13Amount7, this.SB13Amount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit7, this.SB13Unit7);
                writer.WriteAttributeString(
                    cSB14Amount7, this.SB14Amount7.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit7, this.SB14Unit7);
            }
            if (this.SB1Name8 != string.Empty && this.SB1Name8 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name8, this.SB1Name8);
                writer.WriteAttributeString(
                    cSB1Description8, this.SB1Description8);
                writer.WriteAttributeString(
                    cSB1URL8, this.SB1URL8);
                writer.WriteAttributeString(
                        cSB1Label8, this.SB1Label8);
                writer.WriteAttributeString(
                        cSB1Type8, this.SB1Type8);
                writer.WriteAttributeString(
                    cSB1RelLabel8, this.SB1RelLabel8);
                writer.WriteAttributeString(
                    cSB1TAmount8, this.SB1TAmount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit8, this.SB1TUnit8.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount8, this.SB1TD1Amount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit8, this.SB1TD1Unit8.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount8, this.SB1TD2Amount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit8, this.SB1TD2Unit8.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult8, this.SB1MathResult8.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType8, this.SB1MathSubType8.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount8, this.SB1TMAmount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit8, this.SB1TMUnit8.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount8, this.SB1TLAmount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit8, this.SB1TLUnit8.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount8, this.SB1TUAmount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit8, this.SB1TUUnit8.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator8, this.SB1MathOperator8.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression8, this.SB1MathExpression8.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO8, this.SB1BaseIO8.ToString());
                writer.WriteAttributeString(
                        cSB1Date8, this.SB1Date8.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType8, this.SB1MathType8);
                writer.WriteAttributeString(
                        cSB11Amount8, this.SB11Amount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit8, this.SB11Unit8.ToString());
                writer.WriteAttributeString(
                        cSB12Amount8, this.SB12Amount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit8, this.SB12Unit8);
                writer.WriteAttributeString(
                    cSB15Amount8, this.SB15Amount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit8, this.SB15Unit8.ToString());
                writer.WriteAttributeString(
                   cSB13Amount8, this.SB13Amount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit8, this.SB13Unit8);
                writer.WriteAttributeString(
                    cSB14Amount8, this.SB14Amount8.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit8, this.SB14Unit8);
            }
            if (this.SB1Name9 != string.Empty && this.SB1Name9 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name9, this.SB1Name9);
                writer.WriteAttributeString(
                    cSB1Description9, this.SB1Description9);
                writer.WriteAttributeString(
                    cSB1URL9, this.SB1URL9);
                writer.WriteAttributeString(
                        cSB1Label9, this.SB1Label9);
                writer.WriteAttributeString(
                        cSB1Type9, this.SB1Type9);
                writer.WriteAttributeString(
                    cSB1RelLabel9, this.SB1RelLabel9);
                writer.WriteAttributeString(
                    cSB1TAmount9, this.SB1TAmount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit9, this.SB1TUnit9.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount9, this.SB1TD1Amount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit9, this.SB1TD1Unit9.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount9, this.SB1TD2Amount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit9, this.SB1TD2Unit9.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult9, this.SB1MathResult9.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType9, this.SB1MathSubType9.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount9, this.SB1TMAmount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit9, this.SB1TMUnit9.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount9, this.SB1TLAmount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit9, this.SB1TLUnit9.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount9, this.SB1TUAmount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit9, this.SB1TUUnit9.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator9, this.SB1MathOperator9.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression9, this.SB1MathExpression9.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO9, this.SB1BaseIO9.ToString());
                writer.WriteAttributeString(
                        cSB1Date9, this.SB1Date9.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType9, this.SB1MathType9);
                writer.WriteAttributeString(
                        cSB11Amount9, this.SB11Amount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit9, this.SB11Unit9.ToString());
                writer.WriteAttributeString(
                        cSB12Amount9, this.SB12Amount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit9, this.SB12Unit9);
                writer.WriteAttributeString(
                    cSB15Amount9, this.SB15Amount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit9, this.SB15Unit9.ToString());
                writer.WriteAttributeString(
                   cSB13Amount9, this.SB13Amount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit9, this.SB13Unit9);
                writer.WriteAttributeString(
                    cSB14Amount9, this.SB14Amount9.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit9, this.SB14Unit9);
            }
            if (this.SB1Name10 != string.Empty && this.SB1Name10 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name10, this.SB1Name10);
                writer.WriteAttributeString(
                    cSB1Description10, this.SB1Description10);
                writer.WriteAttributeString(
                    cSB1URL10, this.SB1URL10);
                writer.WriteAttributeString(
                        cSB1Label10, this.SB1Label10);
                writer.WriteAttributeString(
                        cSB1Type10, this.SB1Type10);
                writer.WriteAttributeString(
                    cSB1RelLabel10, this.SB1RelLabel10);
                writer.WriteAttributeString(
                    cSB1TAmount10, this.SB1TAmount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit10, this.SB1TUnit10.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount10, this.SB1TD1Amount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit10, this.SB1TD1Unit10.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount10, this.SB1TD2Amount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit10, this.SB1TD2Unit10.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult10, this.SB1MathResult10.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType10, this.SB1MathSubType10.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount10, this.SB1TMAmount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit10, this.SB1TMUnit10.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount10, this.SB1TLAmount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit10, this.SB1TLUnit10.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount10, this.SB1TUAmount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit10, this.SB1TUUnit10.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator10, this.SB1MathOperator10.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression10, this.SB1MathExpression10.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO10, this.SB1BaseIO10.ToString());
                writer.WriteAttributeString(
                        cSB1Date10, this.SB1Date10.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType10, this.SB1MathType10);
                writer.WriteAttributeString(
                        cSB11Amount10, this.SB11Amount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit10, this.SB11Unit10.ToString());
                writer.WriteAttributeString(
                        cSB12Amount10, this.SB12Amount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit10, this.SB12Unit10);
                writer.WriteAttributeString(
                    cSB15Amount10, this.SB15Amount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit10, this.SB15Unit10.ToString());
                writer.WriteAttributeString(
                   cSB13Amount10, this.SB13Amount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit10, this.SB13Unit10);
                writer.WriteAttributeString(
                    cSB14Amount10, this.SB14Amount10.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit10, this.SB14Unit10);
            }
            if (this.SB1Name11 != string.Empty && this.SB1Name11 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name11, this.SB1Name11);
                writer.WriteAttributeString(
                    cSB1Description11, this.SB1Description11);
                writer.WriteAttributeString(
                    cSB1URL11, this.SB1URL11);
                writer.WriteAttributeString(
                        cSB1Label11, this.SB1Label11);
                writer.WriteAttributeString(
                        cSB1Type11, this.SB1Type11);
                writer.WriteAttributeString(
                    cSB1RelLabel11, this.SB1RelLabel11);
                writer.WriteAttributeString(
                    cSB1TAmount11, this.SB1TAmount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit11, this.SB1TUnit11.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount11, this.SB1TD1Amount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit11, this.SB1TD1Unit11.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount11, this.SB1TD2Amount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit11, this.SB1TD2Unit11.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult11, this.SB1MathResult11.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType11, this.SB1MathSubType11.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount11, this.SB1TMAmount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit11, this.SB1TMUnit11.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount11, this.SB1TLAmount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit11, this.SB1TLUnit11.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount11, this.SB1TUAmount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit11, this.SB1TUUnit11.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator11, this.SB1MathOperator11.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression11, this.SB1MathExpression11.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO11, this.SB1BaseIO11.ToString());
                writer.WriteAttributeString(
                        cSB1Date11, this.SB1Date11.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType11, this.SB1MathType11);
                writer.WriteAttributeString(
                        cSB11Amount11, this.SB11Amount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit11, this.SB11Unit11.ToString());
                writer.WriteAttributeString(
                        cSB12Amount11, this.SB12Amount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit11, this.SB12Unit11);
                writer.WriteAttributeString(
                    cSB15Amount11, this.SB15Amount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit11, this.SB15Unit11.ToString());
                writer.WriteAttributeString(
                   cSB13Amount11, this.SB13Amount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit11, this.SB13Unit11);
                writer.WriteAttributeString(
                    cSB14Amount11, this.SB14Amount11.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit11, this.SB14Unit11);
            }
            if (this.SB1Name12 != string.Empty && this.SB1Name12 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name12, this.SB1Name12);
                writer.WriteAttributeString(
                    cSB1Description12, this.SB1Description12);
                writer.WriteAttributeString(
                    cSB1URL12, this.SB1URL12);
                writer.WriteAttributeString(
                        cSB1Label12, this.SB1Label12);
                writer.WriteAttributeString(
                        cSB1Type12, this.SB1Type12);
                writer.WriteAttributeString(
                    cSB1RelLabel12, this.SB1RelLabel12);
                writer.WriteAttributeString(
                    cSB1TAmount12, this.SB1TAmount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit12, this.SB1TUnit12.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount12, this.SB1TD1Amount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit12, this.SB1TD1Unit12.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount12, this.SB1TD2Amount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit12, this.SB1TD2Unit12.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult12, this.SB1MathResult12.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType12, this.SB1MathSubType12.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount12, this.SB1TMAmount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit12, this.SB1TMUnit12.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount12, this.SB1TLAmount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit12, this.SB1TLUnit12.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount12, this.SB1TUAmount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit12, this.SB1TUUnit12.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator12, this.SB1MathOperator12.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression12, this.SB1MathExpression12.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO12, this.SB1BaseIO12.ToString());
                writer.WriteAttributeString(
                        cSB1Date12, this.SB1Date12.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType12, this.SB1MathType12);
                writer.WriteAttributeString(
                        cSB11Amount12, this.SB11Amount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit12, this.SB11Unit12.ToString());
                writer.WriteAttributeString(
                        cSB12Amount12, this.SB12Amount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit12, this.SB12Unit12);
                writer.WriteAttributeString(
                    cSB15Amount12, this.SB15Amount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit12, this.SB15Unit12.ToString());
                writer.WriteAttributeString(
                   cSB13Amount12, this.SB13Amount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit12, this.SB13Unit12);
                writer.WriteAttributeString(
                    cSB14Amount12, this.SB14Amount12.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit12, this.SB14Unit12);
            }
            if (this.SB1Name13 != string.Empty && this.SB1Name13 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name13, this.SB1Name13);
                writer.WriteAttributeString(
                    cSB1Description13, this.SB1Description13);
                writer.WriteAttributeString(
                    cSB1URL13, this.SB1URL13);
                writer.WriteAttributeString(
                        cSB1Label13, this.SB1Label13);
                writer.WriteAttributeString(
                        cSB1Type13, this.SB1Type13);
                writer.WriteAttributeString(
                    cSB1RelLabel13, this.SB1RelLabel13);
                writer.WriteAttributeString(
                    cSB1TAmount13, this.SB1TAmount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit13, this.SB1TUnit13.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount13, this.SB1TD1Amount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit13, this.SB1TD1Unit13.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount13, this.SB1TD2Amount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit13, this.SB1TD2Unit13.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult13, this.SB1MathResult13.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType13, this.SB1MathSubType13.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount13, this.SB1TMAmount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit13, this.SB1TMUnit13.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount13, this.SB1TLAmount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit13, this.SB1TLUnit13.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount13, this.SB1TUAmount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit13, this.SB1TUUnit13.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator13, this.SB1MathOperator13.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression13, this.SB1MathExpression13.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO13, this.SB1BaseIO13.ToString());
                writer.WriteAttributeString(
                        cSB1Date13, this.SB1Date13.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType13, this.SB1MathType13);
                writer.WriteAttributeString(
                        cSB11Amount13, this.SB11Amount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit13, this.SB11Unit13.ToString());
                writer.WriteAttributeString(
                        cSB12Amount13, this.SB12Amount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit13, this.SB12Unit13);
                writer.WriteAttributeString(
                    cSB15Amount13, this.SB15Amount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit13, this.SB15Unit13.ToString());
                writer.WriteAttributeString(
                   cSB13Amount13, this.SB13Amount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit13, this.SB13Unit13);
                writer.WriteAttributeString(
                    cSB14Amount13, this.SB14Amount13.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit13, this.SB14Unit13);
            }
            if (this.SB1Name14 != string.Empty && this.SB1Name14 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name14, this.SB1Name14);
                writer.WriteAttributeString(
                    cSB1Description14, this.SB1Description14);
                writer.WriteAttributeString(
                    cSB1URL14, this.SB1URL14);
                writer.WriteAttributeString(
                        cSB1Label14, this.SB1Label14);
                writer.WriteAttributeString(
                        cSB1Type14, this.SB1Type14);
                writer.WriteAttributeString(
                    cSB1RelLabel14, this.SB1RelLabel14);
                writer.WriteAttributeString(
                    cSB1TAmount14, this.SB1TAmount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit14, this.SB1TUnit14.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount14, this.SB1TD1Amount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit14, this.SB1TD1Unit14.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount14, this.SB1TD2Amount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit14, this.SB1TD2Unit14.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult14, this.SB1MathResult14.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType14, this.SB1MathSubType14.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount14, this.SB1TMAmount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit14, this.SB1TMUnit14.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount14, this.SB1TLAmount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit14, this.SB1TLUnit14.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount14, this.SB1TUAmount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit14, this.SB1TUUnit14.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator14, this.SB1MathOperator14.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression14, this.SB1MathExpression14.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO14, this.SB1BaseIO14.ToString());
                writer.WriteAttributeString(
                        cSB1Date14, this.SB1Date14.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType14, this.SB1MathType14);
                writer.WriteAttributeString(
                        cSB11Amount14, this.SB11Amount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit14, this.SB11Unit14.ToString());
                writer.WriteAttributeString(
                        cSB12Amount14, this.SB12Amount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit14, this.SB12Unit14);
                writer.WriteAttributeString(
                    cSB15Amount14, this.SB15Amount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit14, this.SB15Unit14.ToString());
                writer.WriteAttributeString(
                   cSB13Amount14, this.SB13Amount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit14, this.SB13Unit14);
                writer.WriteAttributeString(
                    cSB14Amount14, this.SB14Amount14.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit14, this.SB14Unit14);
            }
            if (this.SB1Name15 != string.Empty && this.SB1Name15 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name15, this.SB1Name15);
                writer.WriteAttributeString(
                    cSB1Description15, this.SB1Description15);
                writer.WriteAttributeString(
                    cSB1URL15, this.SB1URL15);
                writer.WriteAttributeString(
                        cSB1Label15, this.SB1Label15);
                writer.WriteAttributeString(
                        cSB1Type15, this.SB1Type15);
                writer.WriteAttributeString(
                    cSB1RelLabel15, this.SB1RelLabel15);
                writer.WriteAttributeString(
                    cSB1TAmount15, this.SB1TAmount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit15, this.SB1TUnit15.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount15, this.SB1TD1Amount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit15, this.SB1TD1Unit15.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount15, this.SB1TD2Amount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit15, this.SB1TD2Unit15.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult15, this.SB1MathResult15.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType15, this.SB1MathSubType15.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount15, this.SB1TMAmount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit15, this.SB1TMUnit15.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount15, this.SB1TLAmount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit15, this.SB1TLUnit15.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount15, this.SB1TUAmount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit15, this.SB1TUUnit15.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator15, this.SB1MathOperator15.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression15, this.SB1MathExpression15.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO15, this.SB1BaseIO15.ToString());
                writer.WriteAttributeString(
                        cSB1Date15, this.SB1Date15.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType15, this.SB1MathType15);
                writer.WriteAttributeString(
                        cSB11Amount15, this.SB11Amount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit15, this.SB11Unit15.ToString());
                writer.WriteAttributeString(
                        cSB12Amount15, this.SB12Amount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit15, this.SB12Unit15);
                writer.WriteAttributeString(
                    cSB15Amount15, this.SB15Amount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit15, this.SB15Unit15.ToString());
                writer.WriteAttributeString(
                   cSB13Amount15, this.SB13Amount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit15, this.SB13Unit15);
                writer.WriteAttributeString(
                    cSB14Amount15, this.SB14Amount15.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit15, this.SB14Unit15);
            }
            if (this.SB1Name16 != string.Empty && this.SB1Name16 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name16, this.SB1Name16);
                writer.WriteAttributeString(
                    cSB1Description16, this.SB1Description16);
                writer.WriteAttributeString(
                    cSB1URL16, this.SB1URL16);
                writer.WriteAttributeString(
                        cSB1Label16, this.SB1Label16);
                writer.WriteAttributeString(
                        cSB1Type16, this.SB1Type16);
                writer.WriteAttributeString(
                    cSB1RelLabel16, this.SB1RelLabel16);
                writer.WriteAttributeString(
                    cSB1TAmount16, this.SB1TAmount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit16, this.SB1TUnit16.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount16, this.SB1TD1Amount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit16, this.SB1TD1Unit16.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount16, this.SB1TD2Amount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit16, this.SB1TD2Unit16.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult16, this.SB1MathResult16.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType16, this.SB1MathSubType16.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount16, this.SB1TMAmount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit16, this.SB1TMUnit16.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount16, this.SB1TLAmount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit16, this.SB1TLUnit16.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount16, this.SB1TUAmount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit16, this.SB1TUUnit16.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator16, this.SB1MathOperator16.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression16, this.SB1MathExpression16.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO16, this.SB1BaseIO16.ToString());
                writer.WriteAttributeString(
                        cSB1Date16, this.SB1Date16.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType16, this.SB1MathType16);
                writer.WriteAttributeString(
                        cSB11Amount16, this.SB11Amount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit16, this.SB11Unit16.ToString());
                writer.WriteAttributeString(
                        cSB12Amount16, this.SB12Amount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit16, this.SB12Unit16);
                writer.WriteAttributeString(
                    cSB15Amount16, this.SB15Amount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit16, this.SB15Unit16.ToString());
                writer.WriteAttributeString(
                   cSB13Amount16, this.SB13Amount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit16, this.SB13Unit16);
                writer.WriteAttributeString(
                    cSB14Amount16, this.SB14Amount16.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit16, this.SB14Unit16);
            }
            if (this.SB1Name17 != string.Empty && this.SB1Name17 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name17, this.SB1Name17);
                writer.WriteAttributeString(
                    cSB1Description17, this.SB1Description17);
                writer.WriteAttributeString(
                    cSB1URL17, this.SB1URL17);
                writer.WriteAttributeString(
                        cSB1Label17, this.SB1Label17);
                writer.WriteAttributeString(
                        cSB1Type17, this.SB1Type17);
                writer.WriteAttributeString(
                    cSB1RelLabel17, this.SB1RelLabel17);
                writer.WriteAttributeString(
                    cSB1TAmount17, this.SB1TAmount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit17, this.SB1TUnit17.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount17, this.SB1TD1Amount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit17, this.SB1TD1Unit17.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount17, this.SB1TD2Amount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit17, this.SB1TD2Unit17.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult17, this.SB1MathResult17.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType17, this.SB1MathSubType17.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount17, this.SB1TMAmount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit17, this.SB1TMUnit17.ToString());
                writer.WriteAttributeString(
                   cSB1TLAmount17, this.SB1TLAmount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit17, this.SB1TLUnit17.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount17, this.SB1TUAmount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit17, this.SB1TUUnit17.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator17, this.SB1MathOperator17.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression17, this.SB1MathExpression17.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO17, this.SB1BaseIO17.ToString());
                writer.WriteAttributeString(
                        cSB1Date17, this.SB1Date17.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType17, this.SB1MathType17);
                writer.WriteAttributeString(
                        cSB11Amount17, this.SB11Amount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit17, this.SB11Unit17.ToString());
                writer.WriteAttributeString(
                        cSB12Amount17, this.SB12Amount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit17, this.SB12Unit17);
                writer.WriteAttributeString(
                    cSB15Amount17, this.SB15Amount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit17, this.SB15Unit17.ToString());
                writer.WriteAttributeString(
                    cSB13Amount17, this.SB13Amount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit17, this.SB13Unit17);
                writer.WriteAttributeString(
                    cSB14Amount17, this.SB14Amount17.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit17, this.SB14Unit17);
            }
            if (this.SB1Name18 != string.Empty && this.SB1Name18 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name18, this.SB1Name18);
                writer.WriteAttributeString(
                    cSB1Description18, this.SB1Description18);
                writer.WriteAttributeString(
                    cSB1URL18, this.SB1URL18);
                writer.WriteAttributeString(
                        cSB1Label18, this.SB1Label18);
                writer.WriteAttributeString(
                        cSB1Type18, this.SB1Type18);
                writer.WriteAttributeString(
                    cSB1RelLabel18, this.SB1RelLabel18);
                writer.WriteAttributeString(
                    cSB1TAmount18, this.SB1TAmount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit18, this.SB1TUnit18.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount18, this.SB1TD1Amount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit18, this.SB1TD1Unit18.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount18, this.SB1TD2Amount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit18, this.SB1TD2Unit18.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult18, this.SB1MathResult18.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType18, this.SB1MathSubType18.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount18, this.SB1TMAmount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit18, this.SB1TMUnit18.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount18, this.SB1TLAmount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit18, this.SB1TLUnit18.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount18, this.SB1TUAmount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit18, this.SB1TUUnit18.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator18, this.SB1MathOperator18.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression18, this.SB1MathExpression18.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO18, this.SB1BaseIO18.ToString());
                writer.WriteAttributeString(
                        cSB1Date18, this.SB1Date18.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType18, this.SB1MathType18);
                writer.WriteAttributeString(
                        cSB11Amount18, this.SB11Amount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit18, this.SB11Unit18.ToString());
                writer.WriteAttributeString(
                        cSB12Amount18, this.SB12Amount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit18, this.SB12Unit18);
                writer.WriteAttributeString(
                    cSB15Amount18, this.SB15Amount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit18, this.SB15Unit18.ToString());
                writer.WriteAttributeString(
                   cSB13Amount18, this.SB13Amount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit18, this.SB13Unit18);
                writer.WriteAttributeString(
                    cSB14Amount18, this.SB14Amount18.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit18, this.SB14Unit18);
            }
            if (this.SB1Name19 != string.Empty && this.SB1Name19 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name19, this.SB1Name19);
                writer.WriteAttributeString(
                    cSB1Description19, this.SB1Description19);
                writer.WriteAttributeString(
                    cSB1URL19, this.SB1URL19);
                writer.WriteAttributeString(
                        cSB1Label19, this.SB1Label19);
                writer.WriteAttributeString(
                        cSB1Type19, this.SB1Type19);
                writer.WriteAttributeString(
                    cSB1RelLabel19, this.SB1RelLabel19);
                writer.WriteAttributeString(
                    cSB1TAmount19, this.SB1TAmount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit19, this.SB1TUnit19.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount19, this.SB1TD1Amount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit19, this.SB1TD1Unit19.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount19, this.SB1TD2Amount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit19, this.SB1TD2Unit19.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult19, this.SB1MathResult19.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType19, this.SB1MathSubType19.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount19, this.SB1TMAmount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit19, this.SB1TMUnit19.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount19, this.SB1TLAmount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit19, this.SB1TLUnit19.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount19, this.SB1TUAmount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit19, this.SB1TUUnit19.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator19, this.SB1MathOperator19.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression19, this.SB1MathExpression19.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO19, this.SB1BaseIO19.ToString());
                writer.WriteAttributeString(
                        cSB1Date19, this.SB1Date19.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType19, this.SB1MathType19);
                writer.WriteAttributeString(
                        cSB11Amount19, this.SB11Amount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit19, this.SB11Unit19.ToString());
                writer.WriteAttributeString(
                        cSB12Amount19, this.SB12Amount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit19, this.SB12Unit19);
                writer.WriteAttributeString(
                    cSB15Amount19, this.SB15Amount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit19, this.SB15Unit19.ToString());
                writer.WriteAttributeString(
                   cSB13Amount19, this.SB13Amount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit19, this.SB13Unit19);
                writer.WriteAttributeString(
                    cSB14Amount19, this.SB14Amount19.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit19, this.SB14Unit19);
            }
            if (this.SB1Name20 != string.Empty && this.SB1Name20 != Constants.NONE)
            {
                writer.WriteAttributeString(
                        cSB1Name20, this.SB1Name20);
                writer.WriteAttributeString(
                    cSB1Description20, this.SB1Description20);
                writer.WriteAttributeString(
                    cSB1URL20, this.SB1URL20);
                writer.WriteAttributeString(
                        cSB1Label20, this.SB1Label20);
                writer.WriteAttributeString(
                        cSB1Type20, this.SB1Type20);
                writer.WriteAttributeString(
                    cSB1RelLabel20, this.SB1RelLabel20);
                writer.WriteAttributeString(
                    cSB1TAmount20, this.SB1TAmount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUnit20, this.SB1TUnit20.ToString());
                writer.WriteAttributeString(
                    cSB1TD1Amount20, this.SB1TD1Amount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD1Unit20, this.SB1TD1Unit20.ToString());
                writer.WriteAttributeString(
                    cSB1TD2Amount20, this.SB1TD2Amount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TD2Unit20, this.SB1TD2Unit20.ToString());
                writer.WriteAttributeString(
                  cSB1MathResult20, this.SB1MathResult20.ToString());
                writer.WriteAttributeString(
                  cSB1MathSubType20, this.SB1MathSubType20.ToString());

                writer.WriteAttributeString(
                    cSB1TMAmount20, this.SB1TMAmount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TMUnit20, this.SB1TMUnit20.ToString());
                writer.WriteAttributeString(
                    cSB1TLAmount20, this.SB1TLAmount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TLUnit20, this.SB1TLUnit20.ToString());
                writer.WriteAttributeString(
                    cSB1TUAmount20, this.SB1TUAmount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB1TUUnit20, this.SB1TUUnit20.ToString());
                writer.WriteAttributeString(
                  cSB1MathOperator20, this.SB1MathOperator20.ToString());
                writer.WriteAttributeString(
                    cSB1MathExpression20, this.SB1MathExpression20.ToString());
                writer.WriteAttributeString(
                    cSB1BaseIO20, this.SB1BaseIO20.ToString());
                writer.WriteAttributeString(
                        cSB1Date20, this.SB1Date20.ToString("d", DateTimeFormatInfo.InvariantInfo));
                writer.WriteAttributeString(
                        cSB1MathType20, this.SB1MathType20);
                writer.WriteAttributeString(
                        cSB11Amount20, this.SB11Amount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                        cSB11Unit20, this.SB11Unit20.ToString());
                writer.WriteAttributeString(
                        cSB12Amount20, this.SB12Amount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB12Unit20, this.SB12Unit20);
                writer.WriteAttributeString(
                    cSB15Amount20, this.SB15Amount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB15Unit20, this.SB15Unit20.ToString());
                writer.WriteAttributeString(
                    cSB13Amount20, this.SB13Amount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB13Unit20, this.SB13Unit20);
                writer.WriteAttributeString(
                    cSB14Amount20, this.SB14Amount20.ToString("N4", CultureInfo.InvariantCulture));
                writer.WriteAttributeString(
                    cSB14Unit20, this.SB14Unit20);
            }
        }
        public virtual async Task SetSB1BaseAttributesAsync(string attNameExtension,
           XmlWriter writer)
        {
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1Score, string.Empty, this.SB1Score.ToString("N4", CultureInfo.InvariantCulture));
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreUnit, string.Empty, this.SB1ScoreUnit);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreD1Amount, string.Empty, this.SB1ScoreD1Amount.ToString("N4", CultureInfo.InvariantCulture));
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreD1Unit, string.Empty, this.SB1ScoreD1Unit);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreD2Amount, string.Empty, this.SB1ScoreD2Amount.ToString("N4", CultureInfo.InvariantCulture));
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreD2Unit, string.Empty, this.SB1ScoreD2Unit);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreMathExpression, string.Empty, this.SB1ScoreMathExpression);
            string sFormat = this.SB1ScoreM.ToString("N4", CultureInfo.InvariantCulture);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreM, string.Empty, this.SB1ScoreM.ToString("N4", CultureInfo.InvariantCulture));
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreMUnit, string.Empty, this.SB1ScoreMUnit);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreLAmount, string.Empty, this.SB1ScoreLAmount.ToString("N4", CultureInfo.InvariantCulture));
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreLUnit, string.Empty, this.SB1ScoreLUnit);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreUAmount, string.Empty, this.SB1ScoreUAmount.ToString("N4", CultureInfo.InvariantCulture));
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreUUnit, string.Empty, this.SB1ScoreUUnit);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreDistType, string.Empty, this.SB1ScoreDistType);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreMathType, string.Empty, this.SB1ScoreMathType);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreMathSubType, string.Empty, this.SB1ScoreMathSubType);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1ScoreMathResult, string.Empty, this.SB1ScoreMathResult);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1JointDataURL, string.Empty, this.SB1JointDataURL);
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1Iterations, string.Empty, this.SB1Iterations.ToString());
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1CILevel, string.Empty, this.SB1CILevel.ToString());
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1Random, string.Empty, this.SB1Random.ToString());
            await writer.WriteAttributeStringAsync(string.Empty,
                cSB1BaseIO, string.Empty, this.SB1BaseIO);
            if (this.SB1Name1 != string.Empty && this.SB1Name1 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name1, string.Empty, this.SB1Name1);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description1, string.Empty, this.SB1Description1);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL1, string.Empty, this.SB1URL1);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label1, string.Empty, this.SB1Label1);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type1, string.Empty, this.SB1Type1);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel1, string.Empty, this.SB1RelLabel1);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount1, string.Empty, this.SB1TAmount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit1, string.Empty, this.SB1TUnit1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount1, string.Empty, this.SB1TD1Amount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit1, string.Empty, this.SB1TD1Unit1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount1, string.Empty, this.SB1TD2Amount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit1, string.Empty, this.SB1TD2Unit1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult1, string.Empty, this.SB1MathResult1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType1, string.Empty, this.SB1MathSubType1.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount1, string.Empty, this.SB1TMAmount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit1, string.Empty, this.SB1TMUnit1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount1, string.Empty, this.SB1TLAmount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit1, string.Empty, this.SB1TLUnit1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount1, string.Empty, this.SB1TUAmount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit1, string.Empty, this.SB1TUUnit1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator1, string.Empty, this.SB1MathOperator1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression1, string.Empty, this.SB1MathExpression1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO1, string.Empty, this.SB1BaseIO1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date1, string.Empty, this.SB1Date1.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType1, string.Empty, this.SB1MathType1);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount1, string.Empty, this.SB11Amount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit1, string.Empty, this.SB11Unit1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount1, string.Empty, this.SB12Amount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit1, string.Empty, this.SB12Unit1);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount1, string.Empty, this.SB15Amount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit1, string.Empty, this.SB15Unit1.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Amount1, string.Empty, this.SB13Amount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit1, string.Empty, this.SB13Unit1);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount1, string.Empty, this.SB14Amount1.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit1, string.Empty, this.SB14Unit1);
            }
            if (this.SB1Name2 != string.Empty && this.SB1Name2 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name2, string.Empty, this.SB1Name2);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description2, string.Empty, this.SB1Description2);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL2, string.Empty, this.SB1URL2);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label2, string.Empty, this.SB1Label2);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type2, string.Empty, this.SB1Type2);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel2, string.Empty, this.SB1RelLabel2);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount2, string.Empty, this.SB1TAmount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit2, string.Empty, this.SB1TUnit2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount2, string.Empty, this.SB1TD1Amount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit2, string.Empty, this.SB1TD1Unit2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount2, string.Empty, this.SB1TD2Amount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit2, string.Empty, this.SB1TD2Unit2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult2, string.Empty, this.SB1MathResult2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType2, string.Empty, this.SB1MathSubType2.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount2, string.Empty, this.SB1TMAmount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit2, string.Empty, this.SB1TMUnit2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB1TLAmount2, string.Empty, this.SB1TLAmount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit2, string.Empty, this.SB1TLUnit2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount2, string.Empty, this.SB1TUAmount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit2, string.Empty, this.SB1TUUnit2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator2, string.Empty, this.SB1MathOperator2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression2, string.Empty, this.SB1MathExpression2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO2, string.Empty, this.SB1BaseIO2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date2, string.Empty, this.SB1Date2.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType2, string.Empty, this.SB1MathType2);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount2, string.Empty, this.SB11Amount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit2, string.Empty, this.SB11Unit2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount2, string.Empty, this.SB12Amount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit2, string.Empty, this.SB12Unit2);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount2, string.Empty, this.SB15Amount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit2, string.Empty, this.SB15Unit2.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount2, string.Empty, this.SB13Amount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit2, string.Empty, this.SB13Unit2);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount2, string.Empty, this.SB14Amount2.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit2, string.Empty, this.SB14Unit2);
            }
            if (this.SB1Name3 != string.Empty && this.SB1Name3 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name3, string.Empty, this.SB1Name3);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description3, string.Empty, this.SB1Description3);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL3, string.Empty, this.SB1URL3);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label3, string.Empty, this.SB1Label3);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type3, string.Empty, this.SB1Type3);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel3, string.Empty, this.SB1RelLabel3);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount3, string.Empty, this.SB1TAmount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit3, string.Empty, this.SB1TUnit3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount3, string.Empty, this.SB1TD1Amount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit3, string.Empty, this.SB1TD1Unit3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount3, string.Empty, this.SB1TD2Amount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit3, string.Empty, this.SB1TD2Unit3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult3, string.Empty, this.SB1MathResult3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType3, string.Empty, this.SB1MathSubType3.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount3, string.Empty, this.SB1TMAmount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit3, string.Empty, this.SB1TMUnit3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount3, string.Empty, this.SB1TLAmount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit3, string.Empty, this.SB1TLUnit3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount3, string.Empty, this.SB1TUAmount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit3, string.Empty, this.SB1TUUnit3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator3, string.Empty, this.SB1MathOperator3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression3, string.Empty, this.SB1MathExpression3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO3, string.Empty, this.SB1BaseIO3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date3, string.Empty, this.SB1Date3.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType3, string.Empty, this.SB1MathType3);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount3, string.Empty, this.SB11Amount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit3, string.Empty, this.SB11Unit3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount3, string.Empty, this.SB12Amount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit3, string.Empty, this.SB12Unit3);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount3, string.Empty, this.SB15Amount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit3, string.Empty, this.SB15Unit3.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Amount3, string.Empty, this.SB13Amount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit3, string.Empty, this.SB13Unit3);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount3, string.Empty, this.SB14Amount3.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit3, string.Empty, this.SB14Unit3);
            }
            if (this.SB1Name4 != string.Empty && this.SB1Name4 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name4, string.Empty, this.SB1Name4);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description4, string.Empty, this.SB1Description4);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL4, string.Empty, this.SB1URL4);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label4, string.Empty, this.SB1Label4);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type4, string.Empty, this.SB1Type4);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel4, string.Empty, this.SB1RelLabel4);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount4, string.Empty, this.SB1TAmount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit4, string.Empty, this.SB1TUnit4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount4, string.Empty, this.SB1TD1Amount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit4, string.Empty, this.SB1TD1Unit4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount4, string.Empty, this.SB1TD2Amount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit4, string.Empty, this.SB1TD2Unit4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult4, string.Empty, this.SB1MathResult4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType4, string.Empty, this.SB1MathSubType4.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount4, string.Empty, this.SB1TMAmount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit4, string.Empty, this.SB1TMUnit4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount4, string.Empty, this.SB1TLAmount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit4, string.Empty, this.SB1TLUnit4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount4, string.Empty, this.SB1TUAmount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit4, string.Empty, this.SB1TUUnit4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator4, string.Empty, this.SB1MathOperator4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression4, string.Empty, this.SB1MathExpression4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO4, string.Empty, this.SB1BaseIO4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date4, string.Empty, this.SB1Date4.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType4, string.Empty, this.SB1MathType4);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount4, string.Empty, this.SB11Amount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit4, string.Empty, this.SB11Unit4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount4, string.Empty, this.SB12Amount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit4, string.Empty, this.SB12Unit4);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount4, string.Empty, this.SB15Amount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit4, string.Empty, this.SB15Unit4.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount4, string.Empty, this.SB13Amount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit4, string.Empty, this.SB13Unit4);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount4, string.Empty, this.SB14Amount4.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit4, string.Empty, this.SB14Unit4);
            }
            if (this.SB1Name5 != string.Empty && this.SB1Name5 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name5, string.Empty, this.SB1Name5);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description5, string.Empty, this.SB1Description5);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL5, string.Empty, this.SB1URL5);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label5, string.Empty, this.SB1Label5);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type5, string.Empty, this.SB1Type5);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel5, string.Empty, this.SB1RelLabel5);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount5, string.Empty, this.SB1TAmount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit5, string.Empty, this.SB1TUnit5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount5, string.Empty, this.SB1TD1Amount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit5, string.Empty, this.SB1TD1Unit5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount5, string.Empty, this.SB1TD2Amount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit5, string.Empty, this.SB1TD2Unit5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult5, string.Empty, this.SB1MathResult5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType5, string.Empty, this.SB1MathSubType5.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount5, string.Empty, this.SB1TMAmount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit5, string.Empty, this.SB1TMUnit5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB1TLAmount5, string.Empty, this.SB1TLAmount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit5, string.Empty, this.SB1TLUnit5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount5, string.Empty, this.SB1TUAmount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit5, string.Empty, this.SB1TUUnit5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator5, string.Empty, this.SB1MathOperator5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression5, string.Empty, this.SB1MathExpression5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO5, string.Empty, this.SB1BaseIO5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date5, string.Empty, this.SB1Date5.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType5, string.Empty, this.SB1MathType5);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount5, string.Empty, this.SB11Amount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit5, string.Empty, this.SB11Unit5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount5, string.Empty, this.SB12Amount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit5, string.Empty, this.SB12Unit5);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount5, string.Empty, this.SB15Amount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit5, string.Empty, this.SB15Unit5.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount5, string.Empty, this.SB13Amount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit5, string.Empty, this.SB13Unit5);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount5, string.Empty, this.SB14Amount5.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit5, string.Empty, this.SB14Unit5);
            }
            if (this.SB1Name6 != string.Empty && this.SB1Name6 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name6, string.Empty, this.SB1Name6);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description6, string.Empty, this.SB1Description6);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL6, string.Empty, this.SB1URL6);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label6, string.Empty, this.SB1Label6);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type6, string.Empty, this.SB1Type6);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel6, string.Empty, this.SB1RelLabel6);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount6, string.Empty, this.SB1TAmount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit6, string.Empty, this.SB1TUnit6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount6, string.Empty, this.SB1TD1Amount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit6, string.Empty, this.SB1TD1Unit6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount6, string.Empty, this.SB1TD2Amount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit6, string.Empty, this.SB1TD2Unit6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult6, string.Empty, this.SB1MathResult6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType6, string.Empty, this.SB1MathSubType6.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount6, string.Empty, this.SB1TMAmount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit6, string.Empty, this.SB1TMUnit6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount6, string.Empty, this.SB1TLAmount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit6, string.Empty, this.SB1TLUnit6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount6, string.Empty, this.SB1TUAmount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit6, string.Empty, this.SB1TUUnit6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator6, string.Empty, this.SB1MathOperator6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression6, string.Empty, this.SB1MathExpression6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO6, string.Empty, this.SB1BaseIO6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date6, string.Empty, this.SB1Date6.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType6, string.Empty, this.SB1MathType6);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount6, string.Empty, this.SB11Amount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit6, string.Empty, this.SB11Unit6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount6, string.Empty, this.SB12Amount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit6, string.Empty, this.SB12Unit6);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount6, string.Empty, this.SB15Amount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit6, string.Empty, this.SB15Unit6.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount6, string.Empty, this.SB13Amount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit6, string.Empty, this.SB13Unit6);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount6, string.Empty, this.SB14Amount6.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit6, string.Empty, this.SB14Unit6);
            }
            if (this.SB1Name7 != string.Empty && this.SB1Name7 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name7, string.Empty, this.SB1Name7);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description7, string.Empty, this.SB1Description7);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL7, string.Empty, this.SB1URL7);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label7, string.Empty, this.SB1Label7);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type7, string.Empty, this.SB1Type7);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel7, string.Empty, this.SB1RelLabel7);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount7, string.Empty, this.SB1TAmount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit7, string.Empty, this.SB1TUnit7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount7, string.Empty, this.SB1TD1Amount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit7, string.Empty, this.SB1TD1Unit7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount7, string.Empty, this.SB1TD2Amount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit7, string.Empty, this.SB1TD2Unit7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult7, string.Empty, this.SB1MathResult7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType7, string.Empty, this.SB1MathSubType7.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount7, string.Empty, this.SB1TMAmount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit7, string.Empty, this.SB1TMUnit7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount7, string.Empty, this.SB1TLAmount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit7, string.Empty, this.SB1TLUnit7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount7, string.Empty, this.SB1TUAmount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit7, string.Empty, this.SB1TUUnit7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator7, string.Empty, this.SB1MathOperator7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression7, string.Empty, this.SB1MathExpression7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO7, string.Empty, this.SB1BaseIO7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date7, string.Empty, this.SB1Date7.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType7, string.Empty, this.SB1MathType7);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount7, string.Empty, this.SB11Amount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit7, string.Empty, this.SB11Unit7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount7, string.Empty, this.SB12Amount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit7, string.Empty, this.SB12Unit7);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount7, string.Empty, this.SB15Amount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit7, string.Empty, this.SB15Unit7.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount7, string.Empty, this.SB13Amount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit7, string.Empty, this.SB13Unit7);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount7, string.Empty, this.SB14Amount7.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit7, string.Empty, this.SB14Unit7);
            }
            if (this.SB1Name8 != string.Empty && this.SB1Name8 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name8, string.Empty, this.SB1Name8);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description8, string.Empty, this.SB1Description8);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL8, string.Empty, this.SB1URL8);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label8, string.Empty, this.SB1Label8);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type8, string.Empty, this.SB1Type8);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel8, string.Empty, this.SB1RelLabel8);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount8, string.Empty, this.SB1TAmount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit8, string.Empty, this.SB1TUnit8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount8, string.Empty, this.SB1TD1Amount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit8, string.Empty, this.SB1TD1Unit8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount8, string.Empty, this.SB1TD2Amount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit8, string.Empty, this.SB1TD2Unit8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult8, string.Empty, this.SB1MathResult8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType8, string.Empty, this.SB1MathSubType8.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount8, string.Empty, this.SB1TMAmount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit8, string.Empty, this.SB1TMUnit8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount8, string.Empty, this.SB1TLAmount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit8, string.Empty, this.SB1TLUnit8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount8, string.Empty, this.SB1TUAmount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit8, string.Empty, this.SB1TUUnit8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator8, string.Empty, this.SB1MathOperator8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression8, string.Empty, this.SB1MathExpression8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO8, string.Empty, this.SB1BaseIO8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date8, string.Empty, this.SB1Date8.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType8, string.Empty, this.SB1MathType8);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount8, string.Empty, this.SB11Amount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit8, string.Empty, this.SB11Unit8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount8, string.Empty, this.SB12Amount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit8, string.Empty, this.SB12Unit8);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount8, string.Empty, this.SB15Amount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit8, string.Empty, this.SB15Unit8.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount8, string.Empty, this.SB13Amount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit8, string.Empty, this.SB13Unit8);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount8, string.Empty, this.SB14Amount8.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit8, string.Empty, this.SB14Unit8);
            }
            if (this.SB1Name9 != string.Empty && this.SB1Name9 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name9, string.Empty, this.SB1Name9);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description9, string.Empty, this.SB1Description9);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL9, string.Empty, this.SB1URL9);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label9, string.Empty, this.SB1Label9);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type9, string.Empty, this.SB1Type9);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel9, string.Empty, this.SB1RelLabel9);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount9, string.Empty, this.SB1TAmount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit9, string.Empty, this.SB1TUnit9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount9, string.Empty, this.SB1TD1Amount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit9, string.Empty, this.SB1TD1Unit9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount9, string.Empty, this.SB1TD2Amount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit9, string.Empty, this.SB1TD2Unit9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult9, string.Empty, this.SB1MathResult9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType9, string.Empty, this.SB1MathSubType9.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount9, string.Empty, this.SB1TMAmount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit9, string.Empty, this.SB1TMUnit9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount9, string.Empty, this.SB1TLAmount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit9, string.Empty, this.SB1TLUnit9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount9, string.Empty, this.SB1TUAmount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit9, string.Empty, this.SB1TUUnit9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator9, string.Empty, this.SB1MathOperator9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression9, string.Empty, this.SB1MathExpression9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO9, string.Empty, this.SB1BaseIO9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date9, string.Empty, this.SB1Date9.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType9, string.Empty, this.SB1MathType9);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount9, string.Empty, this.SB11Amount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit9, string.Empty, this.SB11Unit9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount9, string.Empty, this.SB12Amount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit9, string.Empty, this.SB12Unit9);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount9, string.Empty, this.SB15Amount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit9, string.Empty, this.SB15Unit9.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount9, string.Empty, this.SB13Amount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit9, string.Empty, this.SB13Unit9);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount9, string.Empty, this.SB14Amount9.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit9, string.Empty, this.SB14Unit9);
            }
            if (this.SB1Name10 != string.Empty && this.SB1Name10 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name10, string.Empty, this.SB1Name10);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description10, string.Empty, this.SB1Description10);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL10, string.Empty, this.SB1URL10);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label10, string.Empty, this.SB1Label10);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type10, string.Empty, this.SB1Type10);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel10, string.Empty, this.SB1RelLabel10);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount10, string.Empty, this.SB1TAmount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit10, string.Empty, this.SB1TUnit10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount10, string.Empty, this.SB1TD1Amount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit10, string.Empty, this.SB1TD1Unit10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount10, string.Empty, this.SB1TD2Amount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit10, string.Empty, this.SB1TD2Unit10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult10, string.Empty, this.SB1MathResult10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType10, string.Empty, this.SB1MathSubType10.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount10, string.Empty, this.SB1TMAmount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit10, string.Empty, this.SB1TMUnit10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount10, string.Empty, this.SB1TLAmount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit10, string.Empty, this.SB1TLUnit10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount10, string.Empty, this.SB1TUAmount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit10, string.Empty, this.SB1TUUnit10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator10, string.Empty, this.SB1MathOperator10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression10, string.Empty, this.SB1MathExpression10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO10, string.Empty, this.SB1BaseIO10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date10, string.Empty, this.SB1Date10.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType10, string.Empty, this.SB1MathType10);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount10, string.Empty, this.SB11Amount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit10, string.Empty, this.SB11Unit10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount10, string.Empty, this.SB12Amount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit10, string.Empty, this.SB12Unit10);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount10, string.Empty, this.SB15Amount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit10, string.Empty, this.SB15Unit10.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount10, string.Empty, this.SB13Amount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit10, string.Empty, this.SB13Unit10);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount10, string.Empty, this.SB14Amount10.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit10, string.Empty, this.SB14Unit10);
            }
            if (this.SB1Name11 != string.Empty && this.SB1Name11 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name11, string.Empty, this.SB1Name11);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description11, string.Empty, this.SB1Description11);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL11, string.Empty, this.SB1URL11);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label11, string.Empty, this.SB1Label11);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type11, string.Empty, this.SB1Type11);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel11, string.Empty, this.SB1RelLabel11);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount11, string.Empty, this.SB1TAmount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit11, string.Empty, this.SB1TUnit11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount11, string.Empty, this.SB1TD1Amount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit11, string.Empty, this.SB1TD1Unit11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount11, string.Empty, this.SB1TD2Amount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit11, string.Empty, this.SB1TD2Unit11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult11, string.Empty, this.SB1MathResult11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType11, string.Empty, this.SB1MathSubType11.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount11, string.Empty, this.SB1TMAmount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit11, string.Empty, this.SB1TMUnit11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount11, string.Empty, this.SB1TLAmount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit11, string.Empty, this.SB1TLUnit11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount11, string.Empty, this.SB1TUAmount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit11, string.Empty, this.SB1TUUnit11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator11, string.Empty, this.SB1MathOperator11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression11, string.Empty, this.SB1MathExpression11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO11, string.Empty, this.SB1BaseIO11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date11, string.Empty, this.SB1Date11.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType11, string.Empty, this.SB1MathType11);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount11, string.Empty, this.SB11Amount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit11, string.Empty, this.SB11Unit11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount11, string.Empty, this.SB12Amount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit11, string.Empty, this.SB12Unit11);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount11, string.Empty, this.SB15Amount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit11, string.Empty, this.SB15Unit11.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount11, string.Empty, this.SB13Amount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit11, string.Empty, this.SB13Unit11);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount11, string.Empty, this.SB14Amount11.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit11, string.Empty, this.SB14Unit11);
            }
            if (this.SB1Name12 != string.Empty && this.SB1Name12 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name12, string.Empty, this.SB1Name12);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description12, string.Empty, this.SB1Description12);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL12, string.Empty, this.SB1URL12);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label12, string.Empty, this.SB1Label12);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type12, string.Empty, this.SB1Type12);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel12, string.Empty, this.SB1RelLabel12);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount12, string.Empty, this.SB1TAmount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit12, string.Empty, this.SB1TUnit12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount12, string.Empty, this.SB1TD1Amount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit12, string.Empty, this.SB1TD1Unit12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount12, string.Empty, this.SB1TD2Amount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit12, string.Empty, this.SB1TD2Unit12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult12, string.Empty, this.SB1MathResult12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType12, string.Empty, this.SB1MathSubType12.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount12, string.Empty, this.SB1TMAmount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit12, string.Empty, this.SB1TMUnit12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount12, string.Empty, this.SB1TLAmount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit12, string.Empty, this.SB1TLUnit12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount12, string.Empty, this.SB1TUAmount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit12, string.Empty, this.SB1TUUnit12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator12, string.Empty, this.SB1MathOperator12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression12, string.Empty, this.SB1MathExpression12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO12, string.Empty, this.SB1BaseIO12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date12, string.Empty, this.SB1Date12.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType12, string.Empty, this.SB1MathType12);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount12, string.Empty, this.SB11Amount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit12, string.Empty, this.SB11Unit12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount12, string.Empty, this.SB12Amount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit12, string.Empty, this.SB12Unit12);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount12, string.Empty, this.SB15Amount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit12, string.Empty, this.SB15Unit12.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount12, string.Empty, this.SB13Amount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit12, string.Empty, this.SB13Unit12);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount12, string.Empty, this.SB14Amount12.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit12, string.Empty, this.SB14Unit12);
            }
            if (this.SB1Name13 != string.Empty && this.SB1Name13 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name13, string.Empty, this.SB1Name13);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description13, string.Empty, this.SB1Description13);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL13, string.Empty, this.SB1URL13);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label13, string.Empty, this.SB1Label13);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type13, string.Empty, this.SB1Type13);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel13, string.Empty, this.SB1RelLabel13);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount13, string.Empty, this.SB1TAmount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit13, string.Empty, this.SB1TUnit13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount13, string.Empty, this.SB1TD1Amount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit13, string.Empty, this.SB1TD1Unit13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount13, string.Empty, this.SB1TD2Amount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit13, string.Empty, this.SB1TD2Unit13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult13, string.Empty, this.SB1MathResult13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType13, string.Empty, this.SB1MathSubType13.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount13, string.Empty, this.SB1TMAmount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit13, string.Empty, this.SB1TMUnit13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount13, string.Empty, this.SB1TLAmount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit13, string.Empty, this.SB1TLUnit13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount13, string.Empty, this.SB1TUAmount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit13, string.Empty, this.SB1TUUnit13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator13, string.Empty, this.SB1MathOperator13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression13, string.Empty, this.SB1MathExpression13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO13, string.Empty, this.SB1BaseIO13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date13, string.Empty, this.SB1Date13.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType13, string.Empty, this.SB1MathType13);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount13, string.Empty, this.SB11Amount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit13, string.Empty, this.SB11Unit13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount13, string.Empty, this.SB12Amount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit13, string.Empty, this.SB12Unit13);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount13, string.Empty, this.SB15Amount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit13, string.Empty, this.SB15Unit13.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount13, string.Empty, this.SB13Amount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit13, string.Empty, this.SB13Unit13);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount13, string.Empty, this.SB14Amount13.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit13, string.Empty, this.SB14Unit13);
            }
            if (this.SB1Name14 != string.Empty && this.SB1Name14 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name14, string.Empty, this.SB1Name14);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description14, string.Empty, this.SB1Description14);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL14, string.Empty, this.SB1URL14);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label14, string.Empty, this.SB1Label14);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type14, string.Empty, this.SB1Type14);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel14, string.Empty, this.SB1RelLabel14);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount14, string.Empty, this.SB1TAmount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit14, string.Empty, this.SB1TUnit14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount14, string.Empty, this.SB1TD1Amount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit14, string.Empty, this.SB1TD1Unit14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount14, string.Empty, this.SB1TD2Amount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit14, string.Empty, this.SB1TD2Unit14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult14, string.Empty, this.SB1MathResult14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType14, string.Empty, this.SB1MathSubType14.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount14, string.Empty, this.SB1TMAmount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit14, string.Empty, this.SB1TMUnit14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount14, string.Empty, this.SB1TLAmount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit14, string.Empty, this.SB1TLUnit14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount14, string.Empty, this.SB1TUAmount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit14, string.Empty, this.SB1TUUnit14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator14, string.Empty, this.SB1MathOperator14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression14, string.Empty, this.SB1MathExpression14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO14, string.Empty, this.SB1BaseIO14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date14, string.Empty, this.SB1Date14.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType14, string.Empty, this.SB1MathType14);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount14, string.Empty, this.SB11Amount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit14, string.Empty, this.SB11Unit14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount14, string.Empty, this.SB12Amount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit14, string.Empty, this.SB12Unit14);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount14, string.Empty, this.SB15Amount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit14, string.Empty, this.SB15Unit14.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount14, string.Empty, this.SB13Amount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit14, string.Empty, this.SB13Unit14);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount14, string.Empty, this.SB14Amount14.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit14, string.Empty, this.SB14Unit14);
            }
            if (this.SB1Name15 != string.Empty && this.SB1Name15 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name15, string.Empty, this.SB1Name15);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description15, string.Empty, this.SB1Description15);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL15, string.Empty, this.SB1URL15);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label15, string.Empty, this.SB1Label15);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type15, string.Empty, this.SB1Type15);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel15, string.Empty, this.SB1RelLabel15);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount15, string.Empty, this.SB1TAmount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit15, string.Empty, this.SB1TUnit15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount15, string.Empty, this.SB1TD1Amount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit15, string.Empty, this.SB1TD1Unit15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount15, string.Empty, this.SB1TD2Amount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit15, string.Empty, this.SB1TD2Unit15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult15, string.Empty, this.SB1MathResult15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType15, string.Empty, this.SB1MathSubType15.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount15, string.Empty, this.SB1TMAmount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit15, string.Empty, this.SB1TMUnit15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount15, string.Empty, this.SB1TLAmount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit15, string.Empty, this.SB1TLUnit15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount15, string.Empty, this.SB1TUAmount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit15, string.Empty, this.SB1TUUnit15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator15, string.Empty, this.SB1MathOperator15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression15, string.Empty, this.SB1MathExpression15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO15, string.Empty, this.SB1BaseIO15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date15, string.Empty, this.SB1Date15.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType15, string.Empty, this.SB1MathType15);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount15, string.Empty, this.SB11Amount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit15, string.Empty, this.SB11Unit15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount15, string.Empty, this.SB12Amount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit15, string.Empty, this.SB12Unit15);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount15, string.Empty, this.SB15Amount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit15, string.Empty, this.SB15Unit15.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount15, string.Empty, this.SB13Amount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit15, string.Empty, this.SB13Unit15);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount15, string.Empty, this.SB14Amount15.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit15, string.Empty, this.SB14Unit15);
            }
            if (this.SB1Name16 != string.Empty && this.SB1Name16 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name16, string.Empty, this.SB1Name16);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description16, string.Empty, this.SB1Description16);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL16, string.Empty, this.SB1URL16);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label16, string.Empty, this.SB1Label16);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type16, string.Empty, this.SB1Type16);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel16, string.Empty, this.SB1RelLabel16);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount16, string.Empty, this.SB1TAmount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit16, string.Empty, this.SB1TUnit16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount16, string.Empty, this.SB1TD1Amount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit16, string.Empty, this.SB1TD1Unit16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount16, string.Empty, this.SB1TD2Amount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit16, string.Empty, this.SB1TD2Unit16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult16, string.Empty, this.SB1MathResult16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType16, string.Empty, this.SB1MathSubType16.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount16, string.Empty, this.SB1TMAmount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit16, string.Empty, this.SB1TMUnit16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount16, string.Empty, this.SB1TLAmount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit16, string.Empty, this.SB1TLUnit16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount16, string.Empty, this.SB1TUAmount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit16, string.Empty, this.SB1TUUnit16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator16, string.Empty, this.SB1MathOperator16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression16, string.Empty, this.SB1MathExpression16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO16, string.Empty, this.SB1BaseIO16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date16, string.Empty, this.SB1Date16.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType16, string.Empty, this.SB1MathType16);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount16, string.Empty, this.SB11Amount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit16, string.Empty, this.SB11Unit16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount16, string.Empty, this.SB12Amount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit16, string.Empty, this.SB12Unit16);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount16, string.Empty, this.SB15Amount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit16, string.Empty, this.SB15Unit16.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount16, string.Empty, this.SB13Amount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit16, string.Empty, this.SB13Unit16);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount16, string.Empty, this.SB14Amount16.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit16, string.Empty, this.SB14Unit16);
            }
            if (this.SB1Name17 != string.Empty && this.SB1Name17 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name17, string.Empty, this.SB1Name17);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description17, string.Empty, this.SB1Description17);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL17, string.Empty, this.SB1URL17);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label17, string.Empty, this.SB1Label17);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type17, string.Empty, this.SB1Type17);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel17, string.Empty, this.SB1RelLabel17);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount17, string.Empty, this.SB1TAmount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit17, string.Empty, this.SB1TUnit17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount17, string.Empty, this.SB1TD1Amount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit17, string.Empty, this.SB1TD1Unit17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount17, string.Empty, this.SB1TD2Amount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit17, string.Empty, this.SB1TD2Unit17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult17, string.Empty, this.SB1MathResult17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType17, string.Empty, this.SB1MathSubType17.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount17, string.Empty, this.SB1TMAmount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit17, string.Empty, this.SB1TMUnit17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB1TLAmount17, string.Empty, this.SB1TLAmount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit17, string.Empty, this.SB1TLUnit17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount17, string.Empty, this.SB1TUAmount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit17, string.Empty, this.SB1TUUnit17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator17, string.Empty, this.SB1MathOperator17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression17, string.Empty, this.SB1MathExpression17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO17, string.Empty, this.SB1BaseIO17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date17, string.Empty, this.SB1Date17.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType17, string.Empty, this.SB1MathType17);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount17, string.Empty, this.SB11Amount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit17, string.Empty, this.SB11Unit17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount17, string.Empty, this.SB12Amount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit17, string.Empty, this.SB12Unit17);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount17, string.Empty, this.SB15Amount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit17, string.Empty, this.SB15Unit17.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Amount17, string.Empty, this.SB13Amount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit17, string.Empty, this.SB13Unit17);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount17, string.Empty, this.SB14Amount17.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit17, string.Empty, this.SB14Unit17);
            }
            if (this.SB1Name18 != string.Empty && this.SB1Name18 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name18, string.Empty, this.SB1Name18);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description18, string.Empty, this.SB1Description18);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL18, string.Empty, this.SB1URL18);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label18, string.Empty, this.SB1Label18);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type18, string.Empty, this.SB1Type18);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel18, string.Empty, this.SB1RelLabel18);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount18, string.Empty, this.SB1TAmount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit18, string.Empty, this.SB1TUnit18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount18, string.Empty, this.SB1TD1Amount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit18, string.Empty, this.SB1TD1Unit18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount18, string.Empty, this.SB1TD2Amount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit18, string.Empty, this.SB1TD2Unit18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult18, string.Empty, this.SB1MathResult18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType18, string.Empty, this.SB1MathSubType18.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount18, string.Empty, this.SB1TMAmount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit18, string.Empty, this.SB1TMUnit18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount18, string.Empty, this.SB1TLAmount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit18, string.Empty, this.SB1TLUnit18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount18, string.Empty, this.SB1TUAmount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit18, string.Empty, this.SB1TUUnit18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator18, string.Empty, this.SB1MathOperator18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression18, string.Empty, this.SB1MathExpression18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO18, string.Empty, this.SB1BaseIO18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date18, string.Empty, this.SB1Date18.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType18, string.Empty, this.SB1MathType18);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount18, string.Empty, this.SB11Amount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit18, string.Empty, this.SB11Unit18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount18, string.Empty, this.SB12Amount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit18, string.Empty, this.SB12Unit18);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount18, string.Empty, this.SB15Amount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit18, string.Empty, this.SB15Unit18.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount18, string.Empty, this.SB13Amount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit18, string.Empty, this.SB13Unit18);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount18, string.Empty, this.SB14Amount18.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit18, string.Empty, this.SB14Unit18);
            }
            if (this.SB1Name19 != string.Empty && this.SB1Name19 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name19, string.Empty, this.SB1Name19);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description19, string.Empty, this.SB1Description19);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL19, string.Empty, this.SB1URL19);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label19, string.Empty, this.SB1Label19);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type19, string.Empty, this.SB1Type19);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel19, string.Empty, this.SB1RelLabel19);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount19, string.Empty, this.SB1TAmount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit19, string.Empty, this.SB1TUnit19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount19, string.Empty, this.SB1TD1Amount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit19, string.Empty, this.SB1TD1Unit19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount19, string.Empty, this.SB1TD2Amount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit19, string.Empty, this.SB1TD2Unit19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult19, string.Empty, this.SB1MathResult19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType19, string.Empty, this.SB1MathSubType19.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount19, string.Empty, this.SB1TMAmount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit19, string.Empty, this.SB1TMUnit19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount19, string.Empty, this.SB1TLAmount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit19, string.Empty, this.SB1TLUnit19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount19, string.Empty, this.SB1TUAmount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit19, string.Empty, this.SB1TUUnit19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator19, string.Empty, this.SB1MathOperator19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression19, string.Empty, this.SB1MathExpression19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO19, string.Empty, this.SB1BaseIO19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date19, string.Empty, this.SB1Date19.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType19, string.Empty, this.SB1MathType19);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount19, string.Empty, this.SB11Amount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit19, string.Empty, this.SB11Unit19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount19, string.Empty, this.SB12Amount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit19, string.Empty, this.SB12Unit19);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount19, string.Empty, this.SB15Amount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit19, string.Empty, this.SB15Unit19.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                   cSB13Amount19, string.Empty, this.SB13Amount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit19, string.Empty, this.SB13Unit19);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount19, string.Empty, this.SB14Amount19.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit19, string.Empty, this.SB14Unit19);
            }
            if (this.SB1Name20 != string.Empty && this.SB1Name20 != Constants.NONE)
            {
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Name20, string.Empty, this.SB1Name20);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1Description20, string.Empty, this.SB1Description20);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1URL20, string.Empty, this.SB1URL20);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Label20, string.Empty, this.SB1Label20);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Type20, string.Empty, this.SB1Type20);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1RelLabel20, string.Empty, this.SB1RelLabel20);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TAmount20, string.Empty, this.SB1TAmount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUnit20, string.Empty, this.SB1TUnit20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Amount20, string.Empty, this.SB1TD1Amount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD1Unit20, string.Empty, this.SB1TD1Unit20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Amount20, string.Empty, this.SB1TD2Amount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TD2Unit20, string.Empty, this.SB1TD2Unit20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathResult20, string.Empty, this.SB1MathResult20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathSubType20, string.Empty, this.SB1MathSubType20.ToString());

                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMAmount20, string.Empty, this.SB1TMAmount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TMUnit20, string.Empty, this.SB1TMUnit20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLAmount20, string.Empty, this.SB1TLAmount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TLUnit20, string.Empty, this.SB1TLUnit20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUAmount20, string.Empty, this.SB1TUAmount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1TUUnit20, string.Empty, this.SB1TUUnit20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                  cSB1MathOperator20, string.Empty, this.SB1MathOperator20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1MathExpression20, string.Empty, this.SB1MathExpression20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB1BaseIO20, string.Empty, this.SB1BaseIO20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1Date20, string.Empty, this.SB1Date20.ToString("d", DateTimeFormatInfo.InvariantInfo));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB1MathType20, string.Empty, this.SB1MathType20);
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Amount20, string.Empty, this.SB11Amount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB11Unit20, string.Empty, this.SB11Unit20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                        cSB12Amount20, string.Empty, this.SB12Amount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB12Unit20, string.Empty, this.SB12Unit20);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Amount20, string.Empty, this.SB15Amount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB15Unit20, string.Empty, this.SB15Unit20.ToString());
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Amount20, string.Empty, this.SB13Amount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB13Unit20, string.Empty, this.SB13Unit20);
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Amount20, string.Empty, this.SB14Amount20.ToString("N4", CultureInfo.InvariantCulture));
                await writer.WriteAttributeStringAsync(string.Empty,
                    cSB14Unit20, string.Empty, this.SB14Unit20);
            }
        }
        #endregion

   
        public async Task<bool> RunSB1BaseCalculationsAsync(CalculatorParameters calcParameters, double multiplier)
        {
            bool bHasCalculations = false;
            this.CalcParameters = calcParameters;
            int iInd = 1;
            //configureawait allows ui to write results
            bHasCalculations = await SetSB1StockCalculationsAsync(iInd, multiplier).ConfigureAwait(false);
            return bHasCalculations;
        }

        public async Task<bool> SetSB1StockCalculationsAsync(int indicatorNumber, double multiplier)
        {
            bool bHasCalculations = false;
            bool bHasError = false;
            Task<string>[] runAlgosTasks = new Task<string>[] { };
            //don't want an error to interfere with running subsequent calcs
            //so catch uses an indicator number to keep going
            try
            {
                if (this != null)
                {
                    if (indicatorNumber > 20)
                    {
                        return true;
                    }
                    //216 joint Indicator and Score pattern
                    if (HasDataMatrix(indicatorNumber))
                    {
                        bHasCalculations = await CalculateJointCalculations(indicatorNumber);
                    }
                    if (bHasCalculations)
                        return bHasCalculations;
                    //process remaining indicators
                    bHasCalculations = await CalculateIndicators(indicatorNumber);
                    bHasCalculations = true;
                }
                else
                {
                    this.CalculatorDescription = string.Concat(Errors.MakeStandardErrorMsg("CALCULATORS_WRONG_ONE"), this.CalculatorDescription);
                    //let them save file and fix faults
                    bHasCalculations = true;
                }
            }
            catch (Exception x)
            {
                
                //dataurl has to be http or https (has to come from resource base element url)
                if (x.Message.Contains("404"))
                {
                    this.CalculatorDescription = string.Concat(x.Message, Errors.MakeStandardErrorMsg("DATAURL_BAD"), this.CalculatorDescription);
                }
                else
                {
                    this.CalculatorDescription = string.Concat(x.Message, Errors.MakeStandardErrorMsg("DATAURL_BADDATA"), this.CalculatorDescription);
                }
                //async error messages
                foreach (Task<string> faulted in runAlgosTasks.Where(t => t.IsFaulted))
                {
                    this.CalculatorDescription += faulted.ToString();
                    //don't process individual indicators
                    indicatorNumber = 20;
                }
                //let them save file and fix faults (or filled in indicator data is lost)
                bHasCalculations = true;
                //let them run calcs for next indicator (or 1 indicator can disrupt all calcs)
                bHasError = true;
            }
            if (bHasError)
            {
                //try to run calcs for next indicator 
                if (indicatorNumber <= 20)
                {

                    int iNextInd = indicatorNumber + 1;
                    bHasCalculations = await this.SetSB1StockCalculationsAsync(iNextInd, multiplier);
                }
            }
            //always return true to save error messages in properties
            bHasCalculations = true;
            return bHasCalculations;
        }
        public async Task<bool> CalculateIndicators(int indicatorIndex)
        {
            bool bHasCalculations = false;
            bool bHasIndicator1 = false;
            string sAlgo = string.Empty;
            //214 pattern is similar to MEIndicator pattern:
            //1 indicator, referenced through label and index,
            //is the main parameter used by algorithms
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            IndicatorQT1 qt1 = new IndicatorQT1();
            List<double> qTs = new List<double>();
            IndicatorIndex = indicatorIndex;
            if (indicatorIndex == 1)
            {
                if (!string.IsNullOrEmpty(this.SB1Label1)
                    && (this.SB1Label1 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label1)
                        && NeedsIndicator(this.SB1Label1))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label1, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL1, qt1);
                        //216 deprecated
                        bHasIndicator1 = true;
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 2)
            {
                if (!string.IsNullOrEmpty(this.SB1Label2)
                    && (this.SB1Label2 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label2)
                        && NeedsIndicator(this.SB1Label2))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label2, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL2, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 3)
            {
                if (!string.IsNullOrEmpty(this.SB1Label3)
                    && (this.SB1Label3 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label3)
                        && NeedsIndicator(this.SB1Label3))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label3, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL3, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 4)
            {
                if (!string.IsNullOrEmpty(this.SB1Label4)
                    && (this.SB1Label4 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label4)
                        && NeedsIndicator(this.SB1Label4))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label4, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL4, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 5)
            {
                if (!string.IsNullOrEmpty(this.SB1Label5)
                    && (this.SB1Label5 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label5)
                        && NeedsIndicator(this.SB1Label5))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label5, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL5, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 6)
            {
                if (!string.IsNullOrEmpty(this.SB1Label6)
                    && (this.SB1Label6 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label6)
                        && NeedsIndicator(this.SB1Label6))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label6, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL6, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 7)
            {
                if (!string.IsNullOrEmpty(this.SB1Label7)
                    && (this.SB1Label7 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label7)
                        && NeedsIndicator(this.SB1Label7))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label7, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL7, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 8)
            {
                if (!string.IsNullOrEmpty(this.SB1Label8)
                    && (this.SB1Label8 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label8)
                        && NeedsIndicator(this.SB1Label8))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label8, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL8, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 9)
            {
                if (!string.IsNullOrEmpty(this.SB1Label9)
                    && (this.SB1Label9 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label9)
                        && NeedsIndicator(this.SB1Label9))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label9, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL9, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 10)
            {
                if (!string.IsNullOrEmpty(this.SB1Label10)
                    && (this.SB1Label10 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label10)
                        && NeedsIndicator(this.SB1Label10))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label10, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL10, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 11)
            {
                if (!string.IsNullOrEmpty(this.SB1Label11)
                    && (this.SB1Label11 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label11)
                        && NeedsIndicator(this.SB1Label11))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label11, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL11, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 12)
            {
                if (!string.IsNullOrEmpty(this.SB1Label12)
                    && (this.SB1Label12 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label12)
                        && NeedsIndicator(this.SB1Label12))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label12, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL12, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 13)
            {
                if (!string.IsNullOrEmpty(this.SB1Label13)
                    && (this.SB1Label13 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label13)
                        && NeedsIndicator(this.SB1Label13))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label13, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL13, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 14)
            {
                if (!string.IsNullOrEmpty(this.SB1Label14)
                    && (this.SB1Label14 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label14)
                        && NeedsIndicator(this.SB1Label14))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label14, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL14, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 15)
            {
                if (!string.IsNullOrEmpty(this.SB1Label15)
                    && (this.SB1Label15 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label15)
                        && NeedsIndicator(this.SB1Label15))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label15, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL15, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 16)
            {
                if (!string.IsNullOrEmpty(this.SB1Label16)
                    && (this.SB1Label16 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label16)
                        && NeedsIndicator(this.SB1Label16))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label16, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL16, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 17)
            {
                if (!string.IsNullOrEmpty(this.SB1Label17)
                    && (this.SB1Label17 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label17)
                        && NeedsIndicator(this.SB1Label17))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label17, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL17, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 18)
            {
                if (!string.IsNullOrEmpty(this.SB1Label18)
                    && (this.SB1Label18 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label18)
                        && NeedsIndicator(this.SB1Label18))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label18, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL18, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 19)
            {
                if (!string.IsNullOrEmpty(this.SB1Label19)
                    && (this.SB1Label19 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label19)
                        && NeedsIndicator(this.SB1Label19))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label19, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL19, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (indicatorIndex == 20)
            {
                if (!string.IsNullOrEmpty(this.SB1Label20)
                    && (this.SB1Label20 != Constants.NONE))
                {
                    if (!_indicators.Any(o => o == this.SB1Label20)
                        && NeedsIndicator(this.SB1Label20))
                    {
                        qt1 = algos.FillIndicator(this.SB1Label20, this);
                        sAlgo = await ProcessIndicators(indicatorIndex, this.SB1URL20, qt1);
                    }
                }
                indicatorIndex++;
            }
            if (!string.IsNullOrEmpty(this.SB1ScoreMathExpression)
                && (this.SB1ScoreMathExpression != Constants.NONE))
            {
                //don't set scores that have already been calculated (using indicator data sets)
                if (!_indicators.Any(o => o == _score))
                {
                    //convention is to use score = 0
                    indicatorIndex = 0;
                    //214 released bug left this out (indicatorindex isn't passsed to all functions)
                    IndicatorIndex = 0;
                    qt1 = algos.FillIndicator(_score, this);
                    sAlgo = await ProcessIndicators(indicatorIndex, this.SB1JointDataURL, qt1);
                    if (!string.IsNullOrEmpty(this.ErrorMessage))
                    {
                        this.SB1ScoreMathResult += string.Concat("----", this.ErrorMessage);
                        this.ErrorMessage = string.Empty;
                    }
                }
            }
            bHasCalculations = true;
            return bHasCalculations;
        }
        public async Task<string> ProcessIndicators(int indicatorIndex, string indicatorURL,
            IndicatorQT1 qt1)
        {
            string sAlgo = string.Empty;
            List<double> qTs = new List<double>();
            if (HasMathTypeML(qt1.Label, qt1.QMathType, qt1.QMathSubType))
            {
                //214 pattern uses 2 TEXT files for training and testing with algos 1, 2, 3, and 4
                string sDataURL1 = string.Empty;
                string sDataURL2 = string.Empty;
                string[] dataURLs = indicatorURL.Split(Constants.STRING_DELIMITERS);
                for (int i = 0; i < dataURLs.Count(); i++)
                {
                    if (i == 0)
                    {
                        sDataURL1 = dataURLs[i];
                    }
                    else if (i == 1)
                    {
                        sDataURL2 = dataURLs[i];
                    }
                }
                //214 machine learning (214: R and Python use ProcessAlgosAsync2, until more sophisticated algs are developed) 
                sAlgo = await ProcessAlgosAsyncML(indicatorIndex, qt1, sDataURL1, sDataURL2);
            }
            else if (HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm2)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm3)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm4))
            {
                //214 pattern puts script file first and data file second
                string sScriptURL = string.Empty;
                string sDataURL = string.Empty;
                string[] dataURLs = indicatorURL.Split(Constants.STRING_DELIMITERS);
                for (int i = 0; i < dataURLs.Count(); i++)
                {
                    if (i == 0)
                    {
                        sScriptURL = dataURLs[i];
                    }
                    else if (i == 1)
                    {
                        sDataURL = dataURLs[i];
                    }
                }
                sAlgo = await ProcessAlgoCorrAsync(indicatorIndex, sScriptURL, sDataURL);
            }
            else if (HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm1)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm5)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm6)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm7)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm8))
            {
                if (!string.IsNullOrEmpty(indicatorURL)
                   && indicatorURL != Constants.NONE)
                {
                    sAlgo = await ProcessAlgosAsync(indicatorIndex, qt1, indicatorURL);
                }
                else
                {
                    //214 bug fix: use mathexp and same pattern as M and E
                    sAlgo = SetTotalMathTypeStock(indicatorIndex, qt1);
                    if (qt1.QMathType != Constants.NONE
                        && (!string.IsNullOrEmpty(qt1.QMathSubType))
                        && (qt1.QMathSubType != Constants.NONE))
                    {
                        sAlgo = await SetAlgoPRAStats(qt1.Label, qTs);
                    }
                }
            }
            else if (HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm9)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm10))
            {
                if (indicatorIndex == 2
                    || indicatorIndex == 5)
                {
                    sAlgo = await ProcessAlgosAsync4(indicatorIndex, indicatorURL);
                }
                else if (indicatorIndex == 0
                    && HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm10))
                {
                    sAlgo = await ProcessAlgosAsync4(indicatorIndex, indicatorURL);
                }
                else
                {
                    sAlgo = await ProcessAlgosAsync3(indicatorIndex, indicatorURL);
                }
            }
            else if (HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm11)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm12)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm13)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm14)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm15)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm16)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm17)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm18))
            {
                //212 Score analysis
                if (indicatorIndex == 0
                    && HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm15))
                {
                    List<List<string>> colData = IndicatorQT1.GetDefaultData();
                    sAlgo = await SetAlgoStats4(qt1.Label, colData, colData, new List<string>());
                }
                else
                {
                    if (indicatorIndex == 3
                        && (HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm11)
                        || HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm12)))
                    {
                        sAlgo = await ProcessAlgosAsync3(indicatorIndex, indicatorURL);
                    }
                    else
                    {
                        sAlgo = await ProcessAlgosAsync4(indicatorIndex, indicatorURL);
                    }
                }
            }
            else if (HasMathType(qt1.Label, MATH_TYPES.algorithm2)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm3)
                || HasMathType(qt1.Label, MATH_TYPES.algorithm4))
            {
                //214 pattern puts script file first and data file second with semicolon delimiter
                string sScriptURL = string.Empty;
                string sDataURL = string.Empty;
                string[] dataURLs = indicatorURL.Split(Constants.STRING_DELIMITERS);
                for (int i = 0; i < dataURLs.Count(); i++)
                {
                    if (i == 0)
                    {
                        sScriptURL = dataURLs[i];
                    }
                    else if (i == 1)
                    {
                        sDataURL = dataURLs[i];
                    }
                }
                sAlgo = await ProcessAlgosAsync2(qt1, sScriptURL, sDataURL);
            }
            else if (HasMathType(indicatorIndex, MATH_TYPES.algorithm5, MATH_SUBTYPES.subalgorithm1))
            {
                //properties filled in manually
                _indicators = GetIndicatorsDisplay();
            }
            else
            {
                //214 bug fix: use mathexp and same pattern as M and E
                sAlgo = SetTotalMathTypeStock(indicatorIndex, qt1);
                if (qt1.QMathType != Constants.NONE
                    && (!string.IsNullOrEmpty(qt1.QMathSubType))
                    && (qt1.QMathSubType != Constants.NONE))
                {
                    sAlgo = await SetAlgoPRAStats(qt1.Label, qTs);
                }
            }
            return sAlgo;
        }
        //214 legacy pattern
        public async Task<bool> ProcessIndicatorsUsingDataURL(int indicatorIndex, IndicatorQT1 qt1, 
            string indicatorURL)
        {
            bool bHasCalculations = false;
            string[] dataURLs = new string[] { };
            Task<string>[] runAlgosTasks = new Task<string>[] { };
            //v192: changed this from an if else clause 
            //to allow sibling calcs to run different algos (same as CalculatedInds)
            if (HasMathType(qt1.Label, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm1))
            {
                dataURLs = DataURL.Split(Constants.STRING_DELIMITERS);
                // Create a query. 
                IEnumerable<Task<string>> runAlgosTasksQuery =
                    from dataURL in dataURLs select ProcessAlgosAsync(indicatorIndex, qt1, dataURL);
                // Use ToArray to execute the query and start the download tasks.
                runAlgosTasks = runAlgosTasksQuery.ToArray();
                //return the indicators
                string[] indicatorscsvs = await Task.WhenAll(runAlgosTasks);
                _indicators = GetIndicators(indicatorscsvs);
                bHasCalculations = true;
            }
            else if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm6)
                || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm8))
            {
                //these algos must have data urls
                if (!string.IsNullOrEmpty(DataURL)
                    && (DataURL != Constants.NONE))
                {
                    //these use numeric double datasets
                    dataURLs = DataURL.Split(Constants.STRING_DELIMITERS);
                    // Create a query. 
                    IEnumerable<Task<string>> runAlgosTasksQuery =
                        from dataURL in dataURLs select ProcessAlgosAsync(indicatorIndex, qt1, dataURL);
                    // Use ToArray to execute the query and start the download tasks.
                    runAlgosTasks = runAlgosTasksQuery.ToArray();
                    //return the indicators
                    string[] indicatorscsvs = await Task.WhenAll(runAlgosTasks);
                    _indicators = GetIndicators(indicatorscsvs);
                    bHasCalculations = true;
                }
                else
                {
                    //missing correlation matrix 
                    CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_MISSING"));
                }
            }
            else if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm5)
                || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm7))
            {
                //these algos must have joint data urls with standard dataset format
                if (!string.IsNullOrEmpty(this.SB1JointDataURL)
                    && (this.SB1JointDataURL != Constants.NONE))
                {
                    dataURLs = this.SB1JointDataURL.Split(Constants.STRING_DELIMITERS);
                    // Create a query. 
                    IEnumerable<Task<string>> runAlgosTasksQuery =
                        from dataURL in dataURLs select ProcessAlgosAsync(indicatorIndex, qt1, dataURL);
                    // Use ToArray to execute the query and start the download tasks.
                    runAlgosTasks = runAlgosTasksQuery.ToArray();
                    //return the indicators
                    string[] indicatorscsvs = await Task.WhenAll(runAlgosTasks);
                    _indicators = GetIndicators(indicatorscsvs);
                    bHasCalculations = true;
                }
                else
                {
                    //missing correlation matrix 
                    CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_MISSING"));
                }
            }
            else if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm2)
                || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm3)
                || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm4))
            {
                //these algos must have joint urls but these are not standard dataset format
                if (!string.IsNullOrEmpty(this.SB1JointDataURL)
                    && (this.SB1JointDataURL != Constants.NONE))
                {
                    //process the joint data urls (214 made the jointdataurl the Score.URL and DataURL the jointurl)
                    dataURLs = this.SB1JointDataURL.Split(Constants.STRING_DELIMITERS);
                    //process the datasets
                    string[] data2URLs = new string[] { };
                    data2URLs = DataURL.Split(Constants.STRING_DELIMITERS);
                    //set up a list of tasks to run
                    List<Task<string>> runTasks = new List<Task<string>>();
                    string sScriptURL = string.Empty;
                    string sDataURL = string.Empty;
                    for (int i = 0; i < dataURLs.Count(); i++)
                    {
                        sScriptURL = dataURLs[i];
                        if (data2URLs.Count() > i)
                            sDataURL = data2URLs[i];
                        //i corresponds to jointdataurl index
                        //add the tasks to the collection
                        runTasks.Add(ProcessAlgoCorrAsync(indicatorIndex, sScriptURL, sDataURL));
                    }
                    //return a csv string of indicators when all of the tasks are completed
                    string[] indicatorscsvs = await Task.WhenAll(runTasks);
                    _indicators = GetIndicators(indicatorscsvs);
                    bHasCalculations = true;
                }
                else
                {
                    //missing correlation matrix 
                    this.SB1ScoreMathResult += string.Concat("----", Errors.MakeStandardErrorMsg("JOINTURL_MISSING"));
                }
                return bHasCalculations;
            }
            return bHasCalculations;
        }
        private bool HasDataMatrix(int indicatorIndex)
        {
            bool bHasMatrix = false;
            if (!string.IsNullOrEmpty(this.DataURL)
                && (this.DataURL != Constants.NONE))
            {
                return true;
            }
            //216 moved to HasJointDataMatrix instead
            return bHasMatrix;
        }
        public async Task<bool> CalculateJointCalculations(int indicatorIndex)
        {
            bool bHasCalculations = false;
            
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            //216: check score only
            if (HasJointDataMatrix(0))
            {
                //216 possible pattern: ids algos that use both Score URLs 
                //and Score algorithm to run joint Indicator calcs
                IndicatorQT1 qt1 = algos.FillIndicator(_score, this);
                bHasCalculations = await ProcessIndicatorsUsingDataURL(
                    0, qt1, DataURL);
            }
            else
            {
                //214: legacy pattern fills in joint indicators using dataurl only
                string sLabel = GetLabel(indicatorIndex);
                IndicatorQT1 qt1 = algos.FillIndicator(sLabel, this);
                bHasCalculations = await ProcessIndicatorsUsingDataURL(
                    indicatorIndex, qt1, DataURL);
            }
            return bHasCalculations;
        }
        private bool HasJointDataMatrix(int indicatorIndex)
        {
            bool bHasMatrix = false;
            //216 pattern: identify algos that use both DataURL and JointDataURL
            if (!string.IsNullOrEmpty(this.SB1JointDataURL)
                && (this.SB1JointDataURL != Constants.NONE))
            {
                if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm5)
                    || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm7))
                {
                    return true;
                }
                else if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm2)
                    || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm3)
                    || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm4))
                {
                    return true;
                }
            }
            return bHasMatrix;
        }
        public void CopyCalculatorMathToScoreMath()
        {
            //minimal props to run algos from analyzers
            this.SB1ScoreMathExpression = this.MathExpression;
            this.SB1ScoreMathResult = this.MathResult;
            this.SB1ScoreMathSubType = this.MathSubType;
            this.SB1ScoreMathType = this.MathType;
            this.SB1CILevel = this.MathCILevel;
        }
        public bool HasMathTypeML(string label, string algorithm, string subAlgorithm)
        {
            bool bHasMathType = false;
            //214: uniform processing of machine learning algorithms (subalgo_xx)
            bool bIsMLAlgorithm = subAlgorithm.Contains(Constants.FILENAME_DELIMITER) ? true : false;
            if ((algorithm == MATH_TYPES.algorithm1.ToString()
                && bIsMLAlgorithm == true)
                || (algorithm == MATH_TYPES.algorithm2.ToString()
                && bIsMLAlgorithm == true)
                || (algorithm == MATH_TYPES.algorithm3.ToString()
                && bIsMLAlgorithm == true)
                || (algorithm == MATH_TYPES.algorithm4.ToString()
                && bIsMLAlgorithm == true))
            {
                return true;
            }
            return bHasMathType;
        }
        public string GetLabel(int indicatorIndex)
        {
            string sLabel = string.Empty;
            if (indicatorIndex == 0)
            {
                sLabel = _score;
            }
            else if (indicatorIndex == 1)
            {
                sLabel = SB1Label1;
            }
            else if (indicatorIndex == 2)
            {
                sLabel = SB1Label2;
            }
            else if (indicatorIndex == 3)
            {
                sLabel = SB1Label3;
            }
            else if (indicatorIndex == 4)
            {
                sLabel = SB1Label4;
            }
            else if (indicatorIndex == 5)
            {
                sLabel = SB1Label5;
            }
            else if (indicatorIndex == 6)
            {
                sLabel = SB1Label6;
            }
            else if (indicatorIndex == 7)
            {
                sLabel = SB1Label7;
            }
            else if (indicatorIndex == 8)
            {
                sLabel = SB1Label8;
            }
            else if (indicatorIndex == 8)
            {
                sLabel = SB1Label8;
            }
            else if (indicatorIndex == 9)
            {
                sLabel = SB1Label9;
            }
            else if (indicatorIndex == 10)
            {
                sLabel = SB1Label10;
            }
            else if (indicatorIndex == 11)
            {
                sLabel = SB1Label11;
            }
            else if (indicatorIndex == 12)
            {
                sLabel = SB1Label12;
            }
            else if (indicatorIndex == 13)
            {
                sLabel = SB1Label13;
            }
            else if (indicatorIndex == 14)
            {
                sLabel = SB1Label14;
            }
            else if (indicatorIndex == 15)
            {
                sLabel = SB1Label15;
            }
            else if (indicatorIndex == 16)
            {
                sLabel = SB1Label16;
            }
            else if (indicatorIndex == 17)
            {
                sLabel = SB1Label17;
            }
            else if (indicatorIndex == 18)
            {
                sLabel = SB1Label18;
            }
            else if (indicatorIndex == 19)
            {
                sLabel = SB1Label19;
            }
            else if (indicatorIndex == 20)
            {
                sLabel = SB1Label20;
            }
            return sLabel;
        }
        public bool HasMathType(int indicatorIndex,
            Calculator1.MATH_TYPES algorithm, Calculator1.MATH_SUBTYPES subAlgorithm)
        {
            bool bHasMathType = false;

            if (this.SB1ScoreMathType == algorithm.ToString()
                && this.SB1ScoreMathSubType == subAlgorithm.ToString()
                && indicatorIndex == 0)
            {
                return true;
            }
            else if (this.SB1MathType1 == algorithm.ToString()
                && this.SB1MathSubType1 == subAlgorithm.ToString()
                && indicatorIndex == 1)
            {
                return true;
            }
            else if (this.SB1MathType2 == algorithm.ToString()
                && this.SB1MathSubType2 == subAlgorithm.ToString()
                && indicatorIndex == 2)
            {
                return true;
            }
            else if (this.SB1MathType3 == algorithm.ToString()
                && this.SB1MathSubType3 == subAlgorithm.ToString()
                && indicatorIndex == 3)
            {
                return true;
            }
            else if (this.SB1MathType4 == algorithm.ToString()
                && this.SB1MathSubType4 == subAlgorithm.ToString()
                && indicatorIndex == 4)
            {
                return true;
            }
            else if (this.SB1MathType5 == algorithm.ToString()
                && this.SB1MathSubType5 == subAlgorithm.ToString()
                && indicatorIndex == 5)
            {
                return true;
            }
            else if (this.SB1MathType6 == algorithm.ToString()
                && this.SB1MathSubType6 == subAlgorithm.ToString()
                && indicatorIndex == 6)
            {
                return true;
            }
            else if (this.SB1MathType7 == algorithm.ToString()
                && this.SB1MathSubType7 == subAlgorithm.ToString()
                && indicatorIndex == 7)
            {
                return true;
            }
            else if (this.SB1MathType8 == algorithm.ToString()
                && this.SB1MathSubType8 == subAlgorithm.ToString()
                && indicatorIndex == 8)
            {
                return true;
            }
            else if (this.SB1MathType9 == algorithm.ToString()
                && this.SB1MathSubType9 == subAlgorithm.ToString()
                && indicatorIndex == 9)
            {
                return true;
            }
            else if (this.SB1MathType10 == algorithm.ToString()
                && this.SB1MathSubType10 == subAlgorithm.ToString())
            {
                return true;
            }
            else if (this.SB1MathType11 == algorithm.ToString()
                && this.SB1MathSubType11 == subAlgorithm.ToString())
            {
                return true;
            }
            else if (this.SB1MathType12 == algorithm.ToString()
                && this.SB1MathSubType12 == subAlgorithm.ToString()
                && indicatorIndex == 12)
            {
                return true;
            }
            else if (this.SB1MathType13 == algorithm.ToString()
                && this.SB1MathSubType13 == subAlgorithm.ToString()
                && indicatorIndex == 13)
            {
                return true;
            }
            else if (this.SB1MathType14 == algorithm.ToString()
                && this.SB1MathSubType14 == subAlgorithm.ToString()
                && indicatorIndex == 14)
            {
                return true;
            }
            else if (this.SB1MathType15 == algorithm.ToString()
                && this.SB1MathSubType15 == subAlgorithm.ToString()
                && indicatorIndex == 15)
            {
                return true;
            }
            else if (this.SB1MathType16 == algorithm.ToString()
                && this.SB1MathSubType16 == subAlgorithm.ToString()
                && indicatorIndex == 16)
            {
                return true;
            }
            else if (this.SB1MathType17 == algorithm.ToString()
                && this.SB1MathSubType17 == subAlgorithm.ToString()
                && indicatorIndex == 17)
            {
                return true;
            }
            else if (this.SB1MathType18 == algorithm.ToString()
                && this.SB1MathSubType18 == subAlgorithm.ToString()
                && indicatorIndex == 18)
            {
                return true;
            }
            else if (this.SB1MathType19 == algorithm.ToString()
                && this.SB1MathSubType19 == subAlgorithm.ToString()
                && indicatorIndex == 19)
            {
                return true;
            }
            else if (this.SB1MathType20 == algorithm.ToString()
                && this.SB1MathSubType20 == subAlgorithm.ToString()
                && indicatorIndex == 20)
            {
                return true;
            }
            return bHasMathType;
        }
        public bool HasMathType(int indicatorIndex, Calculator1.MATH_TYPES algorithm)
        {
            bool bHasMathType = false;

            if (this.SB1ScoreMathType == algorithm.ToString()
                && indicatorIndex == 0)
            {
                return true;
            }
            else if (this.SB1MathType1 == algorithm.ToString()
                && indicatorIndex == 1)
            {
                return true;
            }
            else if (this.SB1MathType2 == algorithm.ToString()
                && indicatorIndex == 2)
            {
                return true;
            }
            else if (this.SB1MathType3 == algorithm.ToString()
                && indicatorIndex == 3)
            {
                return true;
            }
            else if (this.SB1MathType4 == algorithm.ToString()
                && indicatorIndex == 4)
            {
                return true;
            }
            else if (this.SB1MathType5 == algorithm.ToString()
                && indicatorIndex == 5)
            {
                return true;
            }
            else if (this.SB1MathType6 == algorithm.ToString()
                && indicatorIndex == 6)
            {
                return true;
            }
            else if (this.SB1MathType7 == algorithm.ToString()
                && indicatorIndex == 7)
            {
                return true;
            }
            else if (this.SB1MathType8 == algorithm.ToString()
                && indicatorIndex == 8)
            {
                return true;
            }
            else if (this.SB1MathType9 == algorithm.ToString()
                && indicatorIndex == 9)
            {
                return true;
            }
            else if (this.SB1MathType10 == algorithm.ToString()
                && indicatorIndex == 10)
            {
                return true;
            }
            else if (this.SB1MathType11 == algorithm.ToString()
                && indicatorIndex == 11)
            {
                return true;
            }
            else if (this.SB1MathType12 == algorithm.ToString()
                && indicatorIndex == 12)
            {
                return true;
            }
            else if (this.SB1MathType13 == algorithm.ToString()
                && indicatorIndex == 13)
            {
                return true;
            }
            else if (this.SB1MathType14 == algorithm.ToString()
                && indicatorIndex == 14)
            {
                return true;
            }
            else if (this.SB1MathType15 == algorithm.ToString()
                && indicatorIndex == 15)
            {
                return true;
            }
            else if (this.SB1MathType16 == algorithm.ToString()
                && indicatorIndex == 16)
            {
                return true;
            }
            else if (this.SB1MathType17 == algorithm.ToString()
                && indicatorIndex == 17)
            {
                return true;
            }
            else if (this.SB1MathType18 == algorithm.ToString()
                && indicatorIndex == 18)
            {
                return true;
            }
            else if (this.SB1MathType19 == algorithm.ToString()
                && indicatorIndex == 19)
            {
                return true;
            }
            else if (this.SB1MathType20 == algorithm.ToString()
                && indicatorIndex == 20)
            {
                return true;
            }
            return bHasMathType;
        }
        public bool HasMathType(string label, Calculator1.MATH_TYPES algorithm, 
            Calculator1.MATH_SUBTYPES subAlgorithm)
        {
            bool bHasMathType = false;
            //214 made score consistent
            if (this.SB1ScoreMathType == algorithm.ToString()
                && this.SB1ScoreMathSubType == subAlgorithm.ToString()
                && label == _score)
            {
                return true;
            }
            else if (this.SB1MathType1 == algorithm.ToString()
                && this.SB1MathSubType1 == subAlgorithm.ToString()
                && this.SB1Label1 == label)
            {
                return true;
            }
            else if (this.SB1MathType2 == algorithm.ToString()
                && this.SB1MathSubType2 == subAlgorithm.ToString()
                && this.SB1Label2 == label)
            {
                return true;
            }
            else if (this.SB1MathType3 == algorithm.ToString()
                && this.SB1MathSubType3 == subAlgorithm.ToString()
                && this.SB1Label3 == label)
            {
                return true;
            }
            else if (this.SB1MathType4 == algorithm.ToString()
                && this.SB1MathSubType4 == subAlgorithm.ToString()
                && this.SB1Label4 == label)
            {
                return true;
            }
            else if (this.SB1MathType5 == algorithm.ToString()
                && this.SB1MathSubType5 == subAlgorithm.ToString()
                && this.SB1Label5 == label)
            {
                return true;
            }
            else if (this.SB1MathType6 == algorithm.ToString()
                && this.SB1MathSubType6 == subAlgorithm.ToString()
                && this.SB1Label6 == label)
            {
                return true;
            }
            else if (this.SB1MathType7 == algorithm.ToString()
                && this.SB1MathSubType7 == subAlgorithm.ToString()
                && this.SB1Label7 == label)
            {
                return true;
            }
            else if (this.SB1MathType8 == algorithm.ToString()
                && this.SB1MathSubType8 == subAlgorithm.ToString()
                && this.SB1Label8 == label)
            {
                return true;
            }
            else if (this.SB1MathType9 == algorithm.ToString()
                && this.SB1MathSubType9 == subAlgorithm.ToString()
                && this.SB1Label9 == label)
            {
                return true;
            }
            else if (this.SB1MathType10 == algorithm.ToString()
                && this.SB1MathSubType10 == subAlgorithm.ToString()
                && this.SB1Label10 == label)
            {
                return true;
            }
            else if (this.SB1MathType11 == algorithm.ToString()
                && this.SB1MathSubType11 == subAlgorithm.ToString()
                && this.SB1Label11 == label)
            {
                return true;
            }
            else if (this.SB1MathType12 == algorithm.ToString()
                && this.SB1MathSubType12 == subAlgorithm.ToString()
                && this.SB1Label12 == label)
            {
                return true;
            }
            else if (this.SB1MathType13 == algorithm.ToString()
                && this.SB1MathSubType13 == subAlgorithm.ToString()
                && this.SB1Label13 == label)
            {
                return true;
            }
            else if (this.SB1MathType14 == algorithm.ToString()
                && this.SB1MathSubType14 == subAlgorithm.ToString()
                && this.SB1Label14 == label)
            {
                return true;
            }
            else if (this.SB1MathType15 == algorithm.ToString()
                && this.SB1MathSubType15 == subAlgorithm.ToString()
                && this.SB1Label15 == label)
            {
                return true;
            }
            else if (this.SB1MathType16 == algorithm.ToString()
                && this.SB1MathSubType16 == subAlgorithm.ToString()
                && this.SB1Label16 == label)
            {
                return true;
            }
            else if (this.SB1MathType17 == algorithm.ToString()
                && this.SB1MathSubType17 == subAlgorithm.ToString()
                && this.SB1Label17 == label)
            {
                return true;
            }
            else if (this.SB1MathType18 == algorithm.ToString()
                && this.SB1MathSubType18 == subAlgorithm.ToString()
                && this.SB1Label18 == label)
            {
                return true;
            }
            else if (this.SB1MathType19 == algorithm.ToString()
                && this.SB1MathSubType19 == subAlgorithm.ToString()
                && this.SB1Label19 == label)
            {
                return true;
            }
            else if (this.SB1MathType20 == algorithm.ToString()
                && this.SB1MathSubType20 == subAlgorithm.ToString()
                && this.SB1Label20 == label)
            {
                return true;
            }
            return bHasMathType;
        }
        public bool HasMathType(string label, Calculator1.MATH_TYPES algorithm)
        {
            bool bHasMathType = false;
            //214 made consistent
            if (this.SB1ScoreMathType == algorithm.ToString()
                && label == _score)
            {
                return true;
            }
            else if (this.SB1MathType1 == algorithm.ToString()
                && this.SB1Label1 == label)
            {
                return true;
            }
            else if (this.SB1MathType2 == algorithm.ToString()
                && this.SB1Label2 == label)
            {
                return true;
            }
            else if (this.SB1MathType3 == algorithm.ToString()
                && this.SB1Label3 == label)
            {
                return true;
            }
            else if (this.SB1MathType4 == algorithm.ToString()
                && this.SB1Label4 == label)
            {
                return true;
            }
            else if (this.SB1MathType5 == algorithm.ToString()
                && this.SB1Label5 == label)
            {
                return true;
            }
            else if (this.SB1MathType6 == algorithm.ToString()
                && this.SB1Label6 == label)
            {
                return true;
            }
            else if (this.SB1MathType7 == algorithm.ToString()
                && this.SB1Label7 == label)
            {
                return true;
            }
            else if (this.SB1MathType8 == algorithm.ToString()
                && this.SB1Label8 == label)
            {
                return true;
            }
            else if (this.SB1MathType9 == algorithm.ToString()
                && this.SB1Label9 == label)
            {
                return true;
            }
            else if (this.SB1MathType10 == algorithm.ToString()
                && this.SB1Label10 == label)
            {
                return true;
            }
            else if (this.SB1MathType11 == algorithm.ToString()
                && this.SB1Label11 == label)
            {
                return true;
            }
            else if (this.SB1MathType12 == algorithm.ToString()
                && this.SB1Label12 == label)
            {
                return true;
            }
            else if (this.SB1MathType13 == algorithm.ToString()
                && this.SB1Label13 == label)
            {
                return true;
            }
            else if (this.SB1MathType14 == algorithm.ToString()
                && this.SB1Label14 == label)
            {
                return true;
            }
            else if (this.SB1MathType15 == algorithm.ToString()
                && this.SB1Label15 == label)
            {
                return true;
            }
            else if (this.SB1MathType16 == algorithm.ToString()
                && this.SB1Label16 == label)
            {
                return true;
            }
            else if (this.SB1MathType17 == algorithm.ToString()
                && this.SB1Label17 == label)
            {
                return true;
            }
            else if (this.SB1MathType18 == algorithm.ToString()
                && this.SB1Label18 == label)
            {
                return true;
            }
            else if (this.SB1MathType19 == algorithm.ToString()
                && this.SB1Label19 == label)
            {
                return true;
            }
            else if (this.SB1MathType20 == algorithm.ToString()
                && this.SB1Label20 == label)
            {
                return true;
            }
            return bHasMathType;
        }
        
        private bool HasIndicatorData(int indicatorIndex)
        {
            bool bHasData = false;
            if (indicatorIndex == 0)
            {
                //198: scores can run datasets for algos
                if (!string.IsNullOrEmpty(this.DataURL)
                    && (this.DataURL != Constants.NONE))
                {
                    return true;
                }
                //214 consistency with m&e
                if (!string.IsNullOrEmpty(this.SB1JointDataURL)
                    && (this.SB1JointDataURL != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 1)
            {
                if (!string.IsNullOrEmpty(this.SB1URL1)
                    && (this.SB1URL1 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 2)
            {
                if (!string.IsNullOrEmpty(this.SB1URL2)
                    && (this.SB1URL2 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 3)
            {
                if (!string.IsNullOrEmpty(this.SB1URL3)
                    && (this.SB1URL3 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 4)
            {
                if (!string.IsNullOrEmpty(this.SB1URL4)
                    && (this.SB1URL4 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 5)
            {
                if (!string.IsNullOrEmpty(this.SB1URL5)
                    && (this.SB1URL5 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 6)
            {
                if (!string.IsNullOrEmpty(this.SB1URL6)
                    && (this.SB1URL6 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 7)
            {
                if (!string.IsNullOrEmpty(this.SB1URL7)
                    && (this.SB1URL7 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 8)
            {
                if (!string.IsNullOrEmpty(this.SB1URL8)
                    && (this.SB1URL8 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 9)
            {
                if (!string.IsNullOrEmpty(this.SB1URL9)
                    && (this.SB1URL9 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 10)
            {
                if (!string.IsNullOrEmpty(this.SB1URL10)
                    && (this.SB1URL10 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 11)
            {
                if (!string.IsNullOrEmpty(this.SB1URL11)
                    && (this.SB1URL11 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 12)
            {
                if (!string.IsNullOrEmpty(this.SB1URL12)
                    && (this.SB1URL12 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 13)
            {
                if (!string.IsNullOrEmpty(this.SB1URL13)
                    && (this.SB1URL13 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 14)
            {
                if (!string.IsNullOrEmpty(this.SB1URL14)
                    && (this.SB1URL14 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 15)
            {
                if (!string.IsNullOrEmpty(this.SB1URL15)
                    && (this.SB1URL15 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 16)
            {
                if (!string.IsNullOrEmpty(this.SB1URL16)
                    && (this.SB1URL16 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 17)
            {
                if (!string.IsNullOrEmpty(this.SB1URL17)
                    && (this.SB1URL17 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 18)
            {
                if (!string.IsNullOrEmpty(this.SB1URL18)
                    && (this.SB1URL18 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 19)
            {
                if (!string.IsNullOrEmpty(this.SB1URL19)
                    && (this.SB1URL19 != Constants.NONE))
                {
                    return true;
                }
            }
            else if (indicatorIndex == 20)
            {
                if (!string.IsNullOrEmpty(this.SB1URL20)
                    && (this.SB1URL20 != Constants.NONE))
                {
                    return true;
                }
            }
            return bHasData;
        }
        //not used but hold for potential future use
        private bool NeedsIndicatorAlgo(int indicatorIndex, string mathType, string mathSubType)
        {
            //hold for future sequential calculations
            bool bNeedsInd = false;
            if (mathType == MATH_TYPES.algorithm1.ToString() 
                && mathSubType == MATH_SUBTYPES.subalgorithm9.ToString())
            {
                if (string.IsNullOrEmpty(this.SB1URL4) || (this.SB1URL4 == Constants.NONE))
                {
                    //process indicators 1, 2, and 3 and stop
                    if (indicatorIndex <= 3)
                    {
                        bNeedsInd = true;
                    }
                }
                else
                {
                    if (string.IsNullOrEmpty(this.SB1URL6) || (this.SB1URL6 == Constants.NONE))
                    {
                        //process indicators 4 and 5 and stop
                        if (indicatorIndex == 4 || indicatorIndex == 5)
                        {
                            bNeedsInd = true;
                        }
                    }
                    else
                    {
                        //process indicator 6 and remaining indicators and Score
                        if (indicatorIndex > 5)
                        {
                            bNeedsInd = true;
                        }
                    }
                }
            }
            return bNeedsInd;
        }
        private async Task<string> ProcessAlgosAsync(int indicatorIndex, IndicatorQT1 qt1, 
            string dataURL)
        {
            string sIndicatorsCSV = string.Empty;
            //these algos use doubles in datasets
            IDictionary<string, List<List<double>>> data = new Dictionary<string, List<List<double>>>();
            List<string> lines = new List<string>();
            //some algorithms may need to stream the lines to cut down on memory
            lines = GetDataLines(dataURL);
            //lines = await GetDataLinesAsync(dataURL);
            if (lines != null)
            {
                //reset the data
                data = new Dictionary<string, List<List<double>>>();
                //it's ok for subsequent datasets to overwrite previous results (by design)
                if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm5)
                    || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm6)
                    || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm7)
                    || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm8))
                {
                    //214 uses regular R and Python-style datasets for compatibility
                    data = GetDataSetRandPy(qt1.Label, lines);
                }
                else
                {
                    //algo1 calls this
                    //182: this is used with algos2-4, but they don't call it from here (they call it from PRA)
                    data = GetDataSetwithQT(lines);
                }
                //if null already has an error message
                if (data != null)
                {
                    //each data key is a different indicator
                    List<string> algoIndicators = new List<string>(data.Keys.Count);
                    string algoIndicator = string.Empty;
                    foreach (var ds in data)
                    {
                        if (ds.Value.Count() > 0)
                        {
                            if (ds.Value[0].Count() > 1)
                            {
                                algoIndicator = string.Empty;
                                //182: analyzer 10 indicator limitation enforced
                                if (NeedsIndicator(ds.Key)
                                    && _indicators.Contains(ds.Key) == false)
                                {
                                    //this supports multiple algos that use the same pattern
                                    if (HasMathType(ds.Key, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm6)
                                        || HasMathType(ds.Key, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm8))
                                    {
                                        //regression
                                        algoIndicator = await SetAlgoStats1(ds.Key, ds.Value);
                                    }
                                    else if (HasMathType(ds.Key, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm5)
                                        || HasMathType(ds.Key, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm7))
                                    {
                                        //HasDataMatrix checked to make sure they have a good jointdataurl property
                                        //process dataurls first (no effect on indicatornum because key is checked)
                                        algoIndicator = await SetAlgoCalcs(ds.Key, ds.Value);
                                    }
                                    else if (HasMathType(ds.Key, MATH_TYPES.algorithm2)
                                       || HasMathType(ds.Key, MATH_TYPES.algorithm3)
                                       || HasMathType(ds.Key, MATH_TYPES.algorithm4)
                                       || HasMathType(ds.Key, MATH_TYPES.algorithm5))
                                    {
                                        algoIndicator = ds.Key;
                                    }
                                    else
                                    {
                                        //this generates descriptive stats based on data in data url
                                        //not based on distributions
                                        algoIndicator = await SetIndicatorData(ds.Key, ds.Value);
                                    }
                                    if (!string.IsNullOrEmpty(algoIndicator))
                                    {
                                        algoIndicators.Add(algoIndicator);
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += "Indicator properties are missing or wrong. Do indicator labels correspond to dataset labels? Do indicators have correct algorithms? Please recheck all indicator properties.";
                                    }
                                }
                            }
                        }
                    }
                    sIndicatorsCSV = GetIndicatorsCSV(algoIndicators);
                    //188
                    //Calc1.DataToAnalyze holds QT vectors from each each ind.DataToAnalyze
                    this.CopyData(data);
                }
            }
            return sIndicatorsCSV;
        }
        private string GetIndicatorsCSV(List<string> algoIndicators)
        {
            string sIndicatorsCSV = string.Empty;
            foreach (var indicator in algoIndicators)
            {
                if (!string.IsNullOrEmpty(indicator))
                {
                    sIndicatorsCSV += string.Concat(indicator, Constants.CSV_DELIMITER);
                }
            }
            //remove the last delimiter
            if (sIndicatorsCSV.EndsWith(Constants.CSV_DELIMITER))
            {
                sIndicatorsCSV = sIndicatorsCSV.Remove(sIndicatorsCSV.Length - 1, 1);
            }
            return sIndicatorsCSV;
        }
        public static string GetIndicatorsCSV(List<string> indicators, string algoIndicator)
        {
            string sIndicatorsCSV = string.Empty;
            foreach (var indicator in indicators)
            {
                if (!algoIndicator.Contains(indicator))
                {
                    if (!algoIndicator.EndsWith(Constants.CSV_DELIMITER))
                    {
                        algoIndicator += Constants.CSV_DELIMITER;
                    }
                    algoIndicator += string.Concat(indicator, Constants.CSV_DELIMITER);
                }
            }
            //remove the last delimiter
            if (algoIndicator.EndsWith(Constants.CSV_DELIMITER))
            {
                algoIndicator = algoIndicator.Remove(algoIndicator.Length - 1, 1);
            }
            sIndicatorsCSV = algoIndicator;
            return sIndicatorsCSV;
        }
       
        private async Task<string> ProcessAlgoCorrAsync(int indicatorIndex, string scriptURL, string dataURL)
        {
            string algoindicators = string.Empty;
            string sError = string.Empty;
            //see if there is a corresponding dataset
            //this requires a 1 to 1 relation between dataurls and jointdataurls
            IDictionary<string, List<List<double>>> data = await GetDataSet1(dataURL);
            //has to replace the algo code above
            if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm2)
                || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm3)
                || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm4))
            {
                //the correlation matrixes make limitation on indicators to analyze difficult, so not implemented
                algoindicators = await SetAlgoCorrStats(indicatorIndex, scriptURL, data);
            }
            return algoindicators;
        }
        private async Task<string> ProcessAlgosAsync3(int indicatorIndex, string urls)
        {
            string sIndicatorsCSV = string.Empty;
            List<string> lines = new List<string>();
            List<string> lines2 = new List<string>();
            IDictionary<string, List<List<string>>> data = new Dictionary<string, List<List<string>>>();
            IDictionary<string, List<List<string>>> colSets = new Dictionary<string, List<List<string>>>();
            if (HasIndicatorData(indicatorIndex)
                && indicatorIndex != 4)
            {
                //all use at least 1 dataset
                lines = GetDataLines(0, urls);
                if (indicatorIndex == 6
                    || indicatorIndex == 7)
                {
                    //ind 5 has the costs
                    lines2 = GetMathResultLines(5);
                }
            }
            else
            {
                if (indicatorIndex == 3)
                {
                    if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm11)
                        || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm12))
                    {
                        //ind 3 has the rmis
                        lines = GetMathResultLines(1);
                        //ind 2 has the costs
                        lines2 = GetMathResultLines(2);
                    }
                }
                else if (indicatorIndex == 4)
                {
                    //ind 3 has the damage percents
                    lines = GetMathResultLines(3);
                    //ind 2 has the asset values
                    lines2 = GetMathResultLines(2);
                    //198: ind 4 may have the trends
                    if (HasIndicatorData(indicatorIndex))
                    {
                        List<string> lines3 = new List<string>();
                        lines3 = GetDataLines(0, urls);
                        //get rid of header row
                        lines3.RemoveAt(0);
                        //append them to lines2 (used in same calc)
                        lines2.AddRange(lines3);
                    }

                }
                else if (indicatorIndex == 6
                    || indicatorIndex == 7)
                {
                    //ind 4 has the avg ann damage 
                    lines = GetMathResultLines(4);
                    //ind 5 has the costs
                    lines2 = GetMathResultLines(5);
                }
            }
            if (lines != null)
            {
                //get the data
                data = GetDataSetFull2(lines);
                colSets = await GetColumnSetFull(lines);
                //if null already has an error message
                if (data != null)
                {
                    List<string> algoIndicators = new List<string>(data.Keys.Count);
                    string algoIndicator = string.Empty;
                    string sLabel = string.Empty;
                    //this data url should have one and only 1 indicator in it -same as rproject datasets
                    foreach (var ds in data)
                    {
                        algoIndicator = string.Empty;
                        sLabel = ds.Key;
                        sLabel = GetLabel(indicatorIndex);
                        if (NeedsIndicator(sLabel)
                            && _indicators.Contains(sLabel) == false)
                        {
                            //these all use 1 dataset
                            algoIndicator = await SetAlgoStats3(sLabel, ds.Value, 
                                colSets[ds.Key], lines2);
                            if (!string.IsNullOrEmpty(algoIndicator))
                            {
                                algoIndicators.Add(algoIndicator);
                            }
                            else
                            {
                                this.CalculatorDescription += "Indicator properties are missing or wrong. Do indicator labels correspond to dataset labels? Do indicators have correct algorithms? Please recheck all indicator properties.";
                            }
                        }
                    }
                    sIndicatorsCSV = GetIndicatorsCSV(algoIndicators);
                }
            }
            return sIndicatorsCSV;
        }
        private async Task<string> ProcessAlgosAsync4(int indicatorIndex, string urls)
        {
            string sIndicatorsCSV = string.Empty;
            List<string> lines = new List<string>();
            List<string> lines2 = new List<string>();
            IDictionary<string, List<List<string>>> data = new Dictionary<string, List<List<string>>>();
            IDictionary<string, List<List<string>>> colSets = new Dictionary<string, List<List<string>>>();
            if (HasIndicatorData(indicatorIndex))
            {
                //all use at least 1 dataset
                lines = GetDataLines(0, urls);
                if (indicatorIndex == 5)
                {
                    lines2 = GetDataLines(1, urls);
                }
                else
                {
                    if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1,
                        MATH_SUBTYPES.subalgorithm11)
                        || HasMathType(indicatorIndex, MATH_TYPES.algorithm1,
                        MATH_SUBTYPES.subalgorithm12))
                    {
                        if (indicatorIndex == 2)
                        {
                            lines2 = GetDataLines(1, urls);
                        }
                    }
                    else if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1,
                        MATH_SUBTYPES.subalgorithm17))
                    {
                        //1st url is sdg and 2nd is pop
                        lines2 = GetDataLines(1, urls);
                    }
                }
            }
            if (lines != null)
            {
                //get the data
                data = GetDataSetFull2(lines);
                colSets = await GetColumnSetFull(lines);
                //if null already has an error message
                if (data != null)
                {
                    List<string> algoIndicators = new List<string>(data.Keys.Count);
                    string algoIndicator = string.Empty;
                    string sLabel = string.Empty;
                    foreach (var ds in data)
                    {
                        algoIndicator = string.Empty;
                        sLabel = ds.Key;
                        if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm11)
                            || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm12)
                            || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm13)
                            || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm14) 
                            || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm15)
                            || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm16)
                            || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm17)
                            || HasMathType(indicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm18))
                        {
                            if (indicatorIndex == 0)
                            {
                                sLabel = _score;
                            }
                            else if (indicatorIndex == 1)
                            {
                                sLabel = SB1Label1;
                            }
                        }
                        sLabel = GetLabel(indicatorIndex);
                        if (NeedsIndicator(sLabel)
                            && _indicators.Contains(sLabel) == false)
                        {
                            algoIndicator = await SetAlgoStats4(sLabel, ds.Value, colSets[ds.Key], lines2);
                            if (!string.IsNullOrEmpty(algoIndicator))
                            {
                                algoIndicators.Add(algoIndicator);
                            }
                            else
                            {
                                this.CalculatorDescription += "Indicator properties are missing or wrong. Do indicator labels correspond to dataset labels? Do indicators have correct algorithms? Please recheck all indicator properties.";
                            }
                        }
                    }
                    sIndicatorsCSV = GetIndicatorsCSV(algoIndicators);
                }
            }
            return sIndicatorsCSV;
        }
        private async Task<string> ProcessAlgosAsyncML(int indicatorIndex, IndicatorQT1 qt1, 
            string dataURL1, string dataURL2)
        {
            string sIndicatorsCSV = string.Empty;
            List<string> lines = new List<string>();
            List<string> lines2 = new List<string>();
            List<List<string>> data = new List<List<string>>();
            List<List<string>> data2 = new List<List<string>>();
            List<List<string>> colSet = new List<List<string>>();
            if (HasMathType(indicatorIndex, MATH_TYPES.algorithm1))
            {
                //training dataset
                lines = await GetDataLinesAsync(dataURL1);
                //test dataset
                lines2 = await GetDataLinesAsync(dataURL2);
            }
            else if (HasMathType(indicatorIndex, MATH_TYPES.algorithm2)
                || HasMathType(indicatorIndex, MATH_TYPES.algorithm3)
                || HasMathType(indicatorIndex, MATH_TYPES.algorithm4))
            {
                //wrong algorithm: they use ProcessAlgosAsync2 until more sophisticated algos built
                this.CalculatorDescription += "Version 214 does not support subalgorithm_01 syntax for R or Python.";
            }
            if (lines != null && lines2 != null)
            {
                //get the 1st dataset
                data = await GetDataSetML(lines);
                //get the row identifiers from the test dataset
                colSet = await CalculatorHelpers.GetColumnSetML(lines2, this);
                //if null already has an error message
                if (data != null)
                {
                    //get the 2nd dataset
                    data2 = await GetDataSetML(lines2);
                    List<string> algoIndicators = new List<string>();
                    string algoIndicator = string.Empty;
                    algoIndicator = string.Empty;
                    if (NeedsIndicator(qt1.Label)
                        && _indicators.Contains(qt1.Label) == false)
                    {
                        algoIndicator = await SetAlgoStatsML(qt1,
                            data, colSet, data2, dataURL2);
                        if (!string.IsNullOrEmpty(algoIndicator))
                        {
                            algoIndicators.Add(algoIndicator);
                        }
                        else
                        {
                            this.CalculatorDescription += "Indicator properties are missing or wrong. Do indicator labels correspond to dataset labels? Do indicators have correct algorithms? Please recheck all indicator properties.";
                        }
                    }
                    sIndicatorsCSV = GetIndicatorsCSV(algoIndicators);
                }
            }
            return sIndicatorsCSV;
        }
        private async Task<string> ProcessAlgosAsync2(IndicatorQT1 qt1, string scriptURL, string dataURL)
        {
            string sIndicatorsCSV = string.Empty;
            //this algo uses r and python project data files passed directly to algo
            bool bHasColNames = false;
            if (HasMathType(IndicatorIndex, MATH_TYPES.algorithm2)
                || HasMathType(IndicatorIndex, MATH_TYPES.algorithm3)
                || HasMathType(IndicatorIndex, MATH_TYPES.algorithm4))
            {
                //ok for algos that don't need to calculate qT from q1 to q10 vars
                bHasColNames = await SetColumnNames(dataURL);
            }
            //if false already has an error message
            if (bHasColNames == true)
            {
                //each data key is a different indicator
                List<string> algoIndicators = new List<string>();
                if (_indicators.Contains(qt1.Label) == false)
                {
                    //this supports multiple algos that use the same pattern
                    if (HasMathType(IndicatorIndex, MATH_TYPES.algorithm2)
                        || HasMathType(IndicatorIndex, MATH_TYPES.algorithm3)
                        || HasMathType(IndicatorIndex, MATH_TYPES.algorithm4))
                    {
                        qt1.Label = await SetAlgoStats2(qt1.Label, dataURL, scriptURL);
                    }
                    if (!string.IsNullOrEmpty(qt1.Label))
                    {
                        algoIndicators.Add(qt1.Label);
                    }
                    else
                    {
                        this.CalculatorDescription += "Indicator properties are missing or wrong. Do indicator labels correspond to dataset labels? Do indicators have correct algorithms? Please recheck all indicator properties.";
                    }
                    foreach (var indicator in algoIndicators)
                    {
                        if (!string.IsNullOrEmpty(indicator))
                        {
                            sIndicatorsCSV += string.Concat(indicator, Constants.CSV_DELIMITER);
                        }
                    }
                    //remove the last delimiter
                    if (sIndicatorsCSV.EndsWith(Constants.CSV_DELIMITER))
                    {
                        sIndicatorsCSV = sIndicatorsCSV.Remove(sIndicatorsCSV.Length - 1, 1);
                    }
                }
            }
            return sIndicatorsCSV;
        }
        
        public async Task<string> ProcessAlgosForAnalyzersAsync(List<SB1Stock> stocks)
        {
            string sIndicatorsCSV = string.Empty;
            int i = 0;
            //copy the individual datasets into analyzerStock.DataToAnalyze
            //each change stock will have totals passed back from algo; algo needs to know how many totals are needed for changestocks
            this.Observations = stocks.Count;
            foreach (var calc in stocks)
            {
                this.CopyData(calc.DataToAnalyze);
                if (i == 0)
                {
                    if (!string.IsNullOrEmpty(calc.DataColNames))
                    {
                        //take column names from first dataset; by rule all datasets have to have the same column names
                        //as an alternative to using List<double> datasets could subsitute lines and have more flexibility and complexity
                        this._colNames = calc.DataColNames.Split(Constants.CSV_DELIMITERS);
                    }
                }
                i++;
            }
            //if null already has an error message
            if (this.DataToAnalyze != null)
            {
                //each data key is a different indicator
                List<string> algoIndicators = new List<string>(this.DataToAnalyze.Keys.Count);
                string algoIndicator = string.Empty;
                i = 1;
                foreach (var ds in this.DataToAnalyze)
                {
                    algoIndicator = string.Empty;
                    this.AddIndicatorToHoldTotals(i, ds.Key);
                    //this supports multiple algos that use the same pattern
                    if (HasMathType(IndicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm6)
                        || HasMathType(IndicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm8))
                    {
                        //regression
                        algoIndicator = await SetAlgoStats1(ds.Key, ds.Value);
                    }
                    else if (HasMathType(IndicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm5)
                        || HasMathType(IndicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm7))
                    {
                        //HasDataMatrix checked to make sure they have a good jointdataurl property
                        //process dataurls first (no effect on indicatornum because key is checked)
                        algoIndicator = await SetAlgoCalcs(ds.Key, ds.Value);
                    }
                    else
                    {
                        //this generates descriptive stats based on data in data url
                        //not based on distributions
                        algoIndicator = await SetIndicatorData(ds.Key, ds.Value);
                    }
                    if (!string.IsNullOrEmpty(algoIndicator))
                    {
                        algoIndicators.Add(algoIndicator);
                    }
                    else
                    {
                        this.ErrorMessage += Errors.MakeStandardErrorMsg("INDICATORS_BAD");
                    }
                    //analytic results for analyzers are in the dataset not in stock object
                    if (this.DataToAnalyze == null)
                    {
                        this.ErrorMessage += Errors.MakeStandardErrorMsg("INDICATORS_BAD");
                    }
                    if (this.DataToAnalyze.Count == 0)
                    {
                        this.ErrorMessage += Errors.MakeStandardErrorMsg("INDICATORS_BAD");
                    }
                    i++;
                }
                foreach (var indicator in algoIndicators)
                {
                    if (!string.IsNullOrEmpty(indicator))
                    {
                        sIndicatorsCSV += string.Concat(indicator, Constants.CSV_DELIMITER);
                    }
                }
                //remove the last delimiter
                if (sIndicatorsCSV.EndsWith(Constants.CSV_DELIMITER))
                {
                    sIndicatorsCSV = sIndicatorsCSV.Remove(sIndicatorsCSV.Length - 1, 1);
                }
            }
            return sIndicatorsCSV;
        }
        private void AddIndicatorToHoldTotals(int indicatorIndex, string label)
        {
            if (indicatorIndex == 1)
            {
                //these props are used later to run the correct algo
                this.SB1Label1 = label;
                this.SB1MathExpression1 = this.MathExpression;
                this.SB1MathType1 = this.MathType;
                this.SB1MathSubType1 = this.MathSubType;
            }
            else if (indicatorIndex == 2)
            {
                //these props are used later to run the correct algo
                this.SB1Label2 = label;
                this.SB1MathExpression2 = this.MathExpression;
                this.SB1MathType2 = this.MathType;
                this.SB1MathSubType2 = this.MathSubType;
            }
            else if (indicatorIndex == 3)
            {
                //these props are used later to run the correct algo
                this.SB1Label3 = label;
                this.SB1MathExpression3 = this.MathExpression;
                this.SB1MathType3 = this.MathType;
                this.SB1MathSubType3 = this.MathSubType;
            }
            else if (indicatorIndex == 4)
            {
                //these props are used later to run the correct algo
                this.SB1Label4 = label;
                this.SB1MathExpression4 = this.MathExpression;
                this.SB1MathType4 = this.MathType;
                this.SB1MathSubType4 = this.MathSubType;
            }
            else if (indicatorIndex == 5)
            {
                //these props are used later to run the correct algo
                this.SB1Label5 = label;
                this.SB1MathExpression5 = this.MathExpression;
                this.SB1MathType5 = this.MathType;
                this.SB1MathSubType5 = this.MathSubType;
            }
            else if (indicatorIndex == 6)
            {
                //these props are used later to run the correct algo
                this.SB1Label6 = label;
                this.SB1MathExpression6 = this.MathExpression;
                this.SB1MathType6 = this.MathType;
                this.SB1MathSubType6 = this.MathSubType;
            }
            else if (indicatorIndex == 7)
            {
                //these props are used later to run the correct algo
                this.SB1Label7 = label;
                this.SB1MathExpression7 = this.MathExpression;
                this.SB1MathType7 = this.MathType;
                this.SB1MathSubType7 = this.MathSubType;
            }
            else if (indicatorIndex == 8)
            {
                //these props are used later to run the correct algo
                this.SB1Label8 = label;
                this.SB1MathExpression8 = this.MathExpression;
                this.SB1MathType8 = this.MathType;
                this.SB1MathSubType8 = this.MathSubType;
            }
            else if (indicatorIndex == 9)
            {
                //these props are used later to run the correct algo
                this.SB1Label9 = label;
                this.SB1MathExpression9 = this.MathExpression;
                this.SB1MathType9 = this.MathType;
                this.SB1MathSubType9 = this.MathSubType;
            }
            else if (indicatorIndex == 10)
            {
                //these props are used later to run the correct algo
                this.SB1Label10 = label;
                this.SB1MathExpression10 = this.MathExpression;
                this.SB1MathType10 = this.MathType;
                this.SB1MathSubType10 = this.MathSubType;
            }
            else if (indicatorIndex == 11)
            {
                //these props are used later to run the correct algo
                this.SB1Label11 = label;
                this.SB1MathExpression11 = this.MathExpression;
                this.SB1MathType11 = this.MathType;
                this.SB1MathSubType11 = this.MathSubType;
            }
            else if (indicatorIndex == 12)
            {
                //these props are used later to run the correct algo
                this.SB1Label12 = label;
                this.SB1MathExpression12 = this.MathExpression;
                this.SB1MathType12 = this.MathType;
                this.SB1MathSubType12 = this.MathSubType;
            }
            else if (indicatorIndex == 13)
            {
                //these props are used later to run the correct algo
                this.SB1Label13 = label;
                this.SB1MathExpression13 = this.MathExpression;
                this.SB1MathType13 = this.MathType;
                this.SB1MathSubType13 = this.MathSubType;
            }
            else if (indicatorIndex == 14)
            {
                //these props are used later to run the correct algo
                this.SB1Label14 = label;
                this.SB1MathExpression14 = this.MathExpression;
                this.SB1MathType14 = this.MathType;
                this.SB1MathSubType14 = this.MathSubType;
            }
            else if (indicatorIndex == 15)
            {
                //these props are used later to run the correct algo
                this.SB1Label15 = label;
                this.SB1MathExpression15 = this.MathExpression;
                this.SB1MathType15 = this.MathType;
                this.SB1MathSubType15 = this.MathSubType;
            }
            else if (indicatorIndex == 16)
            {
                //these props are used later to run the correct algo
                this.SB1Label16 = label;
                this.SB1MathExpression16 = this.MathExpression;
                this.SB1MathType16 = this.MathType;
                this.SB1MathSubType16 = this.MathSubType;
            }
            else if (indicatorIndex == 17)
            {
                //these props are used later to run the correct algo
                this.SB1Label17 = label;
                this.SB1MathExpression17 = this.MathExpression;
                this.SB1MathType17 = this.MathType;
                this.SB1MathSubType17 = this.MathSubType;
            }
            else if (indicatorIndex == 18)
            {
                //these props are used later to run the correct algo
                this.SB1Label18 = label;
                this.SB1MathExpression18 = this.MathExpression;
                this.SB1MathType18 = this.MathType;
                this.SB1MathSubType18 = this.MathSubType;
            }
            else if (indicatorIndex == 19)
            {
                //these props are used later to run the correct algo
                this.SB1Label19 = label;
                this.SB1MathExpression19 = this.MathExpression;
                this.SB1MathType19 = this.MathType;
                this.SB1MathSubType19 = this.MathSubType;
            }
            else if (indicatorIndex == 20)
            {
                //these props are used later to run the correct algo
                this.SB1Label20 = label;
                this.SB1MathExpression20 = this.MathExpression;
                this.SB1MathType20 = this.MathType;
                this.SB1MathSubType20 = this.MathSubType;
            }
        }
        private string GetJDataURL(string dataURL)
        {
            //run this synchronously
            //increment the dataindex and set the corresponding jdataurl
            _dataIndex++;
            int iJDataIndex = _dataIndex;
            if (string.IsNullOrEmpty(this.SB1JointDataURL))
            {
                this.ErrorMessage += string.Concat(" ",
                    Errors.MakeStandardErrorMsg("JDATAURL_BAD"), dataURL, " index = ", iJDataIndex.ToString());
                return string.Empty;
            }
            string[] jDataURLs = this.SB1JointDataURL.Split(Constants.STRING_DELIMITERS);
            string jDataURL = string.Empty;
            if (jDataURLs.Count() > iJDataIndex)
            {
                jDataURL = jDataURLs[iJDataIndex];
            }
            if (string.IsNullOrEmpty(jDataURL))
            {
                this.ErrorMessage += string.Concat(" ",
                    Errors.MakeStandardErrorMsg("JDATAURL_BAD"), dataURL, " index = ", iJDataIndex.ToString());
                return string.Empty;
            }
            return jDataURL;
        }
        
        private string[] GetIndicators(string[] csvIndicators)
        {
            List<string> inds = new List<string>();
            //version 1.9.2 allows multiple subalgos to be run for multiple subinds
            if (_indicators != null)
            {
                foreach (var indicator in _indicators)
                {
                    inds.Add(indicator);
                }
            }
            foreach (var indicatorscsv in csvIndicators)
            {
                string[] newindicators = indicatorscsv.Split(Constants.CSV_DELIMITERS);
                foreach (var newindicator in newindicators)
                {
                    inds.Add(newindicator);
                }
            }
            return inds.ToArray();
        }
        private string[] GetIndicatorsDisplay()
        {
            List<string> inds = new List<string>();
            if (this.SB1MathType1 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType1 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label1);
            }
            if (this.SB1MathType2 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType2 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label2);
            }
            if (this.SB1MathType3 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType3 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label3);
            }
            if (this.SB1MathType4 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType4 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label4);
            }
            if (this.SB1MathType5 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType5 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label5);
            }
            if (this.SB1MathType6 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType6 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label6);
            }
            if (this.SB1MathType7 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType7 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label7);
            }
            if (this.SB1MathType8 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType8 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label8);
            }
            if (this.SB1MathType9 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType9 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label9);
            }
            if (this.SB1MathType10 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType10 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label10);
            }
            if (this.SB1MathType11 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType11 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label11);
            }
            if (this.SB1MathType12 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType12 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label12);
            }
            if (this.SB1MathType13 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType13 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label13);
            }
            if (this.SB1MathType14 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType14 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label14);
            }
            if (this.SB1MathType15 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType15 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label15);
            }
            if (this.SB1MathType16 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType16 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label16);
            }
            if (this.SB1MathType17 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType17 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label17);
            }
            if (this.SB1MathType18 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType18 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label18);
            }
            if (this.SB1MathType19 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType19 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label19);
            }
            if (this.SB1MathType20 == MATH_TYPES.algorithm5.ToString()
                && this.SB1MathSubType20 == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                inds.Add(this.SB1Label20);
            }
            if (this.SB1ScoreMathType == MATH_TYPES.algorithm5.ToString()
                && this.SB1ScoreMathSubType == MATH_SUBTYPES.subalgorithm1.ToString())
            {
                //scores filtered by 'score'
                inds.Add(_score);
            }
            return inds.ToArray();
        }
        public void AddAllIndicators(List<string> newInds)
        {
            if (!newInds.Contains(this.SB1Label1)
                && (!string.IsNullOrEmpty(this.SB1Label1)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label1);
            }
            if (!newInds.Contains(this.SB1Label2)
                && (!string.IsNullOrEmpty(this.SB1Label2)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label2);
            }
            if (!newInds.Contains(this.SB1Label3)
                && (!string.IsNullOrEmpty(this.SB1Label3)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label3);
            }
            if (!newInds.Contains(this.SB1Label4)
                && (!string.IsNullOrEmpty(this.SB1Label4)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label4);
            }
            if (!newInds.Contains(this.SB1Label5)
                && (!string.IsNullOrEmpty(this.SB1Label5)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label5);
            }
            if (!newInds.Contains(this.SB1Label6)
                && (!string.IsNullOrEmpty(this.SB1Label6)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label6);
            }
            if (!newInds.Contains(this.SB1Label7)
                && (!string.IsNullOrEmpty(this.SB1Label7)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label7);
            }
            if (!newInds.Contains(this.SB1Label8)
                && (!string.IsNullOrEmpty(this.SB1Label8)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label8);
            }
            if (!newInds.Contains(this.SB1Label9)
                && (!string.IsNullOrEmpty(this.SB1Label9)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label9);
            }
            if (!newInds.Contains(this.SB1Label10)
                && (!string.IsNullOrEmpty(this.SB1Label10)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label10);
            }
            if (!newInds.Contains(this.SB1Label11)
                && (!string.IsNullOrEmpty(this.SB1Label11)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label11);
            }
            if (!newInds.Contains(this.SB1Label12)
                && (!string.IsNullOrEmpty(this.SB1Label12)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label12);
            }
            if (!newInds.Contains(this.SB1Label13)
                && (!string.IsNullOrEmpty(this.SB1Label13)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label13);
            }
            if (!newInds.Contains(this.SB1Label14)
                && (!string.IsNullOrEmpty(this.SB1Label14)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label14);
            }
            if (!newInds.Contains(this.SB1Label15)
                && (!string.IsNullOrEmpty(this.SB1Label15)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label15);
            }
            if (!newInds.Contains(this.SB1Label16)
                && (!string.IsNullOrEmpty(this.SB1Label16)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label16);
            }
            if (!newInds.Contains(this.SB1Label17)
                && (!string.IsNullOrEmpty(this.SB1Label17)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label17);
            }
            if (!newInds.Contains(this.SB1Label18)
                && (!string.IsNullOrEmpty(this.SB1Label18)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label18);
            }
            if (!newInds.Contains(this.SB1Label19)
                && (!string.IsNullOrEmpty(this.SB1Label19)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label19);
            }
            if (!newInds.Contains(this.SB1Label20)
                && (!string.IsNullOrEmpty(this.SB1Label20)))
            {
                //ui doesn't have label just label constant
                newInds.Add(this.SB1Label20);
            }
        }

        private bool NeedsIndicator(string label)
        {
            bool bNeedsIndicator = false;
            if (label == _score)
            {
                return true;
            }
            string sLabelConstant = GetIndicatorLabelConstant(label);
            if (string.IsNullOrEmpty(sLabelConstant))
            {
                //rule is that the dataset must correspond to an indicator
                return bNeedsIndicator;
            }
            bNeedsIndicator = SB1AnalyzerHelper
                .NeedsAnalyzerIndicator(sLabelConstant, this.CalcParameters);
            //need to also exclude the indicator from being included in reports
            if (!bNeedsIndicator)
            {
                ExcludeIndicator(label);
            }
            return bNeedsIndicator;
        }
        private string GetIndicatorLabelConstant(string label)
        {
            string scLabel = string.Empty;
            if (label == this.SB1Label1)
            {
                //ui doesn't have label just label constant
                scLabel = cSB1Label1;
            }
            else if (label == this.SB1Label2)
            {
                scLabel = cSB1Label2;
            }
            else if (label == this.SB1Label3)
            {
                scLabel = cSB1Label3;
            }
            else if (label == this.SB1Label4)
            {
                scLabel = cSB1Label4;
            }
            else if (label == this.SB1Label5)
            {
                scLabel = cSB1Label5;
            }
            else if (label == this.SB1Label6)
            {
                scLabel = cSB1Label6;
            }
            else if (label == this.SB1Label7)
            {
                scLabel = cSB1Label7;
            }
            else if (label == this.SB1Label8)
            {
                scLabel = cSB1Label8;
            }
            else if (label == this.SB1Label9)
            {
                scLabel = cSB1Label9;
            }
            else if (label == this.SB1Label10)
            {
                scLabel = cSB1Label10;
            }
            else if (label == this.SB1Label11)
            {
                scLabel = cSB1Label11;
            }
            else if (label == this.SB1Label12)
            {
                scLabel = cSB1Label12;
            }
            else if (label == this.SB1Label13)
            {
                scLabel = cSB1Label13;
            }
            else if (label == this.SB1Label14)
            {
                scLabel = cSB1Label14;
            }
            else if (label == this.SB1Label15)
            {
                scLabel = cSB1Label15;
            }
            else if (label == this.SB1Label16)
            {
                scLabel = cSB1Label16;
            }
            else if (label == this.SB1Label17)
            {
                scLabel = cSB1Label17;
            }
            else if (label == this.SB1Label18)
            {
                scLabel = cSB1Label18;
            }
            else if (label == this.SB1Label19)
            {
                scLabel = cSB1Label19;
            }
            else if (label == this.SB1Label20)
            {
                scLabel = cSB1Label20;
            }
            else
            {
                //ignore the row
            }
            return scLabel;
        }
        private string ExcludeIndicator(string label)
        {
            string scLabel = string.Empty;
            if (label == this.SB1Label1)
            {
                //some stylesheets use these to set colheaders
                //this.SB1Label1 = string.Empty;
                //this.SB1Name1 = string.Empty;
            }
            else if (label == this.SB1Label2)
            {
                this.SB1Label2 = string.Empty;
                this.SB1Name2 = string.Empty;
            }
            else if (label == this.SB1Label3)
            {
                this.SB1Label3 = string.Empty;
                this.SB1Name3 = string.Empty;
            }
            else if (label == this.SB1Label4)
            {
                this.SB1Label4 = string.Empty;
                this.SB1Name4 = string.Empty;
            }
            else if (label == this.SB1Label5)
            {
                this.SB1Label5 = string.Empty;
                this.SB1Name5 = string.Empty;
            }
            else if (label == this.SB1Label6)
            {
                this.SB1Label6 = string.Empty;
                this.SB1Name6 = string.Empty;
            }
            else if (label == this.SB1Label7)
            {
                this.SB1Label7 = string.Empty;
                this.SB1Name7 = string.Empty;
            }
            else if (label == this.SB1Label8)
            {
                this.SB1Label8 = string.Empty;
                this.SB1Name8 = string.Empty;
            }
            else if (label == this.SB1Label9)
            {
                this.SB1Label9 = string.Empty;
                this.SB1Name9 = string.Empty;
            }
            else if (label == this.SB1Label10)
            {
                this.SB1Label10 = string.Empty;
                this.SB1Name10 = string.Empty;
            }
            else if (label == this.SB1Label11)
            {
                this.SB1Label11 = string.Empty;
                this.SB1Name11 = string.Empty;
            }
            else if (label == this.SB1Label12)
            {
                this.SB1Label12 = string.Empty;
                this.SB1Name12 = string.Empty;
            }
            else if (label == this.SB1Label13)
            {
                this.SB1Label13 = string.Empty;
                this.SB1Name13 = string.Empty;
            }
            else if (label == this.SB1Label14)
            {
                this.SB1Label14 = string.Empty;
                this.SB1Name14 = string.Empty;
            }
            else if (label == this.SB1Label15)
            {
                this.SB1Label15 = string.Empty;
                this.SB1Name15 = string.Empty;
            }
            else if (label == this.SB1Label16)
            {
                this.SB1Label16 = string.Empty;
                this.SB1Name16 = string.Empty;
            }
            else if (label == this.SB1Label17)
            {
                this.SB1Label17 = string.Empty;
                this.SB1Name17 = string.Empty;
            }
            else if (label == this.SB1Label18)
            {
                this.SB1Label18 = string.Empty;
                this.SB1Name18 = string.Empty;
            }
            else if (label == this.SB1Label19)
            {
                this.SB1Label19 = string.Empty;
                this.SB1Name19 = string.Empty;
            }
            else if (label == this.SB1Label20)
            {
                this.SB1Label20 = string.Empty;
                this.SB1Name20 = string.Empty;
            }
            else
            {
                //ignore the row
            }
            return scLabel;
        }
        public async Task<List<string>> GetDataLinesAsync(string dataURL, int rowIndex = -1)
        {
            List<string> lines = new List<string>();
            lines = await CalculatorHelpers.ReadLines(this.CalcParameters.ExtensionDocToCalcURI, dataURL, rowIndex);
            if (lines == null)
            {
                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BAD"));
                return null;
            }
            if (lines.Count == 0)
            {
                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BAD"));
                return null;
            }
            if (lines.Count == 0)
            {
                //not an error no data set for the d = 0 to d < 15 iteration
                return null;
            }
            return lines;
        }
        //214 rowIndex added for columnnames only
        public async Task<List<string>> GetDataRowAsync(string dataURL, int rowIndex)
        {
            List<string> lines = new List<string>();
            lines = await CalculatorHelpers.ReadLines(this.CalcParameters.ExtensionDocToCalcURI, dataURL, rowIndex);
            if (lines == null)
            {
                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BAD"));
                return null;
            }
            if (lines.Count == 0)
            {
                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BAD"));
                return null;
            }
            if (lines.Count == 0)
            {
                //not an error no data set for the d = 0 to d < 15 iteration
                return null;
            }
            return lines;
        }
        //214 rowIndex added for columnnames only
        public List<string> GetDataLines(string dataURL, int rowIndex = -1)
        {
            List<string> lines = new List<string>();
            lines = CalculatorHelpers.ReadLines(this.CalcParameters.ExtensionDocToCalcURI, dataURL, rowIndex).Result;
            if (lines == null)
            {
                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BAD"));
                return null;
            }
            if (lines.Count == 0)
            {
                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BAD"));
                return null;
            }
            if (!string.IsNullOrEmpty(this.CalcParameters.ExtensionDocToCalcURI.ErrorMessage))
            {
                this.CalculatorDescription += this.CalcParameters.ExtensionDocToCalcURI.ErrorMessage;
                return null;
            }
            if (lines.Count == 0)
            {
                //not an error no data set for the d = 0 to d < 15 iteration
                return null;
            }
            return lines;
        }
        private List<string> GetDataLines(int dataSetIndex, string url)
        {
            List<string> lines = new List<string>();
            //semicolon delimiter
            string[] dataURLs = url.Split(Constants.STRING_DELIMITERS);
            for (int i = 0; i < dataURLs.Count(); i++)
            {
                if (i == dataSetIndex)
                {
                    lines = CalculatorHelpers.ReadLines(this.CalcParameters.ExtensionDocToCalcURI, dataURLs[i]).Result;
                    if (lines == null)
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BAD"));
                        return null;
                    }
                    if (lines.Count == 0)
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BAD"));
                        return null;
                    }
                    if (!string.IsNullOrEmpty(this.CalcParameters.ExtensionDocToCalcURI.ErrorMessage))
                    {
                        this.CalculatorDescription += this.CalcParameters.ExtensionDocToCalcURI.ErrorMessage;
                        return null;
                    }
                }
            }
            if (lines.Count == 0)
            {
                //not an error no data set for the d = 0 to d < 15 iteration
                return null;
            }
            return lines;
        }
        private List<string> GetMathResultLines(int indicatorIndex)
        {
            List<string> lines = new List<string>();
            if (indicatorIndex == 1)
            {
                if (SB1MathResult1.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult1);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult1, 1);
                }
            }
            else if (indicatorIndex == 2)
            {
                if (SB1MathResult2.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult2);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult2, 1);
                }
            }
            else if (indicatorIndex == 3)
            {
                if (SB1MathResult3.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult3);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult3, 1);
                }
            }
            else if (indicatorIndex == 4)
            {
                if (SB1MathResult4.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult4);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult4, 1);
                }
            }
            else if (indicatorIndex == 5)
            {
                if (SB1MathResult5.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult5);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult5, 1);
                }
            }
            else if (indicatorIndex == 6)
            {
                if (SB1MathResult6.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult6);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult6, 1);
                }
            }
            else if (indicatorIndex == 7)
            {
                if (SB1MathResult7.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult7);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult7, 1);
                }
            }
            else if (indicatorIndex == 8)
            {
                if (SB1MathResult8.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult8);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult8, 1);
                }
            }
            else if (indicatorIndex == 9)
            {
                if (SB1MathResult9.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult9);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult9, 1);
                }
            }
            else if (indicatorIndex == 10)
            {
                if (SB1MathResult10.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult10);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult10, 1);
                }
            }
            else if (indicatorIndex == 11)
            {
                if (SB1MathResult11.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult11);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult11, 1);
                }
            }
            else if (indicatorIndex == 12)
            {
                if (SB1MathResult12.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult12);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult12, 1);
                }
            }
            else if (indicatorIndex == 13)
            {
                if (SB1MathResult13.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult13);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult13, 1);
                }
            }
            else if (indicatorIndex == 14)
            {
                if (SB1MathResult14.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult14);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult14, 1);
                }
            }
            else if (indicatorIndex == 15)
            {
                if (SB1MathResult15.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult15);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult15, 1);
                }
            }
            else if (indicatorIndex == 16)
            {
                if (SB1MathResult16.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult16);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult16, 1);
                }
            }
            else if (indicatorIndex == 17)
            {
                if (SB1MathResult17.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult17);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult17, 1);
                }
            }
            else if (indicatorIndex == 18)
            {
                if (SB1MathResult18.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult18);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult18, 1);
                }
            }
            else if (indicatorIndex == 19)
            {
                if (SB1MathResult19.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult19);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult19, 1);
                }
            }
            else if (indicatorIndex == 20)
            {
                if (SB1MathResult20.ToLower().StartsWith("http"))
                {
                    lines = GetDataLines(SB1MathResult20);
                }
                else
                {
                    //get the csv lines out of mathresult and skip the first line
                    lines = CalculatorHelpers.GetLinesandSkip(SB1MathResult20, 1);
                }
            }
            return lines;
        }
        public string SetTotalMathTypeStock(int indicatorIndex, IndicatorQT1 qt1)
        {
            string sAlgo = string.Empty;
            if (indicatorIndex == 0)
            {
                this.SetTotalScore(_colNames);
                sAlgo = _score;
            }
            else if (indicatorIndex == 1)
            {
                SetTotalMathTypeStock1();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 2)
            {
                SetTotalMathTypeStock2();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 3)
            {
                SetTotalMathTypeStock3();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 4)
            {
                SetTotalMathTypeStock4();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 5)
            {
                SetTotalMathTypeStock5();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 6)
            {
                SetTotalMathTypeStock6();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 7)
            {
                SetTotalMathTypeStock7();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 8)
            {
                SetTotalMathTypeStock8();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 9)
            {
                SetTotalMathTypeStock9();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 10)
            {
                SetTotalMathTypeStock10();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 11)
            {
                SetTotalMathTypeStock11();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 12)
            {
                SetTotalMathTypeStock12();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 13)
            {
                SetTotalMathTypeStock13();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 14)
            {
                SetTotalMathTypeStock14();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 15)
            {
                SetTotalMathTypeStock15();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 16)
            {
                SetTotalMathTypeStock16();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 17)
            {
                SetTotalMathTypeStock17();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 18)
            {
                SetTotalMathTypeStock18();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 19)
            {
                SetTotalMathTypeStock19();
                sAlgo = qt1.Label;
            }
            else if (indicatorIndex == 20)
            {
                SetTotalMathTypeStock20();
                sAlgo = qt1.Label;
            }
            return sAlgo;
        }
        public void SetTotalMathTypeStock1()
        {
            this.SB1TAmount1 = this.GetTotalFromMathExpression(1, _colNames, this.SB1MathExpression1, new List<double>(xcols - 5));
            this.SB1TMAmount1 = this.SB1TAmount1;
            if (!string.IsNullOrEmpty(this.ErrorMessage))
            {
                //deprecated: error msg already refers to correct ind
                //this.SB1MathResult1 += this.ErrorMessage;
                //this.ErrorMessage = string.Empty;
            }
        }
        
        public void SetTotalMathTypeStock2()
        {
            this.SB1TAmount2 = this.GetTotalFromMathExpression(2, _colNames, this.SB1MathExpression2, new List<double>(xcols - 5));
            this.SB1TMAmount2 = this.SB1TAmount2;
        }
        public void SetTotalMathTypeStock3()
        {
            this.SB1TAmount3 = this.GetTotalFromMathExpression(3, _colNames, this.SB1MathExpression3, new List<double>(xcols - 5));
            this.SB1TMAmount3 = this.SB1TAmount3;
        }
        public void SetTotalMathTypeStock4()
        {
            this.SB1TAmount4 = this.GetTotalFromMathExpression(4, _colNames, this.SB1MathExpression4, new List<double>(xcols - 5));
            this.SB1TMAmount4 = this.SB1TAmount4;
        }
        public void SetTotalMathTypeStock5()
        {
            this.SB1TAmount5 = this.GetTotalFromMathExpression(5, _colNames, this.SB1MathExpression5, new List<double>(xcols - 5));
            this.SB1TMAmount5 = this.SB1TAmount5;
        }
        public void SetTotalMathTypeStock6()
        {
            this.SB1TAmount6 = this.GetTotalFromMathExpression(6, _colNames, this.SB1MathExpression6, new List<double>(xcols - 5));
            this.SB1TMAmount6 = this.SB1TAmount6;
        }
        public void SetTotalMathTypeStock7()
        {
            this.SB1TAmount7 = this.GetTotalFromMathExpression(7, _colNames, this.SB1MathExpression7, new List<double>(xcols - 5));
            this.SB1TMAmount7 = this.SB1TAmount7;
        }
        public void SetTotalMathTypeStock8()
        {
            this.SB1TAmount8 = this.GetTotalFromMathExpression(8, _colNames, this.SB1MathExpression8, new List<double>(xcols - 5));
            this.SB1TMAmount8 = this.SB1TAmount8;
        }
        public void SetTotalMathTypeStock9()
        {
            this.SB1TAmount9 = this.GetTotalFromMathExpression(9, _colNames, this.SB1MathExpression9, new List<double>(xcols - 5));
            this.SB1TMAmount9 = this.SB1TAmount9;
        }
        public void SetTotalMathTypeStock10()
        {
            this.SB1TAmount10 = this.GetTotalFromMathExpression(10, _colNames, this.SB1MathExpression10, new List<double>(xcols - 5));
            this.SB1TMAmount10 = this.SB1TAmount10;
        }
        public void SetTotalMathTypeStock11()
        {
            this.SB1TAmount11 = this.GetTotalFromMathExpression(11, _colNames, this.SB1MathExpression11, new List<double>(xcols - 5));
            this.SB1TMAmount11 = this.SB1TAmount11;
        }
        public void SetTotalMathTypeStock12()
        {
            this.SB1TAmount12 = this.GetTotalFromMathExpression(12, _colNames, this.SB1MathExpression12, new List<double>(xcols - 5));
            this.SB1TMAmount12 = this.SB1TAmount12;
        }
        public void SetTotalMathTypeStock13()
        {
            this.SB1TAmount13 = this.GetTotalFromMathExpression(13, _colNames, this.SB1MathExpression13, new List<double>(xcols - 5));
            this.SB1TMAmount13 = this.SB1TAmount13;
        }
        public void SetTotalMathTypeStock14()
        {
            this.SB1TAmount14 = this.GetTotalFromMathExpression(14, _colNames, this.SB1MathExpression14, new List<double>(xcols - 5));
            this.SB1TMAmount14 = this.SB1TAmount14;
        }
        public void SetTotalMathTypeStock15()
        {
            this.SB1TAmount15 = this.GetTotalFromMathExpression(15, _colNames, this.SB1MathExpression15, new List<double>(xcols - 5));
            this.SB1TMAmount15 = this.SB1TAmount15;
        }
        public void SetTotalMathTypeStock16()
        {
            this.SB1TAmount16 = this.GetTotalFromMathExpression(16, _colNames, this.SB1MathExpression16, new List<double>(xcols - 5));
            this.SB1TMAmount16 = this.SB1TAmount16;
        }
        public void SetTotalMathTypeStock17()
        {
            this.SB1TAmount17 = this.GetTotalFromMathExpression(17, _colNames, this.SB1MathExpression17, new List<double>(xcols - 5));
            this.SB1TMAmount17 = this.SB1TAmount17;
        }
        public void SetTotalMathTypeStock18()
        {
            this.SB1TAmount18 = this.GetTotalFromMathExpression(18, _colNames, this.SB1MathExpression18, new List<double>(xcols - 5));
            this.SB1TMAmount18 = this.SB1TAmount18;
        }
        public void SetTotalMathTypeStock19()
        {
            this.SB1TAmount19 = this.GetTotalFromMathExpression(19, _colNames, this.SB1MathExpression19, new List<double>(xcols - 5));
            this.SB1TMAmount19 = this.SB1TAmount19;
        }
        public void SetTotalMathTypeStock20()
        {
            this.SB1TAmount20 = this.GetTotalFromMathExpression(20, _colNames, this.SB1MathExpression20, new List<double>(xcols - 5));
            this.SB1TMAmount20 = this.SB1TAmount20;
        }
        
        public IDictionary<string, List<List<double>>> GetDataSet(List<string> lines)
        {
            //standard format is:
            //colNames = Indicator Label, Col1, Col2, QT Amount, Q1 Amount,	Q2 Amount, Q3 Amount, Q4 Amount, Q5 Amount, up to 11 numeric cols
            //matrix of doubles
            IDictionary<string, List<List<double>>> dataSets = new Dictionary<string, List<List<double>>>();
            string rowName = string.Empty;
            string sKey = string.Empty;
            List<string> cKeysUsed = new List<string>();
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //188
                            this.DataColNames = row;
                            //set the full colnames for the dataset
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                this.SB1ScoreMathResult += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                return null;
                            }
                        }
                        else
                        {
                            _rowNames = new string[lines.Count() - 1];
                            //the indicator label is key
                            sKey = cols[0];
                            if (!string.IsNullOrEmpty(sKey))
                            {
                                if (!cKeysUsed.Contains(sKey))
                                {
                                    cKeysUsed.Add(sKey);
                                    List<string> cLines = lines
                                        .Where(l => l.StartsWith(sKey, true, CultureInfo.InvariantCulture))
                                        .Select(l => l.ToString()).ToList();
                                    if (cLines.Count > 0)
                                    {
                                        //rowNames can be retrieved from second col in cLines

                                        //generate an enumerable collection of doubles
                                        IEnumerable<IEnumerable<double>> qryQs =
                                            from line in cLines
                                            let elements = line.Split(Constants.CSV_DELIMITERS)
                                            //skip label, customcol1 and customcol2 columns
                                            let amounts = elements.Skip(3)
                                            select (from a in amounts
                                                    select CalculatorHelpers.ConvertStringToDouble(a));
                                        //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                        var qs = qryQs.ToList();
                                        if (qs.Count > 0)
                                        {
                                            List<List<double>> dataSet = new List<List<double>>();
                                            //set qx
                                            foreach (var qvector in qs)
                                            {
                                                //ok for algos that don't need to calculate qT from q1 to q10 vars
                                                dataSet.Add(qvector.ToList());
                                                //otherwise should use GetDataSetwithQT(), not this function
                                            }
                                            dataSets.Add(sKey, dataSet);
                                        }
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                                    }
                                }
                            }
                            else
                            {
                                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                        i++;
                    }
                    else
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
            }
            return dataSets;
        }
        public IDictionary<string, List<List<double>>> GetDataSetFull(List<string> lines)
        {
            //standard format is:
            //colNames = Indicator Label, Col1, Col2, QT Amount, Q1 Amount,	Q2 Amount, Q3 Amount, Q4 Amount, Q5 Amount, up to 11 numeric cols
            //matrix of doubles
            IDictionary<string, List<List<double>>> dataSets = new Dictionary<string, List<List<double>>>();
            string rowName = string.Empty;
            string sKey = string.Empty;
            List<string> cKeysUsed = new List<string>();
            //second iteration fills dataset with complete doubles and exits loop
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //188
                            this.DataColNames = row;
                            //set the full colnames for the dataset
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                this.SB1ScoreMathResult += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                return null;
                            }
                        }
                        else
                        {
                            _rowNames = new string[lines.Count() - 1];
                            //the indicator label is key
                            sKey = cols[0];
                            if (!string.IsNullOrEmpty(sKey))
                            {
                                if (!cKeysUsed.Contains(sKey))
                                {
                                    cKeysUsed.Add(sKey);
                                    //select all but the first row (the header row)
                                    List<string> cLines = lines
                                        .Skip(1)
                                        .Select(l => l.ToString()).ToList();
                                    if (cLines.Count > 0)
                                    {
                                        //rowNames can be retrieved from second col in cLines

                                        //generate an enumerable collection of doubles
                                        IEnumerable<IEnumerable<double>> qryQs =
                                            from line in cLines
                                            let elements = line.Split(Constants.CSV_DELIMITERS)
                                            //skip label, customcol1 and customcol2 columns
                                            let amounts = elements.Skip(3)
                                            select (from a in amounts
                                                    select CalculatorHelpers.ConvertStringToDouble(a));
                                        //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                        var qs = qryQs.ToList();
                                        if (qs.Count > 0)
                                        {
                                            List<List<double>> dataSet = new List<List<double>>();
                                            //set qx
                                            foreach (var qvector in qs)
                                            {
                                                //ok for algos that don't need to calculate qT from q1 to q10 vars
                                                dataSet.Add(qvector.ToList());
                                            }
                                            dataSets.Add(sKey, dataSet);
                                            //no need for any more iterations, just exist with all rows
                                            return dataSets;
                                        }
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                                    }
                                }
                            }
                            else
                            {
                                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                        i++;
                    }
                    else
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
            }
            return dataSets;
        }
        //214 convention stores data for each indicator in Indicator.URL
        public IDictionary<string, List<List<double>>> GetDataSetRandPy(string label, List<string> lines)
        {
            //matrix of doubles
            IDictionary<string, List<List<double>>> dataSets = new Dictionary<string, List<List<double>>>();
            string rowName = string.Empty;
            //second iteration fills dataset with complete doubles and exits loop
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //188
                            DataColNames = row;
                            //set the full colnames for the dataset
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                return null;
                            }
                        }
                        else
                        {
                            _rowNames = new string[lines.Count() - 1];
                            //the indicator index
                            //select all but the first row (the header row)
                            List<string> cLines = lines
                                .Skip(1)
                                .Select(l => l.ToString()).ToList();
                            if (cLines.Count > 0)
                            {
                                //rowNames can be retrieved from second col in cLines
                                //generate an enumerable collection of doubles
                                IEnumerable<IEnumerable<double>> qryQs =
                                    from line in cLines
                                    let elements = line.Split(Constants.CSV_DELIMITERS)
                                    //skip label, customcol1 and customcol2 columns
                                    let amounts = elements.Skip(3)
                                    select (from a in amounts
                                            select CalculatorHelpers.ConvertStringToDouble(a));
                                //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                var qs = qryQs.ToList();
                                if (qs.Count > 0)
                                {
                                    List<List<double>> dataSet = new List<List<double>>();
                                    //set qx
                                    foreach (var qvector in qs)
                                    {
                                        //ok for algos that don't need to calculate qT from q1 to q10 vars
                                        dataSet.Add(qvector.ToList());
                                    }
                                    dataSets.Add(label, dataSet);
                                    //no need for any more iterations, just exist with all rows
                                    return dataSets;
                                }
                            }
                            else
                            {
                                CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                        i++;
                    }
                    else
                    {
                        CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
            }
            return dataSets;
        }
        //214 convention stores data for machine learning data
        public async Task<List<List<string>>> GetDataSetML(List<string> lines)
        {
            //matrix of string
            List<List<string>> dataSet = new List<List<string>>();
            string rowName = string.Empty;
            //second iteration fills dataset with complete doubles and exits loop
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //188
                            DataColNames = row;
                            //set the full colnames for the dataset
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                return null;
                            }
                        }
                        else
                        {
                            _rowNames = new string[lines.Count() - 1];
                            //rowNames can be retrieved from second col in cLines
                            //generate an enumerable collection of strings
                            IEnumerable<IEnumerable<string>> qryQs =
                                from line in lines
                                let elements = line.Split(Constants.CSV_DELIMITERS)
                                    //skip label, customcol1 and customcol2 columns
                                    let amounts = elements.Skip(3)
                                select (from a in amounts
                                        select a);
                            //execute the qry and get a list; qry is a List<IEnumerable<double>>
                            var qs = await qryQs.ToAsyncEnumerable().ToList();
                            if (qs.Count > 0)
                            {
                                //set qx
                                int j = 0;
                                foreach (var qvector in qs)
                                {
                                    //skip 1st row
                                    if (j > 0)
                                    {
                                        //ok for algos that don't need to calculate qT from q1 to q10 vars
                                        dataSet.Add(qvector.ToList());
                                    }
                                    j++;
                                }
                                //no need for any more iterations, just exist with all rows
                                return dataSet;
                            }
                        }
                        i++;
                    }
                    else
                    {
                        CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
            }
            return dataSet;
        }
        public IDictionary<string, List<List<string>>> GetDataSetFull2(List<string> lines)
        {
            //groups data for running datasets concurrently
            //standard format is:
            //colNames = Indicator Label, Col1, Col2, QT Amount, Q1 Amount,	Q2 Amount, Q3 Amount, Q4 Amount, Q5 Amount, up to 11 numeric cols
            //matrix of doubles
            IDictionary<string, List<List<string>>> dataSets = new Dictionary<string, List<List<string>>>();
            string rowName = string.Empty;
            string sKey = string.Empty;
            List<string> cKeysUsed = new List<string>();
            //second iteration fills dataset with complete doubles and exits loop
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //190
                            this.DataColNames = row;
                            //set the full colnames for the dataset
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                this.SB1ScoreMathResult += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                return null;
                            }
                        }
                        else
                        {
                            _rowNames = new string[lines.Count() - 1];
                            //the indicator label is key
                            sKey = cols[0];
                            if (!string.IsNullOrEmpty(sKey))
                            {
                                if (!cKeysUsed.Contains(sKey))
                                {
                                    cKeysUsed.Add(sKey);
                                    //select all but the first row (the header row)
                                    List<string> cLines = lines
                                        .Skip(1)
                                        .Select(l => l.ToString()).ToList();
                                    if (cLines.Count > 0)
                                    {
                                        //rowNames can be retrieved from second col in cLines

                                        //generate an enumerable collection of strings
                                        IEnumerable<IEnumerable<string>> qryQs =
                                            from line in cLines
                                            let elements = line.Split(Constants.CSV_DELIMITERS)
                                            //skip label, customcol1 and customcol2 columns
                                            let amounts = elements.Skip(3)
                                            select (from a in amounts
                                                    select a);
                                        //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                        var qs = qryQs.ToList();
                                        if (qs.Count > 0)
                                        {
                                            List<List<string>> dataSet = new List<List<string>>();
                                            //set qx
                                            foreach (var qvector in qs)
                                            {
                                                dataSet.Add(qvector.ToList());
                                            }
                                            dataSets.Add(sKey, dataSet);
                                            //no need for any more iterations, just exist with all rows
                                            return dataSets;
                                        }
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                                    }
                                }
                            }
                            else
                            {
                                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                        i++;
                    }
                    else
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
            }
            return dataSets;
        }
        public IDictionary<string, List<List<string>>> GetDataSetFull3(List<string> lines)
        {
            //groups data for running datasets concurrently
            //standard format is:
            //colNames = Indicator Label, Col1, Col2, QT Amount, Q1 Amount,	Q2 Amount, Q3 Amount, Q4 Amount, Q5 Amount, up to 11 numeric cols
            //matrix of doubles
            IDictionary<string, List<List<string>>> dataSets = new Dictionary<string, List<List<string>>>();
            string rowName = string.Empty;
            string sKey = string.Empty;
            List<string> cKeysUsed = new List<string>();
            //second iteration fills dataset with complete doubles and exits loop
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //190
                            this.DataColNames = row;
                            //set the full colnames for the dataset
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                this.SB1ScoreMathResult += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                return null;
                            }
                        }
                        else
                        {
                            _rowNames = new string[lines.Count() - 1];
                            //the location column is the grouping variable (zip codes)
                            sKey = cols[2];
                            if (!string.IsNullOrEmpty(sKey))
                            {
                                if (!cKeysUsed.Contains(sKey))
                                {
                                    cKeysUsed.Add(sKey);
                                    //select all but the first row (the header row)
                                    List<string> cLines = lines
                                        .Skip(1)
                                        .Where(l => l.Equals(sKey))
                                        .Select(l => l.ToString()).ToList();
                                    if (cLines.Count > 0)
                                    {
                                        //rowNames can be retrieved from second col in cLines

                                        //generate an enumerable collection of doubles
                                        IEnumerable<IEnumerable<string>> qryQs =
                                            from line in cLines
                                            let elements = line.Split(Constants.CSV_DELIMITERS)
                                            //skip label, customcol1 and customcol2 columns
                                            let amounts = elements.Skip(3)
                                            select (from a in amounts
                                                    select a);
                                        //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                        var qs = qryQs.ToList();
                                        if (qs.Count > 0)
                                        {
                                            List<List<string>> dataSet = new List<List<string>>();
                                            //set qx
                                            foreach (var qvector in qs)
                                            {
                                                dataSet.Add(qvector.ToList());
                                            }
                                            dataSets.Add(sKey, dataSet);
                                            //no need for any more iterations, just exist with all rows
                                            return dataSets;
                                        }
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                                    }
                                }
                            }
                            else
                            {
                                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                        i++;
                    }
                    else
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
            }
            return dataSets;
        }
        public IDictionary<string, List<List<string>>> GetColumnSet(List<string> lines)
        {
            //matrix of strings
            IDictionary<string, List<List<string>>> colSets = new Dictionary<string, List<List<string>>>();
            string rowName = string.Empty;
            string sKey = string.Empty;
            List<string> cKeysUsed = new List<string>();
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //skip it
                        }
                        else
                        {
                            //the indicator label is key
                            sKey = cols[0];
                            if (!string.IsNullOrEmpty(sKey))
                            {
                                if (!cKeysUsed.Contains(sKey))
                                {
                                    cKeysUsed.Add(sKey);
                                    List<string> cLines = lines
                                        .Where(l => l.StartsWith(sKey, true, CultureInfo.InvariantCulture))
                                        .Select(l => l.ToString()).ToList();
                                    if (cLines.Count > 0)
                                    {
                                        //generate an enumerable collection of strings
                                        IEnumerable<IEnumerable<string>> qryQs =
                                            from line in cLines
                                            let elements = line.Split(Constants.CSV_DELIMITERS)
                                            //take label, customcol1 and customcol2 columns
                                            let amounts = elements.Take(3)
                                            select (from a in amounts
                                                    select a);
                                        //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                        var qs = qryQs.ToList();
                                        if (qs.Count > 0)
                                        {
                                            List<List<string>> colSet = new List<List<string>>();
                                            //set qx
                                            foreach (var qvector in qs)
                                            {
                                                //ok for algos that don't need to calculate qT from q1 to q10 vars
                                                colSet.Add(qvector.ToList());
                                            }
                                            colSets.Add(sKey, colSet);
                                        }
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                                    }
                                }
                            }
                            else
                            {
                                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                        
                    }
                    else
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
                i++;
            }
            return colSets;
        }
        public async Task<IDictionary<string, List<List<string>>>> GetColumnSetFull(List<string> lines)
        {
            //matrix of strings
            IDictionary<string, List<List<string>>> colSets = new Dictionary<string, List<List<string>>>();
            string rowName = string.Empty;
            string sKey = string.Empty;
            List<string> cKeysUsed = new List<string>();
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //skip it
                        }
                        else
                        {
                            //the indicator label is key
                            sKey = cols[0];
                            if (!string.IsNullOrEmpty(sKey))
                            {
                                if (!cKeysUsed.Contains(sKey))
                                {
                                    cKeysUsed.Add(sKey);
                                    List<string> cLines = lines
                                        .Skip(1)
                                        .Select(l => l.ToString()).ToList();
                                    if (cLines.Count > 0)
                                    {
                                        //generate an enumerable collection of strings
                                        IEnumerable<IEnumerable<string>> qryQs =
                                            from line in cLines
                                            let elements = line.Split(Constants.CSV_DELIMITERS)
                                            //take label, customcol1 and customcol2 columns
                                            let amounts = elements.Take(3)
                                            select (from a in amounts
                                                    select a);
                                        //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                        var qs = await qryQs.ToAsyncEnumerable().ToList();
                                        //var qs = qryQs.ToList();
                                        if (qs.Count > 0)
                                        {
                                            List<List<string>> colSet = new List<List<string>>();
                                            //set qx
                                            foreach (var qvector in qs)
                                            {
                                                //ok for algos that don't need to calculate qT from q1 to q10 vars
                                                colSet.Add(qvector.ToList());
                                            }
                                            colSets.Add(sKey, colSet);
                                            //finished so return
                                            return colSets;
                                        }
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                                    }
                                }
                            }
                            else
                            {
                                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                    }
                    else
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
                i++;
            }
            return colSets;
        }
        
        public async Task<bool> SetColumnNames(string dataURL)
        {
            bool bHasColNames = false;
            //214 added optional rowIndex
            int iRowIndex = 0;
            List<string> lines = await GetDataLinesAsync(dataURL, iRowIndex);
            if (lines != null)
            {
                if (lines.Count > 0)
                {
                    string sColumnNames = lines[0];
                    if (!string.IsNullOrEmpty(sColumnNames))
                    {
                        string[] cols = sColumnNames.Split(Constants.CSV_DELIMITERS);
                        if (cols.Length > 0)
                        {
                            //188
                            this.DataColNames = sColumnNames;
                            //set the full colnames for the dataset
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                this.SB1ScoreMathResult += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                bHasColNames = false;
                            }
                            else
                            {
                                bHasColNames = true;
                            }
                        }
                    }
                }
            }
            return bHasColNames;
        }
        
        private string GetIndicatorLabel(string[] cols)
        {
            string sIndLabel = string.Empty;
            if (cols.Count() > 0)
            {
                //must have at least 1 dep col and 1 ind col 
                //the dep column is not included in Math Expressions
                sIndLabel = GetIndicatorLabel(cols, cols[0]);
            }
            return sIndLabel;
        }
        private string GetIndicatorLabel(string[] cols, string col)
        {
            string sIndLabel = string.Empty;

            if (sIndLabel == string.Empty)
            {
                //i == 0 is the dep column and not included in MathExpressions
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression1.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label1;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression2.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label2;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression3.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label3;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression4.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label4;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression5.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label5;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression6.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label6;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression7.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label7;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression8.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label8;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression9.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label9;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression10.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label10;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression11.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label11;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression12.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label12;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression13.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label13;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression14.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label14;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression15.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label15;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression16.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label16;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression17.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label17;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression18.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label18;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression19.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label19;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            if (sIndLabel == string.Empty)
            {
                for (int i = 1; i < cols.Count(); i++)
                {
                    if (this.SB1MathExpression20.ToLower().Contains(cols[i].ToLower()))
                    {
                        sIndLabel = this.SB1Label20;
                    }
                    else
                    {
                        sIndLabel = string.Empty;
                        break;
                    }
                }
            }
            return sIndLabel;
        }
        public IDictionary<string, List<List<string>>> GetDataSet2(List<string> lines)
        {
            //standard format is:
            //colNames = Indicator Label, Col1, Col2, QT Amount, Q1 Amount,	Q2 Amount, Q3 Amount, Q4 Amount, Q5 Amount, up to 11 numeric cols
            //matrix of doubles
            IDictionary<string, List<List<string>>> dataSets = new Dictionary<string, List<List<string>>>();
            string rowName = string.Empty;
            string sKey = string.Empty;
            List<string> cKeysUsed = new List<string>();
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //188
                            this.DataColNames = row;
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                this.SB1ScoreMathResult += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                return null;
                            }
                        }
                        else
                        {
                            _rowNames = new string[lines.Count() - 1];
                            //the indicator label is key
                            sKey = cols[0];
                            if (!string.IsNullOrEmpty(sKey))
                            {
                                if (!cKeysUsed.Contains(sKey))
                                {
                                    cKeysUsed.Add(sKey);
                                    List<string> cLines = lines
                                        .Where(l => l.StartsWith(sKey, true, CultureInfo.InvariantCulture))
                                        .Select(l => l.ToString()).ToList();
                                    if (cLines.Count > 0)
                                    {
                                        //generate an enumerable collection of strings
                                        IEnumerable<IEnumerable<string>> qryQs =
                                            from line in cLines
                                            let elements = line.Split(Constants.CSV_DELIMITERS)
                                            //skip label, customcol1 and customcol2 columns
                                            let amounts = elements.Skip(3)
                                            select (from a in amounts select a);
                                        //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                        var qs = qryQs.ToList();
                                        if (qs.Count > 0)
                                        {
                                            List<List<string>> dataSet = new List<List<string>>();
                                            //set qx
                                            foreach (var qvector in qs)
                                            {
                                                //ok for algos that don't need to calculate qT from q1 to q10 vars
                                                if (HasMathType(IndicatorIndex, MATH_TYPES.algorithm2)
                                                    || HasMathType(IndicatorIndex, MATH_TYPES.algorithm3)
                                                    || HasMathType(IndicatorIndex, MATH_TYPES.algorithm4))
                                                {
                                                    dataSet.Add(qvector.ToList());
                                                }
                                            }
                                            dataSets.Add(sKey, dataSet);
                                        }
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                                    }
                                }
                            }
                            else
                            {
                                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                        i++;
                    }
                    else
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
            }
            return dataSets;
        }
        private async Task<IDictionary<string, List<List<double>>>> GetDataSet1(string dataURL)
        {
            //ok to return data with 0 members
            IDictionary<string, List<List<double>>> data = new Dictionary<string, List<List<double>>>();
            if (!string.IsNullOrEmpty(dataURL)
                && dataURL != Constants.NONE)
            {
                List<string> dlines = new List<string>();
                //210: async used
                dlines = await GetDataLinesAsync(dataURL);
                if (dlines != null)
                {
                    //reset the data
                    data = new Dictionary<string, List<List<double>>>();
                    //it's ok for subsequent datasets to overwrite previous results (by design)
                    data = GetDataSetwithQT(dlines);
                    //if null already has an error message
                    if (data != null)
                    {
                        //int i = 0;
                        foreach (var ds in data)
                        {
                            //this will handle algo2, 3, and 4 when they have data in a dataurl
                            //start with the descriptive stats for each column
                            string sAlgo = await SetIndicatorData(ds.Key, ds.Value);
                            //joint data w dataurl means joint calcs must be run
                            if (string.IsNullOrEmpty(this.SB1JointDataURL)
                                || (this.SB1JointDataURL == Constants.NONE))
                            {
                                bool bHasSet = await SetSeparateRanges(ds.Key);
                            }
                        }
                    }
                }
                else
                {
                    data = new Dictionary<string, List<List<double>>>();
                }
            }
            return data;
        }
        public IDictionary<string, List<List<double>>> GetDataSetwithQT(List<string> lines)
        {
            //standard format is:
            //colNames = Indicator Label, Col1, Col2, QT Amount, Q1 Amount,	Q2 Amount, Q3 Amount, Q4 Amount, Q5 Amount, up to 11 numeric cols
            //matrix of doubles
            IDictionary<string, List<List<double>>> dataSets = new Dictionary<string, List<List<double>>>();
            string rowName = string.Empty;
            string sKey = string.Empty;
            List<string> cKeysUsed = new List<string>();
            int i = 0;
            foreach (var row in lines)
            {
                if (row.Length > 0)
                {
                    string[] cols = row.Split(Constants.CSV_DELIMITERS);
                    if (cols.Length > 0)
                    {
                        //first row is column names
                        if (i == 0)
                        {
                            //188
                            this.DataColNames = row;
                            //set the full colnames for the dataset
                            _colNames = new string[cols.Count()];
                            cols.CopyTo(_colNames, 0);
                            if (_colNames.Count() == 0)
                            {
                                this.SB1ScoreMathResult += string.Concat(" ", Errors.MakeStandardErrorMsg("DATA_NOCOLUMNNAMES"));
                                return null;
                            }
                        }
                        else
                        {
                            _rowNames = new string[lines.Count() - 1];
                            //the indicator label is key
                            sKey = cols[0];
                            if (!string.IsNullOrEmpty(sKey))
                            {
                                if (!cKeysUsed.Contains(sKey))
                                {
                                    cKeysUsed.Add(sKey);
                                    List<string> cLines = lines
                                        .Where(l => l.StartsWith(sKey, true, CultureInfo.InvariantCulture))
                                        .Select(l => l.ToString()).ToList();
                                    if (cLines.Count > 0)
                                    {
                                        //generate an enumerable collection of doubles
                                        IEnumerable<IEnumerable<double>> qryQs =
                                            from line in cLines
                                            let elements = line.Split(Constants.CSV_DELIMITERS)
                                            //skip label, customcol1 and customcol2 columns
                                            let amounts = elements.Skip(3)
                                            select (from a in amounts
                                                    select CalculatorHelpers.ConvertStringToDouble(a));
                                        //execute the qry and get a list; qry is a List<IEnumerable<double>>
                                        var qs = qryQs.ToList();
                                        if (qs.Count > 0)
                                        {
                                            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
                                            //mathterms define which qamount to send to algorith for predicting a given set of qxs
                                            List<string> mathTerms = new List<string>();
                                            //dependent var colNames found in MathExpression
                                            List<string> depColNames = new List<string>();
                                            if (sKey == this.SB1Label1
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression1))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression1, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label2
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression2))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression2, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label3
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression3))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression3, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label4
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression4))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression4, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label5
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression5))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression5, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label6
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression6))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression6, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label7
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression7))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression7, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label8
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression8))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression8, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label9
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression9))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression9, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label10
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression10))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression10, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label11
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression11))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression11, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label12
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression12))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression12, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label13
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression13))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression13, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label14
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression14))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression14, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label15
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression15))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression15, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label16
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression16))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression16, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label17
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression17))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression17, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label18
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression18))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression18, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label19
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression19))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression19, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else if (sKey == this.SB1Label20
                                                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression20))
                                            {
                                                //temporary object to run calcs
                                                algos.GetDataToAnalyzeColNames(sKey, this.SB1MathExpression20, _colNames, ref depColNames, ref mathTerms);
                                            }
                                            else
                                            {
                                                //ignore the row
                                            }
                                            //has to also calc qT for each row
                                            List<List<double>> dataSet = FillDataSet(sKey, qs, depColNames, mathTerms);
                                            dataSets.Add(sKey, dataSet);
                                        }
                                    }
                                    else
                                    {
                                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                                    }
                                }
                            }
                            else
                            {
                                this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                            }
                        }
                        i++;
                    }
                    else
                    {
                        this.CalculatorDescription += string.Concat(" ", Errors.MakeStandardErrorMsg("DATAURL_BADDATA"));
                    }
                }
            }
            return dataSets;
        }

        private List<List<double>> FillDataSet(string key, List<IEnumerable<double>> qs, List<string> depColNames, List<string> mathTerms)
        {
            //new dataset holding qs
            List<List<double>> dataSet = new List<List<double>>();
            double qT = 0;
            double q1 = 0;
            double q2 = 0;
            double q3 = 0;
            double q4 = 0;
            double q5 = 0;
            double q6 = 0;
            double q7 = 0;
            double q8 = 0;
            double q9 = 0;
            double q10 = 0;
            //double q11 = 0;
            //number of columns from first row
            int columnCount = qs[0].Count();
            //set qx
            foreach (var indicator in qs)
            {
                //qT is first because regression uses it as dependent variable
                qT = 0;
                q1 = 0;
                q2 = 0;
                q3 = 0;
                q4 = 0;
                q6 = 0;
                q5 = 0;
                q7 = 0;
                q8 = 0;
                q9 = 0;
                q10 = 0;
                List<double> qCalcs = new List<double>(xcols - 5);
                for (int column = 0; column < columnCount; column++)
                {
                    if (column == 0)
                    {
                        qT = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                    }
                    else if (column == 1)
                    {
                        q1 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q1);
                    }
                    else if (column == 2)
                    {
                        q2 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q2);
                    }
                    else if (column == 3)
                    {
                        q3 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q3);
                    }
                    else if (column == 4)
                    {
                        q4 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q4);
                    }
                    else if (column == 5)
                    {
                        q5 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q5);
                    }
                    else if (column == 6)
                    {
                        q6 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q6);
                    }
                    else if (column == 7)
                    {
                        q7 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q7);
                    }
                    else if (column == 8)
                    {
                        q8 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q8);
                    }
                    else if (column == 9)
                    {
                        q9 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q9);
                    }
                    else if (column == 10)
                    {
                        q10 = CalculatorHelpers.ConvertStringToDouble(indicator.ElementAt(column).ToString());
                        qCalcs.Add(q10);
                    }
                }
                //don't set QT for alg 6: regression must store an actual QT in the dataset
                //other algos have different rules
                if (!HasMathType(IndicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm5)
                    && !HasMathType(IndicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm6)
                    && !HasMathType(IndicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm7)
                    && !HasMathType(IndicatorIndex, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm8)
                    && !HasMathType(IndicatorIndex, MATH_TYPES.algorithm2)
                    && !HasMathType(IndicatorIndex, MATH_TYPES.algorithm3)
                    && !HasMathType(IndicatorIndex, MATH_TYPES.algorithm4))
                {
                    qT = GetQT(key, qT, qCalcs, depColNames, mathTerms);
                }
                var newIndicator = new List<double>(xcols - 5);
                //keep the order
                //rpackage requires a na when data is missing-here just use colnames to find right cols
                newIndicator.Add(qT);
                //most algos base their matrix on actual data
                //don't allow unnecessary cols in data
                if (columnCount >= 2)
                {
                    newIndicator.Add(q1);
                }
                if (columnCount >= 3)
                {
                    newIndicator.Add(q2);
                }
                if (columnCount >= 4)
                {
                    newIndicator.Add(q3);
                }
                if (columnCount >= 5)
                {
                    newIndicator.Add(q4);
                }
                if (columnCount >= 6)
                {
                    newIndicator.Add(q5);
                }
                if (columnCount >= 7)
                {
                    newIndicator.Add(q6);
                }
                if (columnCount >= 8)
                {
                    newIndicator.Add(q7);
                }
                if (columnCount >= 9)
                {
                    newIndicator.Add(q8);
                }
                if (columnCount >= 10)
                {
                    newIndicator.Add(q9);
                }
                if (columnCount >= 11)
                {
                    newIndicator.Add(q10);
                }
                dataSet.Add(newIndicator);
            }
            return dataSet;
        }
        private double GetQT(string label, double qT, List<double> qCalcs, List<string> depColNames, List<string> mathTerms)
        {
            double qTCalc = 0;
            List<double> morevars = new List<double>(xcols - 5);
            //need a temporary object to calc QT -calc comes from properties of object
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            ////mathterms define which qamount to send to algorith for predicting a given set of qxs
            if (label == algos.SB1Label1
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression1))
            {
                //188 allows dep var from dataURLs to be included in math express -more flexible (i.e. anova can't use dummy vars but still wants desc stats for treatments ...)
                algos.SB1TAmount1 = qT;
                //set the calcs for mathexpression
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                //use the temp qs to set qT (must use standard math express format)
                qTCalc = algos.GetTotalFromMathExpression(1, _colNames, algos.SB1MathExpression1, morevars);
            }
            else if (label == algos.SB1Label2
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression2))
            {
                algos.SB1TAmount2 = qT;
                //set the calcs for mathexpression
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(2, _colNames, algos.SB1MathExpression2, morevars);
            }
            else if (label == algos.SB1Label3
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression3))
            {
                algos.SB1TAmount3 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(3, _colNames, algos.SB1MathExpression3, morevars);
            }
            else if (label == algos.SB1Label4
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression4))
            {
                algos.SB1TAmount4 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(4, _colNames, algos.SB1MathExpression4, morevars);
            }
            else if (label == algos.SB1Label5
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression5))
            {
                algos.SB1TAmount5 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(5, _colNames, algos.SB1MathExpression5, morevars);
            }
            else if (label == algos.SB1Label6
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression6))
            {
                algos.SB1TAmount6 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(6, _colNames, algos.SB1MathExpression6, morevars);
            }
            else if (label == algos.SB1Label7
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression7))
            {
                algos.SB1TAmount7 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(7, _colNames, algos.SB1MathExpression7, morevars);
            }
            else if (label == algos.SB1Label8
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression8))
            {
                algos.SB1TAmount8 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(8, _colNames, algos.SB1MathExpression8, morevars);
            }
            else if (label == algos.SB1Label9
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression9))
            {
                algos.SB1TAmount9 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(9, _colNames, algos.SB1MathExpression9, morevars);
            }
            else if (label == algos.SB1Label10
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression10))
            {
                algos.SB1TAmount10 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(10, _colNames, algos.SB1MathExpression10, morevars);
            }
            else if (label == algos.SB1Label11
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression11))
            {
                algos.SB1TAmount11 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(11, _colNames, algos.SB1MathExpression11, morevars);
            }
            else if (label == algos.SB1Label12
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression12))
            {
                algos.SB1TAmount12 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(12, _colNames, algos.SB1MathExpression12, morevars);
            }
            else if (label == algos.SB1Label13
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression13))
            {
                algos.SB1TAmount13 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(13, _colNames, algos.SB1MathExpression13, morevars);
            }
            else if (label == algos.SB1Label14
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression14))
            {
                algos.SB1TAmount14 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(14, _colNames, algos.SB1MathExpression14, morevars);
            }
            else if (label == algos.SB1Label15
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression15))
            {
                algos.SB1TAmount15 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(15, _colNames, algos.SB1MathExpression15, morevars);
            }
            else if (label == algos.SB1Label16
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression16))
            {
                algos.SB1TAmount16 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(16, _colNames, algos.SB1MathExpression16, morevars);
            }
            else if (label == algos.SB1Label17
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression17))
            {
                algos.SB1TAmount17 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(17, _colNames, algos.SB1MathExpression17, morevars);
            }
            else if (label == algos.SB1Label18
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression18))
            {
                algos.SB1TAmount18 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(18, _colNames, algos.SB1MathExpression18, morevars);
            }
            else if (label == algos.SB1Label19
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression19))
            {
                algos.SB1TAmount19 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(19, _colNames, algos.SB1MathExpression19, morevars);
            }
            else if (label == algos.SB1Label20
                 && SB1Statistics.SB1Algos.HasMathExpression(algos.SB1MathExpression20))
            {
                algos.SB1TAmount20 = qT;
                morevars = SetQsForMathTerms(algos, label, mathTerms, qCalcs);
                qTCalc = algos.GetTotalFromMathExpression(20, _colNames, algos.SB1MathExpression20, morevars);
            }
            else
            {
                //ignore the row
            }
            return qTCalc;
        }
        public List<double> SetQsForMathTerms(SB1Base baseCalcor, string label, List<string> mathTerms,
            List<double> qs)
        {
            List<double> morevars = new List<double>(xcols - 5);
            for (var v = 0; v < (xcols - 5); v++)
            {
                morevars.Add(0);
            }
            //morevars.Add(0);
            //morevars.Add(0);
            //morevars.Add(0);
            //morevars.Add(0);
            //morevars.Add(0);
            int i = 0;
            //the mathterms order was used to set qs order -so they will correspond correctly
            //and will have same size
            //the units must be set correctly
            //and the mathexpress has to contain the var
            if (label == baseCalcor.SB1Label1)
            {
                if (HasMathTerm(mathTerms, 0, 0))
                {
                    baseCalcor.SB11Amount1 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 1))
                {
                    baseCalcor.SB12Amount1 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 2))
                {
                    baseCalcor.SB13Amount1 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 3))
                {
                    baseCalcor.SB14Amount1 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 4))
                {
                    baseCalcor.SB15Amount1 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 0, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label2)
            {
                if (HasMathTerm(mathTerms, 1, 0))
                {
                    baseCalcor.SB11Amount2 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 1))
                {
                    baseCalcor.SB12Amount2 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 2))
                {
                    baseCalcor.SB13Amount2 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 3))
                {
                    baseCalcor.SB14Amount2 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 4))
                {
                    baseCalcor.SB15Amount2 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 1, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label3)
            {
                if (HasMathTerm(mathTerms, 2, 0))
                {
                    baseCalcor.SB11Amount3 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 1))
                {
                    baseCalcor.SB12Amount3 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 2))
                {
                    baseCalcor.SB13Amount3 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 3))
                {
                    baseCalcor.SB14Amount3 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 4))
                {
                    baseCalcor.SB15Amount3 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 2, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label4)
            {
                if (HasMathTerm(mathTerms, 3, 0))
                {
                    baseCalcor.SB11Amount4 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 1))
                {
                    baseCalcor.SB12Amount4 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 2))
                {
                    baseCalcor.SB13Amount4 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 3))
                {
                    baseCalcor.SB14Amount4 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 4))
                {
                    baseCalcor.SB15Amount4 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 3, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label5)
            {
                if (HasMathTerm(mathTerms, 4, 0))
                {
                    baseCalcor.SB11Amount5 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 1))
                {
                    baseCalcor.SB12Amount5 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 2))
                {
                    baseCalcor.SB13Amount5 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 3))
                {
                    baseCalcor.SB14Amount5 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 4))
                {
                    baseCalcor.SB15Amount5 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 4, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label6)
            {
                if (HasMathTerm(mathTerms, 5, 0))
                {
                    baseCalcor.SB11Amount6 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 1))
                {
                    baseCalcor.SB12Amount6 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 2))
                {
                    baseCalcor.SB13Amount6 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 3))
                {
                    baseCalcor.SB14Amount6 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 4))
                {
                    baseCalcor.SB15Amount6 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 5, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label7)
            {
                if (HasMathTerm(mathTerms, 6, 0))
                {
                    baseCalcor.SB11Amount7 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 1))
                {
                    baseCalcor.SB12Amount7 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 2))
                {
                    baseCalcor.SB13Amount7 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 3))
                {
                    baseCalcor.SB14Amount7 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 4))
                {
                    baseCalcor.SB15Amount7 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 6, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label8)
            {
                if (HasMathTerm(mathTerms, 7, 0))
                {
                    baseCalcor.SB11Amount8 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 1))
                {
                    baseCalcor.SB12Amount8 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 2))
                {
                    baseCalcor.SB13Amount8 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 3))
                {
                    baseCalcor.SB14Amount8 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 4))
                {
                    baseCalcor.SB15Amount8 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 7, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label9)
            {
                if (HasMathTerm(mathTerms, 8, 0))
                {
                    baseCalcor.SB11Amount9 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 1))
                {
                    baseCalcor.SB12Amount9 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 2))
                {
                    baseCalcor.SB13Amount9 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 3))
                {
                    baseCalcor.SB14Amount9 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 4))
                {
                    baseCalcor.SB15Amount9 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 8, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label10)
            {
                if (HasMathTerm(mathTerms, 9, 0))
                {
                    baseCalcor.SB11Amount10 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 1))
                {
                    baseCalcor.SB12Amount10 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 2))
                {
                    baseCalcor.SB13Amount10 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 3))
                {
                    baseCalcor.SB14Amount10 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 4))
                {
                    baseCalcor.SB15Amount10 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 9, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label11)
            {
                if (HasMathTerm(mathTerms, 10, 0))
                {
                    baseCalcor.SB11Amount11 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 1))
                {
                    baseCalcor.SB12Amount11 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 2))
                {
                    baseCalcor.SB13Amount11 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 3))
                {
                    baseCalcor.SB14Amount11 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 4))
                {
                    baseCalcor.SB15Amount11 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 10, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label12)
            {
                if (HasMathTerm(mathTerms, 11, 0))
                {
                    baseCalcor.SB11Amount12 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 1))
                {
                    baseCalcor.SB12Amount12 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 2))
                {
                    baseCalcor.SB13Amount12 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 3))
                {
                    baseCalcor.SB14Amount12 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 4))
                {
                    baseCalcor.SB15Amount12 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 11, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label13)
            {
                if (HasMathTerm(mathTerms, 12, 0))
                {
                    baseCalcor.SB11Amount13 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 1))
                {
                    baseCalcor.SB12Amount13 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 2))
                {
                    baseCalcor.SB13Amount13 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 3))
                {
                    baseCalcor.SB14Amount13 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 4))
                {
                    baseCalcor.SB15Amount13 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 12, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label14)
            {
                if (HasMathTerm(mathTerms, 13, 0))
                {
                    baseCalcor.SB11Amount14 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 1))
                {
                    baseCalcor.SB12Amount14 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 2))
                {
                    baseCalcor.SB13Amount14 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 3))
                {
                    baseCalcor.SB14Amount14 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 4))
                {
                    baseCalcor.SB15Amount14 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 13, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label15)
            {
                if (HasMathTerm(mathTerms, 14, 0))
                {
                    baseCalcor.SB11Amount15 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 1))
                {
                    baseCalcor.SB12Amount15 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 2))
                {
                    baseCalcor.SB13Amount15 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 3))
                {
                    baseCalcor.SB14Amount15 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 4))
                {
                    baseCalcor.SB15Amount15 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 14, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label16)
            {
                if (HasMathTerm(mathTerms, 15, 0))
                {
                    baseCalcor.SB11Amount16 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 1))
                {
                    baseCalcor.SB12Amount16 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 2))
                {
                    baseCalcor.SB13Amount16 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 3))
                {
                    baseCalcor.SB14Amount16 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 4))
                {
                    baseCalcor.SB15Amount16 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 15, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label17)
            {
                if (HasMathTerm(mathTerms, 16, 0))
                {
                    baseCalcor.SB11Amount17 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 1))
                {
                    baseCalcor.SB12Amount17 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 2))
                {
                    baseCalcor.SB13Amount17 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 3))
                {
                    baseCalcor.SB14Amount17 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 4))
                {
                    baseCalcor.SB15Amount17 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 16, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label18)
            {
                if (HasMathTerm(mathTerms, 17, 0))
                {
                    baseCalcor.SB11Amount18 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 1))
                {
                    baseCalcor.SB12Amount18 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 2))
                {
                    baseCalcor.SB13Amount18 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 3))
                {
                    baseCalcor.SB14Amount18 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 4))
                {
                    baseCalcor.SB15Amount18 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 17, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label19)
            {
                if (HasMathTerm(mathTerms, 18, 0))
                {
                    baseCalcor.SB11Amount19 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 1))
                {
                    baseCalcor.SB12Amount19 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 2))
                {
                    baseCalcor.SB13Amount19 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 3))
                {
                    baseCalcor.SB14Amount19 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 4))
                {
                    baseCalcor.SB15Amount19 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 18, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            if (label == baseCalcor.SB1Label20)
            {
                if (HasMathTerm(mathTerms, 19, 0))
                {
                    baseCalcor.SB11Amount20 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 1))
                {
                    baseCalcor.SB12Amount20 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 2))
                {
                    baseCalcor.SB13Amount20 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 3))
                {
                    baseCalcor.SB14Amount20 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 4))
                {
                    baseCalcor.SB15Amount20 = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 11))
                {
                    morevars[0] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 12))
                {
                    morevars[1] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 13))
                {
                    morevars[2] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 14))
                {
                    morevars[3] = qs[i];
                    i++;
                }
                if (HasMathTerm(mathTerms, 19, 15))
                {
                    morevars[4] = qs[i];
                    i++;
                }
            }
            return morevars;
        }
        public static bool HasMathTerm(List<string> mathTerms, int rowNumber, int colNumber)
        {
            bool bHasTerm = false;
            foreach (var mathterm in mathTerms)
            {
                //mathterm = colname = I1.Q1.housesize
                //GetMathTerm = I1.Q1
                if (mathterm.Contains(GetMathTerm(rowNumber, colNumber)))
                {
                    return true;
                }
            }
            return bHasTerm;
        }
        public static bool HasMathTerm(string mathTerm, int rowNumber, int colNumber)
        {
            bool bHasTerm = false;
            //mathterm = colname = I1.Q1.housesize
            //GetMathTerm = I1.Q1
            if (mathTerm.Contains(GetMathTerm(rowNumber, colNumber)))
            {
                return true;
            }
            return bHasTerm;
        }
        private static string GetMathTerm(int rowNumber, int colNumber)
        {
            string sMathTerm = string.Empty;
            int iMTIndex = (16 * rowNumber) + colNumber;
            //test whether this is robust
            bool bHasIndex = MATHTERMS.Any(s => MATHTERMS[iMTIndex] != null);
            if (bHasIndex)
            {
                sMathTerm = MATHTERMS[iMTIndex];
            }
            return sMathTerm;
        } 
        public async Task<string> SetIndicatorData(string label, List<List<double>> data)
        {
            string sAlgoIndicator = string.Empty;
            string sAlgo = string.Empty;
            if (data.Count > 0)
            {
                //get colcount from first row
                int iColCount = data[0].Count;
                IEnumerable<double> qTs = new List<double>();
                IEnumerable<double> q1s = new List<double>();
                IEnumerable<double> q2s = new List<double>();
                IEnumerable<double> q3s = new List<double>();
                IEnumerable<double> q4s = new List<double>();
                IEnumerable<double> q5s = new List<double>();
                IEnumerable<double> q6s = new List<double>();
                IEnumerable<double> q7s = new List<double>();
                IEnumerable<double> q8s = new List<double>();
                IEnumerable<double> q9s = new List<double>();
                IEnumerable<double> q10s = new List<double>();
                //IEnumerable<double> q11s = new List<double>();
                //need column data, not row data, data has been formatted with 11 cols
                //qT col is required for all data sets
                //data.count gives col count
                if (iColCount > 0)
                {
                    qTs = from row in data select row.ElementAt(0);
                }
                //so is 1 col of ind vars
                //data.count gives col count
                if (iColCount > 1)
                {
                    q1s = from row in data select row.ElementAt(1);
                }
                else
                {
                    //must have at least 1 dep var
                    return label;
                }
                //data.count gives col count
                if (iColCount > 2)
                {
                    q2s = from row in data select row.ElementAt(2);
                }
                if (iColCount > 3)
                {
                    q3s = from row in data select row.ElementAt(3);
                }
                if (iColCount > 4)
                {
                    q4s = from row in data select row.ElementAt(4);
                }
                if (iColCount > 5)
                {
                    q5s = from row in data select row.ElementAt(5);
                }
                if (iColCount > 6)
                {
                    q6s = from row in data select row.ElementAt(6);
                }
                if (iColCount > 7)
                {
                    q7s = from row in data select row.ElementAt(7);
                }
                if (iColCount > 8)
                {
                    q8s = from row in data select row.ElementAt(8);
                }
                if (iColCount > 9)
                {
                    q9s = from row in data select row.ElementAt(9);
                }
                if (iColCount > 10)
                {
                    q10s = from row in data select row.ElementAt(10);
                }
                
                StringBuilder sb = new StringBuilder();
                sb.AppendLine(string.Empty);
                //means
                if (qTs.Count() > 0)
                {
                    sb.AppendLine("observed means");
                    sb.Append(string.Concat("QT mean = ", Math.Round(qTs.Average(), 4), ", "));
                }
                if (q1s.Count() > 0)
                {
                    sb.Append(string.Concat("Q1 mean = ", Math.Round(q1s.Average(), 4), ", "));
                }
                if (q2s.Count() > 0)
                {
                    sb.Append(string.Concat("Q2 mean = ", Math.Round(q2s.Average(), 4), ", "));
                }
                if (q3s.Count() > 0)
                {
                    sb.Append(string.Concat("Q3 mean = ", Math.Round(q3s.Average(), 4), ", "));
                }
                if (q4s.Count() > 0)
                {
                    sb.Append(string.Concat("Q4 mean = ", Math.Round(q4s.Average(), 4), ", "));
                }
                if (q5s.Count() > 0)
                {
                    sb.Append(string.Concat("Q5 mean = ", Math.Round(q5s.Average(), 4), ", "));
                }
                if (q6s.Count() > 0)
                {
                    sb.Append(string.Concat("Q6 mean = ", Math.Round(q6s.Average(), 4), ", "));
                }
                if (q7s.Count() > 0)
                {
                    sb.Append(string.Concat("Q7 mean = ", Math.Round(q7s.Average(), 4), ", "));
                }
                if (q8s.Count() > 0)
                {
                    sb.Append(string.Concat("Q8 mean = ", Math.Round(q8s.Average(), 4), ", "));
                }
                if (q9s.Count() > 0)
                {
                    sb.Append(string.Concat("Q9 mean = ", Math.Round(q9s.Average(), 4), ", "));
                }
                if (q10s.Count() > 0)
                {
                    sb.Append(string.Concat("Q10 mean = ", Math.Round(q10s.Average(), 4), ", "));
                }
                int iSiblingIndicator = 0;
                if (label == this.SB1Label1
                    && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression1))
                {
                    this.SB1TAmount1 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    //this.SB1MathResult1 = this.GetObservedMathResult(label, this.SB1MathSubType1, this.SB1Type1, 
                    //    this.SB1MathType1, qTs, qTs.Average());
                    this.SB1MathResult1 += sb.ToString();
                    sAlgoIndicator = label;
                    //indicator1 should not have a sibling later, but keep the pattern consistent
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 1, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(1, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(1, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label2
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression2))
                {
                    this.SB1TAmount2 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult2 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 2, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(2, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(2, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label3
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression3))
                {
                    this.SB1TAmount3 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult3 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 3, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(3, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(3, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label4
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression4))
                {
                    this.SB1TAmount4 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult4 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 4, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(4, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(4, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label5
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression5))
                {
                    this.SB1TAmount5 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult5 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 5, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(5, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(5, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label6
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression6))
                {
                    this.SB1TAmount6 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult6 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 6, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(6, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(6, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label7
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression7))
                {
                    this.SB1TAmount7 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult7 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 7, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(7, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(7, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label8
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression8))
                {
                    this.SB1TAmount8 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult8 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 8, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(8, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(8, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label9
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression9))
                {
                    this.SB1TAmount9 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult9 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 9, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(9, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(9, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label10
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression10))
                {
                    this.SB1TAmount10 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult10 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 10, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(10, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(10, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label11
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression11))
                {
                    this.SB1TAmount11 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult11 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 11, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(11, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(11, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label12
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression12))
                {
                    this.SB1TAmount12 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult12 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 12, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(12, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(12, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label13
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression13))
                {
                    this.SB1TAmount13 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult13 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 13, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(13, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(13, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label14
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression14))
                {
                    this.SB1TAmount14 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult14 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 14, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(14, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(14, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label15
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression15))
                {
                    this.SB1TAmount15 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult15 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 15, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(15, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(15, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label16
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression16))
                {
                    this.SB1TAmount16 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult16 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 16, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(16, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(16, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label17
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression17))
                {
                    this.SB1TAmount17 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult17 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 17, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(17, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(17, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label18
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression18))
                {
                    this.SB1TAmount18 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult18 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 18, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(18, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(18, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label19
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression19))
                {
                    this.SB1TAmount19 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult19 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 19, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(19, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(19, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                if (label == this.SB1Label20
                     && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression20))
                {
                    this.SB1TAmount20 = Math.Round(qTs.Average(), 4);
                    sAlgo = await SetAlgoPRAStats(label, qTs.ToList());
                    this.SB1MathResult20 += sb.ToString();
                    sAlgoIndicator = label;
                    iSiblingIndicator = SB1Statistics.SB1Algos.GetSiblingIndicatorIndex(label, 20, this);
                    if (iSiblingIndicator != 0)
                    {
                        SetIndicatorQxMeans(iSiblingIndicator, q1s, q2s, q3s, q4s, q5s);
                        SetIndicatorQxMeans(20, q6s, q7s, q8s, q9s, q10s);
                    }
                    else
                    {
                        SetIndicatorQxMeans(20, q1s, q2s, q3s, q4s, q5s);
                    }
                }
                else
                {
                    //ignore the row
                }
            }
            return sAlgoIndicator;
        }
        public void SetIndicatorQxMeans(int indicatorIndex, IEnumerable<double> q1s, IEnumerable<double> q2s, 
            IEnumerable<double> q3s, IEnumerable<double> q4s, IEnumerable<double> q5s)
        {
            //the enumerables can be q1s to q11s
            if (indicatorIndex == 1)
            {
                if (q1s.Count() > 0)
                this.SB11Amount1 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                this.SB12Amount1 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                this.SB13Amount1 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                this.SB14Amount1 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                this.SB15Amount1 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 2)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount2 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount2 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount2 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount2 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount2 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 3)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount3 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount3 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount3 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount3 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount3 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 4)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount4 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount4 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount4 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount4 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount4 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 5)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount5 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount5 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount5 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount5 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount5 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 6)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount6 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount6 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount6 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount6 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount6 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 7)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount7 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount7 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount7 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount7 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount7 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 8)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount8 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount8 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount8 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount8 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount8 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 9)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount9 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount9 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount9 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount9 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount9 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 10)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount10 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount10 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount10 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount10 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount10 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 11)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount11 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount11 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount11 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount11 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount11 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 12)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount12 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount12 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount12 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount12 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount12 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 13)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount13 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount13 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount13 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount13 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount13 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 14)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount14 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount14 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount14 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount14 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount14 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 15)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount15 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount15 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount15 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount15 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount15 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 16)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount16 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount16 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount16 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount16 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount16 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 17)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount17 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount17 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount17 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount17 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount17 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 18)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount18 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount18 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount18 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount18 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount18 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 19)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount19 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount19 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount19 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount19 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount19 = Math.Round(q5s.Average(), 4);
            }
            else if (indicatorIndex == 20)
            {
                if (q1s.Count() > 0)
                    this.SB11Amount20 = Math.Round(q1s.Average(), 4);
                if (q2s.Count() > 0)
                    this.SB12Amount20 = Math.Round(q2s.Average(), 4);
                if (q3s.Count() > 0)
                    this.SB13Amount20 = Math.Round(q3s.Average(), 4);
                if (q4s.Count() > 0)
                    this.SB14Amount20 = Math.Round(q4s.Average(), 4);
                if (q5s.Count() > 0)
                    this.SB15Amount20 = Math.Round(q5s.Average(), 4);
            }
        }
        public async Task<bool> SetSeparateRanges(string label)
        {
            bool bHasSet = false;
            string sAlgo = string.Empty;
            List<double> qTs = new List<double>();
            if (label == this.SB1Label1
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression1))
            {
                //regular high and low estimation
                sAlgo = await SetAlgoPRAStats(this.SB1Label1, qTs);
                //SetTotalRange1();
            }
            else if (label == this.SB1Label2
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression2))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label2, qTs);
            }
            else if (label == this.SB1Label3
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression3))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label3, qTs);
            }
            else if (label == this.SB1Label4
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression4))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label4, qTs);
            }
            else if (label == this.SB1Label5
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression5))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label5, qTs);
            }
            else if (label == this.SB1Label6
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression6))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label6, qTs);
            }
            else if (label == this.SB1Label7
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression7))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label7, qTs);
            }
            else if (label == this.SB1Label8
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression8))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label8, qTs);
            }
            else if (label == this.SB1Label9
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression9))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label9, qTs);
            }
            else if (label == this.SB1Label10
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression10))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label10, qTs);
            }
            else if (label == this.SB1Label11
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression11))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label11, qTs);
            }
            else if (label == this.SB1Label12
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression12))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label12, qTs);
            }
            else if (label == this.SB1Label13
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression13))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label13, qTs);
            }
            else if (label == this.SB1Label14
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression14))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label14, qTs);
            }
            else if (label == this.SB1Label15
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression15))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label15, qTs);
            }
            else if (label == this.SB1Label16
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression16))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label16, qTs);
            }
            else if (label == this.SB1Label17
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression17))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label17, qTs);
            }
            else if (label == this.SB1Label18
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression18))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label18, qTs);
            }
            else if (label == this.SB1Label19
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression19))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label19, qTs);
            }
            else if (label == this.SB1Label20
                 && SB1Statistics.SB1Algos.HasMathExpression(this.SB1MathExpression20))
            {
                sAlgo = await SetAlgoPRAStats(this.SB1Label20, qTs);
            }
            else
            {
                //ignore the row
            }
            bHasSet = true;
            return bHasSet;
        }
        
        public async Task<string> SetAlgoPRAStats(string label, List<double> qTs, double[] data = null)
        {
            string sError = string.Empty;
            //init the algos using this
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            string algindicator = await algos.SetAlgoPRAStats(label, _colNames, qTs, data);
            //copy all of the results back to this
            this.CopySB1BaseProperties(algos);
            //188 added support for analyzers
            this.MathResult = algos.MathResult;
            this.DataToAnalyze = algos.DataToAnalyze;
            //goes in calcparams because it has to be passed back to anorhelper for manual insertion into calcdoc linkedview
            this.CalcParameters.MathResult = this.MathResult;
            return algindicator;
        }
        private async Task<string> SetAlgoCorrStats(int index, 
            string scriptURL, IDictionary<string, List<List<double>>> data)
        {
            string sError = string.Empty;
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            string algindicators = await algos.SetAlgoCorrIndicatorStats(index, scriptURL, data, _colNames);
            //copy all of the results back to this
            this.CopySB1BaseProperties(algos);
            //188 added support for analyzers
            this.MathResult = algos.MathResult;
            this.DataToAnalyze = algos.DataToAnalyze;
            //goes in calcparams because it has to be passed back to anorhelper for manual insertion into calcdoc linkedview
            this.CalcParameters.MathResult = this.MathResult;
            return algindicators;
        }
        private async Task<string> SetAlgoStats1(string label, List<List<double>> data)
        {
            string sError = string.Empty;
            //init the algos using this
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            string algindicator = await algos.SetAlgoIndicatorStats1(label, data, _colNames);
            //copy all of the results back to this
            this.CopySB1BaseProperties(algos);
            //188 added support for analyzers
            this.MathResult = algos.MathResult;
            this.DataToAnalyze = algos.DataToAnalyze;
            //goes in calcparams because it has to be passed back to anorhelper for manual insertion into calcdoc linkedview
            this.CalcParameters.MathResult = this.MathResult;
            return algindicator;
        }
        private async Task<string> SetAlgoStats2(string label, string dataURL, string scriptURL)
        {
            string sError = string.Empty;
            //init the algos using this
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            string algindicator
                = await algos.SetAlgoIndicatorStats2(label, _colNames, dataURL, scriptURL);
            //copy all of the results back to this
            this.CopySB1BaseProperties(algos);
            return algindicator;
        }
        private async Task<string> SetAlgoStats3(string label, List<List<string>> data, 
            List<List<string>> colData, List<string> lines2)
        {
            string sError = string.Empty;
            //init the algos using this
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            string algindicator
                = await algos.SetAlgoIndicatorStats3(label, data, colData, lines2, _colNames);
            //copy all of the results back to this
            this.CopySB1BaseProperties(algos);
            return algindicator;
        }
        private async Task<string> SetAlgoStats4(string label, List<List<string>> data,
            List<List<string>> colData, List<string> lines2)
        {
            string sError = string.Empty;
            //init the algos using this
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            //212 persistent data has to be copied separately
            if (HasMathType(this.SB1Label1, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm15))
            {
                algos.CopyData(this.Data3ToAnalyze);
            }
            string algindicator
                = await algos.SetAlgoIndicatorStats4(label, data, colData, lines2, _colNames);
            //copy all of the results back to this (the inheritance handles copying Data3ToAnalyze)
            this.CopySB1BaseProperties(algos);
            if (HasMathType(this.SB1Label1, MATH_TYPES.algorithm1, MATH_SUBTYPES.subalgorithm15))
            {
                this.CopyData(algos.Data3ToAnalyze);
            }
            return algindicator;
        }
        private async Task<string> SetAlgoStatsML(IndicatorQT1 qt1, 
            List<List<string>> data, List<List<string>> colData, List<List<string>> data2, 
            string dataURL2)
        {
            string sError = string.Empty;
            //init the algos using this
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            string algindicator
                = await algos.SetAlgoIndicatorStatsML(qt1, _colNames,
                    data, colData, data2, dataURL2);
            //copy all of the results back to this
            this.CopySB1BaseProperties(algos);
            return algindicator;
        }
        
        private async Task<string> SetAlgoCalcs(string label, List<List<double>> data)
        {
            string sError = string.Empty;
            //init the algos using this
            SB1Statistics.SB1Algos algos = new SB1Statistics.SB1Algos(this);
            string algindicator = await algos.SetAlgoIndicatorCalcs(label, data);
            //copy all of the results back to this
            this.CopySB1BaseProperties(algos);
            return algindicator;
        }
        
    }

    public static class SB1BaseExtensions
    {
        
        public static void SetTotalScore(this SB1Base baseCalc, string[] colNames)
        {
            if (baseCalc.SB1ScoreMathExpression == string.Empty)
            {
                baseCalc.SB1ScoreMathExpression = Constants.NONE;
                return;
            }
            //scorem is set when the distribution and mathtype run
            baseCalc.SB1Score = baseCalc.GetTotalFromMathExpression(0, colNames, baseCalc.SB1ScoreMathExpression, new List<double>(SB1Base.xcols - 5));
            if (!string.IsNullOrEmpty(baseCalc.ErrorMessage))
            {
                baseCalc.CalculatorDescription += baseCalc.ErrorMessage;
                baseCalc.ErrorMessage = string.Empty;
            }
            //they must enter scored1 and scored2 same as indicators

            if ((baseCalc.SB1ScoreUnit == string.Empty || baseCalc.SB1ScoreUnit == Constants.NONE) && baseCalc.SB1Score != 0)
                baseCalc.SB1ScoreUnit = "most likely";
            if ((baseCalc.SB1ScoreD1Unit == string.Empty || baseCalc.SB1ScoreD1Unit == Constants.NONE) && baseCalc.SB1ScoreD1Amount != 0)
                baseCalc.SB1ScoreD1Unit = "low estimate";
            if ((baseCalc.SB1ScoreD2Unit == string.Empty || baseCalc.SB1ScoreD2Unit == Constants.NONE) && baseCalc.SB1ScoreD2Amount != 0)
                baseCalc.SB1ScoreD2Unit = "high estimate";
        }
        

        public static double GetTotalFromMathExpression(this SB1Base baseCalc, int indicator, string[] colNames,
            string mathExpress, List<double> morevars)
        {
            double dbTotal = 0;
            if (morevars == null)
            {
                morevars = new List<double>(SB1Base.xcols - 5);
            }
            if (morevars.Count < 5)
            {
                for (var v = 0; v < (SB1Base.xcols - 5); v++)
                {
                    morevars.Add(0);
                }
            }
            if (!string.IsNullOrEmpty(mathExpress))
            {
                string sMathExpress = mathExpress;
                //must get rid of colnames from mathexpression
                if (colNames != null)
                {
                    for (int i = 0; i < colNames.Count(); i++)
                    {
                        sMathExpress = sMathExpress
                            .Replace(string.Concat(Constants.FILEEXTENSION_DELIMITER, colNames[i]), string.Empty);
                    }
                }
                //lower case
                sMathExpress = sMathExpress.Replace("q", "Q");
                sMathExpress = sMathExpress.Replace("i", "I");
                //
                //sibling vars
                sMathExpress = sMathExpress.Replace("I1.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                //has to come before I1.Q1
                sMathExpress = sMathExpress.Replace("I1.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.Q1", baseCalc.SB11Amount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.Q2", baseCalc.SB12Amount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.Q3", baseCalc.SB13Amount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.Q4", baseCalc.SB14Amount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.Q5", baseCalc.SB15Amount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.QTM", baseCalc.SB1TMAmount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.QTD1", baseCalc.SB1TD1Amount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.QTD2", baseCalc.SB1TD2Amount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.QTL", baseCalc.SB1TLAmount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.QTU", baseCalc.SB1TUAmount1.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I1.QT", baseCalc.SB1TAmount1.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I2.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q1", baseCalc.SB11Amount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q2", baseCalc.SB12Amount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q3", baseCalc.SB13Amount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q4", baseCalc.SB14Amount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.Q5", baseCalc.SB15Amount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.QTM", baseCalc.SB1TMAmount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.QTD1", baseCalc.SB1TD1Amount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.QTD2", baseCalc.SB1TD2Amount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.QTL", baseCalc.SB1TLAmount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.QTU", baseCalc.SB1TUAmount2.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I2.QT", baseCalc.SB1TAmount2.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I3.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q1", baseCalc.SB11Amount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q2", baseCalc.SB12Amount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q3", baseCalc.SB13Amount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q4", baseCalc.SB14Amount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.Q5", baseCalc.SB15Amount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.QTM", baseCalc.SB1TMAmount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.QTD1", baseCalc.SB1TD1Amount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.QTD2", baseCalc.SB1TD2Amount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.QTL", baseCalc.SB1TLAmount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.QTU", baseCalc.SB1TUAmount3.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I3.QT", baseCalc.SB1TAmount3.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I4.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q1", baseCalc.SB11Amount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q2", baseCalc.SB12Amount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q3", baseCalc.SB13Amount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q4", baseCalc.SB14Amount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.Q5", baseCalc.SB15Amount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.QTM", baseCalc.SB1TMAmount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.QTD1", baseCalc.SB1TD1Amount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.QTD2", baseCalc.SB1TD2Amount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.QTL", baseCalc.SB1TLAmount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.QTU", baseCalc.SB1TUAmount4.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I4.QT", baseCalc.SB1TAmount4.ToString("N4", CultureInfo.InvariantCulture));


                sMathExpress = sMathExpress.Replace("I5.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q1", baseCalc.SB11Amount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q2", baseCalc.SB12Amount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q3", baseCalc.SB13Amount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q4", baseCalc.SB14Amount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.Q5", baseCalc.SB15Amount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.QTM", baseCalc.SB1TMAmount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.QTD1", baseCalc.SB1TD1Amount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.QTD2", baseCalc.SB1TD2Amount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.QTL", baseCalc.SB1TLAmount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.QTU", baseCalc.SB1TUAmount5.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I5.QT", baseCalc.SB1TAmount5.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I6.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q1", baseCalc.SB11Amount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q2", baseCalc.SB12Amount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q3", baseCalc.SB13Amount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q4", baseCalc.SB14Amount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.Q5", baseCalc.SB15Amount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.QTM", baseCalc.SB1TMAmount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.QTD1", baseCalc.SB1TD1Amount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.QTD2", baseCalc.SB1TD2Amount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.QTL", baseCalc.SB1TLAmount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.QTU", baseCalc.SB1TUAmount6.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I6.QT", baseCalc.SB1TAmount6.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I7.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q1", baseCalc.SB11Amount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q2", baseCalc.SB12Amount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q3", baseCalc.SB13Amount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q4", baseCalc.SB14Amount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.Q5", baseCalc.SB15Amount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.QTM", baseCalc.SB1TMAmount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.QTD1", baseCalc.SB1TD1Amount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.QTD2", baseCalc.SB1TD2Amount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.QTL", baseCalc.SB1TLAmount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.QTU", baseCalc.SB1TUAmount7.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I7.QT", baseCalc.SB1TAmount7.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I8.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q1", baseCalc.SB11Amount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q2", baseCalc.SB12Amount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q3", baseCalc.SB13Amount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q4", baseCalc.SB14Amount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.Q5", baseCalc.SB15Amount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.QTM", baseCalc.SB1TMAmount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.QTD1", baseCalc.SB1TD1Amount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.QTD2", baseCalc.SB1TD2Amount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.QTL", baseCalc.SB1TLAmount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.QTU", baseCalc.SB1TUAmount8.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I8.QT", baseCalc.SB1TAmount8.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I9.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q1", baseCalc.SB11Amount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q2", baseCalc.SB12Amount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q3", baseCalc.SB13Amount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q4", baseCalc.SB14Amount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.Q5", baseCalc.SB15Amount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.QTM", baseCalc.SB1TMAmount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.QTD1", baseCalc.SB1TD1Amount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.QTD2", baseCalc.SB1TD2Amount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.QTL", baseCalc.SB1TLAmount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.QTU", baseCalc.SB1TUAmount9.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I9.QT", baseCalc.SB1TAmount9.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I10.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q1", baseCalc.SB11Amount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q2", baseCalc.SB12Amount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q3", baseCalc.SB13Amount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q4", baseCalc.SB14Amount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.Q5", baseCalc.SB15Amount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.QTM", baseCalc.SB1TMAmount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.QTD1", baseCalc.SB1TD1Amount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.QTD2", baseCalc.SB1TD2Amount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.QTL", baseCalc.SB1TLAmount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.QTU", baseCalc.SB1TUAmount10.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I10.QT", baseCalc.SB1TAmount10.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I11.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q1", baseCalc.SB11Amount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q2", baseCalc.SB12Amount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q3", baseCalc.SB13Amount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q4", baseCalc.SB14Amount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.Q5", baseCalc.SB15Amount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.QTM", baseCalc.SB1TMAmount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.QTD1", baseCalc.SB1TD1Amount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.QTD2", baseCalc.SB1TD2Amount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.QTL", baseCalc.SB1TLAmount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.QTU", baseCalc.SB1TUAmount11.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I11.QT", baseCalc.SB1TAmount11.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I12.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q1", baseCalc.SB11Amount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q2", baseCalc.SB12Amount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q3", baseCalc.SB13Amount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q4", baseCalc.SB14Amount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.Q5", baseCalc.SB15Amount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.QTM", baseCalc.SB1TMAmount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.QTD1", baseCalc.SB1TD1Amount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.QTD2", baseCalc.SB1TD2Amount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.QTL", baseCalc.SB1TLAmount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.QTU", baseCalc.SB1TUAmount12.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I12.QT", baseCalc.SB1TAmount12.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I13.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q1", baseCalc.SB11Amount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q2", baseCalc.SB12Amount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q3", baseCalc.SB13Amount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q4", baseCalc.SB14Amount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.Q5", baseCalc.SB15Amount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.QTM", baseCalc.SB1TMAmount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.QTD1", baseCalc.SB1TD1Amount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.QTD2", baseCalc.SB1TD2Amount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.QTL", baseCalc.SB1TLAmount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.QTU", baseCalc.SB1TUAmount13.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I13.QT", baseCalc.SB1TAmount13.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I14.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q1", baseCalc.SB11Amount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q2", baseCalc.SB12Amount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q3", baseCalc.SB13Amount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q4", baseCalc.SB14Amount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.Q5", baseCalc.SB15Amount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.QTM", baseCalc.SB1TMAmount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.QTD1", baseCalc.SB1TD1Amount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.QTD2", baseCalc.SB1TD2Amount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.QTL", baseCalc.SB1TLAmount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.QTU", baseCalc.SB1TUAmount14.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I14.QT", baseCalc.SB1TAmount14.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I15.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q1", baseCalc.SB11Amount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q2", baseCalc.SB12Amount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q3", baseCalc.SB13Amount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q4", baseCalc.SB14Amount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.Q5", baseCalc.SB15Amount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.QTM", baseCalc.SB1TMAmount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.QTD1", baseCalc.SB1TD1Amount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.QTD2", baseCalc.SB1TD2Amount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.QTL", baseCalc.SB1TLAmount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.QTU", baseCalc.SB1TUAmount15.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I15.QT", baseCalc.SB1TAmount15.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I16.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q1", baseCalc.SB11Amount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q2", baseCalc.SB12Amount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q3", baseCalc.SB13Amount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q4", baseCalc.SB14Amount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.Q5", baseCalc.SB15Amount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.QTM", baseCalc.SB1TMAmount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.QTD1", baseCalc.SB1TD1Amount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.QTD2", baseCalc.SB1TD2Amount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.QTL", baseCalc.SB1TLAmount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.QTU", baseCalc.SB1TUAmount16.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I16.QT", baseCalc.SB1TAmount16.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I17.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q1", baseCalc.SB11Amount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q2", baseCalc.SB12Amount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q3", baseCalc.SB13Amount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q4", baseCalc.SB14Amount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.Q5", baseCalc.SB15Amount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.QTM", baseCalc.SB1TMAmount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.QTD1", baseCalc.SB1TD1Amount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.QTD2", baseCalc.SB1TD2Amount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.QTL", baseCalc.SB1TLAmount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.QTU", baseCalc.SB1TUAmount17.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I17.QT", baseCalc.SB1TAmount17.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I18.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q1", baseCalc.SB11Amount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q2", baseCalc.SB12Amount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q3", baseCalc.SB13Amount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q4", baseCalc.SB14Amount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.Q5", baseCalc.SB15Amount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.QTM", baseCalc.SB1TMAmount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.QTD1", baseCalc.SB1TD1Amount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.QTD2", baseCalc.SB1TD2Amount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.QTL", baseCalc.SB1TLAmount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.QTU", baseCalc.SB1TUAmount18.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I18.QT", baseCalc.SB1TAmount18.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I19.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q1", baseCalc.SB11Amount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q2", baseCalc.SB12Amount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q3", baseCalc.SB13Amount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q4", baseCalc.SB14Amount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.Q5", baseCalc.SB15Amount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.QTM", baseCalc.SB1TMAmount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.QTD1", baseCalc.SB1TD1Amount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.QTD2", baseCalc.SB1TD2Amount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.QTL", baseCalc.SB1TLAmount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.QTU", baseCalc.SB1TUAmount19.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I19.QT", baseCalc.SB1TAmount19.ToString("N4", CultureInfo.InvariantCulture));

                sMathExpress = sMathExpress.Replace("I20.Q6", morevars[0].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q7", morevars[1].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q8", morevars[2].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q9", morevars[3].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q10", morevars[4].ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q1", baseCalc.SB11Amount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q2", baseCalc.SB12Amount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q3", baseCalc.SB13Amount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q4", baseCalc.SB14Amount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.Q5", baseCalc.SB15Amount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.QTM", baseCalc.SB1TMAmount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.QTD1", baseCalc.SB1TD1Amount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.QTD2", baseCalc.SB1TD2Amount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.QTL", baseCalc.SB1TLAmount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.QTU", baseCalc.SB1TUAmount20.ToString("N4", CultureInfo.InvariantCulture));
                sMathExpress = sMathExpress.Replace("I20.QT", baseCalc.SB1TAmount20.ToString("N4", CultureInfo.InvariantCulture));
                
                //self variables
                if (indicator == 1)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount1.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount1.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount1.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount1.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount1.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 2)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount2.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount2.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount2.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount2.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount2.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 3)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount3.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount3.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount3.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount3.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount3.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 4)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount4.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount4.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount4.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount4.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount4.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 5)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount5.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount5.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount5.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount5.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount5.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 6)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount6.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount6.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount6.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount6.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount6.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 7)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount7.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount7.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount7.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount7.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount7.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 8)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount8.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount8.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount8.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount8.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount8.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 9)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount9.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount9.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount9.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount9.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount9.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 10)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount10.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount10.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount10.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount10.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount10.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 11)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount11.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount11.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount11.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount11.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount11.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 12)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount12.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount12.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount12.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount12.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount12.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 13)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount13.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount13.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount13.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount13.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount13.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 14)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount14.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount14.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount14.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount14.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount14.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 15)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount15.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount15.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount15.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount15.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount15.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 16)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount16.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount16.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount16.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount16.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount16.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 17)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount17.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount17.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount17.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount17.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount17.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 18)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount18.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount18.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount18.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount18.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount18.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 19)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount19.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount19.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount19.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount19.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount19.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 20)
                {
                    sMathExpress = sMathExpress.Replace("Q1", baseCalc.SB11Amount20.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q2", baseCalc.SB12Amount20.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q3", baseCalc.SB13Amount20.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q4", baseCalc.SB14Amount20.ToString("N4", CultureInfo.InvariantCulture));
                    sMathExpress = sMathExpress.Replace("Q5", baseCalc.SB15Amount20.ToString("N4", CultureInfo.InvariantCulture));
                }
                else if (indicator == 0)
                {
                    //not applicable to score
                }
                //get rid of any constants or letters that can interfere with parse engine
                sMathExpress = sMathExpress.Replace(Constants.CSV_DELIMITER, string.Empty);
                sMathExpress = sMathExpress.Replace("A", string.Empty);
                sMathExpress = sMathExpress.Replace("B", string.Empty);
                sMathExpress = sMathExpress.Replace("C", string.Empty);
                sMathExpress = sMathExpress.Replace("D", string.Empty);
                sMathExpress = sMathExpress.Replace("E", string.Empty);
                sMathExpress = sMathExpress.Replace("F", string.Empty);
                sMathExpress = sMathExpress.Replace("G", string.Empty);
                sMathExpress = sMathExpress.Replace("H", string.Empty);
                sMathExpress = sMathExpress.Replace("I", string.Empty);
                sMathExpress = sMathExpress.Replace("J", string.Empty);
                sMathExpress = sMathExpress.Replace("K", string.Empty);
                sMathExpress = sMathExpress.Replace("L", string.Empty);
                sMathExpress = sMathExpress.Replace("M", string.Empty);
                sMathExpress = sMathExpress.Replace("N", string.Empty);
                sMathExpress = sMathExpress.Replace("O", string.Empty);
                sMathExpress = sMathExpress.Replace("P", string.Empty);
                sMathExpress = sMathExpress.Replace("Q", string.Empty);
                sMathExpress = sMathExpress.Replace("R", string.Empty);
                sMathExpress = sMathExpress.Replace("S", string.Empty);
                sMathExpress = sMathExpress.Replace("T", string.Empty);
                sMathExpress = sMathExpress.Replace("U", string.Empty);
                sMathExpress = sMathExpress.Replace("V", string.Empty);
                sMathExpress = sMathExpress.Replace("W", string.Empty);
                sMathExpress = sMathExpress.Replace("X", string.Empty);
                sMathExpress = sMathExpress.Replace("Y", string.Empty);
                sMathExpress = sMathExpress.Replace("Z", string.Empty);
                
                sMathExpress = sMathExpress.Replace(@"\", string.Empty);
                //don't remove nan =points out that an error needs to be fixed
                //sMathExpress = sMathExpress.Replace("NaN", string.Empty);
                //1.9.0 allows multiple vars to be used in expressions, but the algorithm handles the math, not this
                if (sMathExpress.Contains(".QN"))
                {
                    sMathExpress = string.Empty;
                }
                //must have some numbers substituted
                if (sMathExpress != mathExpress
                    && (!string.IsNullOrEmpty(sMathExpress)))
                {
                    try
                    {
                        Jace.CalculationEngine engine = new Jace.CalculationEngine();
                        dbTotal = engine.Calculate(sMathExpress);
                    }
                    catch (Exception x)
                    {
                        if (indicator != 0)
                        {
                            baseCalc.ErrorMessage +=
                                string.Concat(" Ind", indicator.ToString(), ": ", x.Message, Errors.MakeStandardErrorMsg("JACE_BASIC"));
                        }
                        else
                        {
                            baseCalc.ErrorMessage +=
                                string.Concat(" Score: ", x.Message, Errors.MakeStandardErrorMsg("JACE_BASIC"));
                        }
                    }
                }
            }
            dbTotal = Math.Round(dbTotal, 4);
            return dbTotal;
        }
        
    }
}
