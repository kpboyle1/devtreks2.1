using DevTreks.Models;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Linq;
using System.Xml.XPath;

namespace DevTreks.Data.AppHelpers
{
    /// <summary>
    ///Purpose:		Support class holding constants, enums, and common methods for 
    ///             operating and capital budgets
    ///Author:		www.devtreks.org
    ///Date:		2013, August
    ///References:	www.devtreks.org/helptreks/linkedviews/help/linkedview/HelpFile/148
    ///NOTES        1. This class is called Economics1 because the operating and 
    ///                 capital budgets generated by this class are mathematically 
    ///                 tractable (i.e. inputs and outputs, with model extensions 
    ///                 handled in the linked views). 
    ///                 No reason microeconomics can't be automated.
    ///             2. The outcomes nodes are being saved for future upgrades. 
    ///             DevTreks doesn't have really good data sets demonstrating the 
    ///             best way to model outcomes (although it does have some preliminary 
    ///             ideas about how outcomes work and how they can be modeled).
    /// </summary>
    public class Economics1
	{
        public Economics1() { }
        
		/// <summary>
		/// Type of budget node being used.
		/// </summary>
		public enum BUDGET_TYPES
		{
            budgettype                  = 0,
			budgetgroup					= 1,
			budget						= 2,
            budgettimeperiod            = 3,
            budgetoutcomes              = 4,
            budgetoutcome               = 5,
            budgetoutput                = 6,
            budgetoperations            = 7,
            budgetoperation             = 8,
            budgetinput                 = 9
		}
		/// <summary>
		/// Type of investment node being used.
		/// </summary>
		public enum INVESTMENT_TYPES
		{
            investmenttype              = 0,
			investmentgroup				= 1,
			investment					= 2,
			investmenttimeperiod	    = 3,
            investmentoutcomes          = 4,
            investmentoutcome           = 5,
            investmentoutput            = 6,
            investmentcomponents        = 7,
            investmentcomponent         = 8,
            investmentinput             = 9
		}
        //note that this constant is only used to distinguish calc name from input name
        public const string BUDGETSYSTEM_ID = "BudgetSystemId";
        public const string BUDGETSYSTEM_NAME = "BudgetSystemName";
        public const string INVESTMENTSYSTEM_ID = "CostSystemId";
        public const string INVESTMENTSYSTEM_NAME = "CostSystemName";
        public const string BUDGETSYSTEM_TO_OPERATION_ID = "BudgetSystemToOperationId";
        public const string COSTSYSTEM_TO_COMPONENT_ID = "CostSystemToComponentId";
        public const string BUDGETSYSTEM_TO_TIME_ID = "BudgetSystemToTimeId";
        public const string COSTSYSTEM_TO_TIME_ID = "CostSystemToTimeId";
        public const string BUDGETSYSTEM_TO_OUTCOME_ID = "BudgetSystemToOutcomeId";
        public const string COSTSYSTEM_TO_OUTCOME_ID = "CostSystemToOutcomeId";

        public const string ISDISCOUNTED = "DiscountYorN";
        public const string ISCOMMON_REFERENCE = "CommonRefYorN";
        public const string GROWTH_PERIODS = "GrowthPeriods";
        public const string GROWTH_TYPE_ID = "GrowthTypeId";
        public const string OVERHEAD_FACTOR = "AOHFactor";
        public const string BUDGET_TPENTERPRISE_NAME = "EnterpriseName";
        public const string BUDGET_TPENTERPRISE_UNIT = "EnterpriseUnit";
        public const string BUDGET_TPENTERPRISE_AMOUNT = "EnterpriseAmount";
        public const string INVEST_TPENTERPRISE_NAME = "PracticeName";
        public const string INVEST_TPENTERPRISE_UNIT = "PracticeUnit";
        public const string INVEST_TPENTERPRISE_AMOUNT = "PracticeAmount";
        public const string ANNUITY_TYPE = "AnnuityType";
        public const string ANNUITY = "annuity";
        public const string BUDGET_OUTCOMES_NODE = "<budgetoutcomes></budgetoutcomes>";
        public const string BUDGET_OPERATIONS_NODE = "<budgetoperations></budgetoperations>";
        public const string INVESTMENT_OUTCOMES_NODE = "<investmentoutcomes></investmentoutcomes>";
        public const string INVESTMENT_COMPONENTS_NODE = "<investmentcomponents></investmentcomponents>";
        /// <summary>
        /// type of growth series to extend profit and investment flows into the future
        /// </summary>
        public enum GROWTH_SERIES_TYPES
        {
            uniform = 1,
            linear = 2,
            geometric = 3
        }
        public static Dictionary<string, string> GetGrowthTypesDictionary()
        {
            Dictionary<string, string> docstats = new Dictionary<string, string>();
            int iValue = (int)GROWTH_SERIES_TYPES.uniform;
            docstats.Add(iValue.ToString(), GROWTH_SERIES_TYPES.uniform.ToString());
            iValue = (int)GROWTH_SERIES_TYPES.linear;
            docstats.Add(iValue.ToString(), GROWTH_SERIES_TYPES.linear.ToString());
            iValue = (int)GROWTH_SERIES_TYPES.geometric;
            docstats.Add(iValue.ToString(), GROWTH_SERIES_TYPES.geometric.ToString());
            return docstats;
        }
        public static Dictionary<string, string> GetEconomicsTypes(ContentURI uri)
        {
            Dictionary<string, string> colTypes = new Dictionary<string, string>();
            if (uri.URIDataManager.SubAppType == Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.budgets)
            {
                if (uri.URIModels.BudgetSystemType != null)
                {
                    foreach (var type in uri.URIModels.BudgetSystemType)
                    {
                        //note that on the client the key becomes the option's value
                        colTypes.Add(type.PKId.ToString(), type.Name);
                    }
                }
            }
            else if (uri.URIDataManager.SubAppType == Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.investments)
            {
                if (uri.URIModels.CostSystemType != null)
                {
                    foreach (var type in uri.URIModels.CostSystemType)
                    {
                        //note that on the client the key becomes the option's value
                        colTypes.Add(type.PKId.ToString(), type.Name);
                    }
                }
            }
            return colTypes;
        }
        public static void SetAppSearchView(string currentNodeName,
            int currentId, ContentURI uri)
        {
            if (uri.URIDataManager.SubAppType == Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.budgets)
            {
                InitBudgetNavigation(currentNodeName, currentId, uri);
            }
            else if (uri.URIDataManager.SubAppType == Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.investments)
            {
                InitInvestmentNavigation(currentNodeName, currentId, uri);
            }
        }

        private static void InitBudgetNavigation(string currentNodeName,
            int currentId, ContentURI uri)
        {
            //the current params change depending on the node type
            if (currentNodeName == Agreement.AGREEMENT_BASE_TYPES.servicebase.ToString()
                || currentNodeName == Agreement.AGREEMENT_TYPES.service.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel 
                    == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                uri.URIDataManager.ChildrenNodeName = BUDGET_TYPES.budgetgroup.ToString();
            }
            else if (currentNodeName == BUDGET_TYPES.budgetgroup.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    //show public how things work to influence them to join
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                uri.URIDataManager.ChildrenNodeName = BUDGET_TYPES.budget.ToString();
            }
            else if (currentNodeName == BUDGET_TYPES.budget.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                uri.URIDataManager.ChildrenNodeName = BUDGET_TYPES.budgettimeperiod.ToString();
            }
            else if (currentNodeName == BUDGET_TYPES.budgettimeperiod.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                uri.URIDataManager.ChildrenNodeName = BUDGET_TYPES.budgetoperation.ToString(); 
            }
            else if (currentNodeName == BUDGET_TYPES.budgetoutcome.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.none;
                //ability to use selects panel for edits means that outputseries needed
                uri.URIDataManager.ChildrenNodeName = Prices.OUTPUT_PRICE_TYPES.outputseries.ToString();
                //uri.URIDataManager.ChildrenNodeName = BUDGET_TYPES.budgetinput.ToString();
            }
            else if (currentNodeName == BUDGET_TYPES.budgetoperation.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.none;
                //ability to use selects panel for edits means that inputseries needed
                uri.URIDataManager.ChildrenNodeName = Prices.INPUT_PRICE_TYPES.inputseries.ToString();
                //uri.URIDataManager.ChildrenNodeName = BUDGET_TYPES.budgetinput.ToString();
            }
        }
        private static void InitInvestmentNavigation(string currentNodeName,
            int currentId, ContentURI uri)
        {
            //the current params change depending on the node type
            if (currentNodeName == Agreement.AGREEMENT_BASE_TYPES.servicebase.ToString()
                || currentNodeName == Agreement.AGREEMENT_TYPES.service.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                uri.URIDataManager.ChildrenNodeName = INVESTMENT_TYPES.investmentgroup.ToString();
            }
            else if (currentNodeName == INVESTMENT_TYPES.investmentgroup.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                uri.URIDataManager.ChildrenNodeName = INVESTMENT_TYPES.investment.ToString();
            }
            else if (currentNodeName == INVESTMENT_TYPES.investment.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                uri.URIDataManager.ChildrenNodeName = INVESTMENT_TYPES.investmenttimeperiod.ToString();
            }
            else if (currentNodeName == INVESTMENT_TYPES.investmenttimeperiod.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.search;
                uri.URIDataManager.ChildrenNodeName = INVESTMENT_TYPES.investmentcomponent.ToString();
            }
            else if (currentNodeName == INVESTMENT_TYPES.investmentoutcome.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.none;
                //ability to use selects panel for edits means that outputseries needed
                uri.URIDataManager.ChildrenNodeName = Prices.OUTPUT_PRICE_TYPES.outputseries.ToString();
            }
            else if (currentNodeName == INVESTMENT_TYPES.investmentcomponent.ToString())
            {
                if (uri.URIMember.ClubInUse.PrivateAuthorizationLevel == AccountHelper.AUTHORIZATION_LEVELS.fulledits)
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.full;
                    //checkboxes for node insertions
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                else
                {
                    uri.URIDataManager.EditViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.print;
                    uri.URIDataManager.SelectViewEditType = Helpers.GeneralHelpers.VIEW_EDIT_TYPES.part;
                }
                //link backwards
                uri.URIDataManager.ParentPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.select;
                //link forwards
                uri.URIDataManager.ChildrenPanelType = Helpers.GeneralHelpers.UPDATE_PANEL_TYPES.none;
                //ability to use selects panel for edits means that inputseries needed
                uri.URIDataManager.ChildrenNodeName = Prices.INPUT_PRICE_TYPES.inputseries.ToString();
            }
        }
        public static void AddBaseComponentToXml(XElement currentNode, CostSystemToComponent costToComponent)
        {
            if (costToComponent.Component != null)
            {
                if (costToComponent.Component.ComponentClass != null)
                {
                    currentNode.SetAttributeValue(Prices.COMPONENT_GROUP_ID, costToComponent.Component.ComponentClass.PKId.ToString());
                    currentNode.SetAttributeValue(Prices.COMPONENT_GROUP_NAME, costToComponent.Component.ComponentClass.Name);
                    currentNode.SetAttributeValue(Prices.COMPONENT_GROUP_LABEL, costToComponent.Component.ComponentClass.Num);
                    if (costToComponent.Component.ComponentClass.ComponentType != null)
                    {
                        currentNode.SetAttributeValue(Calculator.cTypeId, costToComponent.Component.ComponentClass.ComponentType.PKId.ToString());
                        currentNode.SetAttributeValue(Calculator.cTypeName, costToComponent.Component.ComponentClass.ComponentType.Name);
                    }
                }
            }
        }
        public static void AddBaseOperationToXml(XElement currentNode, BudgetSystemToOperation budgetToOperation)
        {
            if (budgetToOperation.Operation != null)
            {
                if (budgetToOperation.Operation.OperationClass != null)
                {
                    currentNode.SetAttributeValue(Prices.OPERATION_GROUP_ID, budgetToOperation.Operation.OperationClass.PKId.ToString());
                    currentNode.SetAttributeValue(Prices.OPERATION_GROUP_NAME, budgetToOperation.Operation.OperationClass.Name);
                    currentNode.SetAttributeValue(Prices.OPERATION_GROUP_LABEL, budgetToOperation.Operation.OperationClass.Num);
                    if (budgetToOperation.Operation.OperationClass.OperationType != null)
                    {
                        currentNode.SetAttributeValue(Calculator.cTypeId, budgetToOperation.Operation.OperationClass.OperationType.PKId.ToString());
                        currentNode.SetAttributeValue(Calculator.cTypeName, budgetToOperation.Operation.OperationClass.OperationType.Name);
                    }
                }
            }
        }
        public static void AddBaseOutcomeToXml(XElement currentNode, CostSystemToOutcome costToOutcome)
        {
            if (costToOutcome.Outcome != null)
            {
                if (costToOutcome.Outcome.OutcomeClass != null)
                {
                    currentNode.SetAttributeValue(Prices.OUTCOME_GROUP_ID, costToOutcome.Outcome.OutcomeClass.PKId.ToString());
                    currentNode.SetAttributeValue(Prices.OUTCOME_GROUP_NAME, costToOutcome.Outcome.OutcomeClass.Name);
                    currentNode.SetAttributeValue(Prices.OUTCOME_GROUP_LABEL, costToOutcome.Outcome.OutcomeClass.Num);
                    if (costToOutcome.Outcome.OutcomeClass.OutcomeType != null)
                    {
                        currentNode.SetAttributeValue(Calculator.cTypeId, costToOutcome.Outcome.OutcomeClass.OutcomeType.PKId.ToString());
                        currentNode.SetAttributeValue(Calculator.cTypeName, costToOutcome.Outcome.OutcomeClass.OutcomeType.Name);
                    }
                }
            }
        }
        public static void AddBaseOutcomeToXml(XElement currentNode, BudgetSystemToOutcome budgetToOutcome)
        {
            if (budgetToOutcome.Outcome != null)
            {
                if (budgetToOutcome.Outcome.OutcomeClass != null)
                {
                    currentNode.SetAttributeValue(Prices.OUTCOME_GROUP_ID, budgetToOutcome.Outcome.OutcomeClass.PKId.ToString());
                    currentNode.SetAttributeValue(Prices.OUTCOME_GROUP_NAME, budgetToOutcome.Outcome.OutcomeClass.Name);
                    currentNode.SetAttributeValue(Prices.OUTCOME_GROUP_LABEL, budgetToOutcome.Outcome.OutcomeClass.Num);
                    if (budgetToOutcome.Outcome.OutcomeClass.OutcomeType != null)
                    {
                        currentNode.SetAttributeValue(Calculator.cTypeId, budgetToOutcome.Outcome.OutcomeClass.OutcomeType.PKId.ToString());
                        currentNode.SetAttributeValue(Calculator.cTypeName, budgetToOutcome.Outcome.OutcomeClass.OutcomeType.Name);
                    }
                }
            }
        }
        public static void AddBaseOutputSeriesToXml(XElement currentNode, CostSystemToOutput costToOutput)
        {
            if (costToOutput.OutputSeries != null)
            {
                currentNode.SetAttributeValue("OutputPrice1", costToOutput.OutputSeries.OutputPrice1.ToString());
                currentNode.SetAttributeValue("OutputUnit1", costToOutput.OutputSeries.OutputUnit1);
                if (costToOutput.OutputSeries.Output != null)
                {
                    if (costToOutput.OutputSeries.Output.OutputClass != null)
                    {
                        currentNode.SetAttributeValue(Prices.OUTPUT_GROUP_ID, costToOutput.OutputSeries.Output.OutputClass.PKId.ToString());
                        currentNode.SetAttributeValue(Prices.OUTPUT_GROUP_NAME, costToOutput.OutputSeries.Output.OutputClass.Name);
                        currentNode.SetAttributeValue(Prices.OUTPUT_GROUP_LABEL, costToOutput.OutputSeries.Output.OutputClass.Num);
                        if (costToOutput.OutputSeries.Output.OutputClass.OutputType != null)
                        {
                            currentNode.SetAttributeValue(Calculator.cTypeId, costToOutput.OutputSeries.Output.OutputClass.OutputType.PKId.ToString());
                            currentNode.SetAttributeValue(Calculator.cTypeName, costToOutput.OutputSeries.Output.OutputClass.OutputType.Name);
                        }
                    }
                }
            }
        }
        public static void AddBaseOutputSeriesToXml(XElement currentNode, BudgetSystemToOutput budgetToOutput)
        {
            if (budgetToOutput.OutputSeries != null)
            {
                currentNode.SetAttributeValue("OutputPrice1", budgetToOutput.OutputSeries.OutputPrice1.ToString());
                currentNode.SetAttributeValue("OutputUnit1", budgetToOutput.OutputSeries.OutputUnit1);
                if (budgetToOutput.OutputSeries.Output != null)
                {
                    if (budgetToOutput.OutputSeries.Output.OutputClass != null)
                    {
                        currentNode.SetAttributeValue(Prices.OUTPUT_GROUP_ID, budgetToOutput.OutputSeries.Output.OutputClass.PKId.ToString());
                        currentNode.SetAttributeValue(Prices.OUTPUT_GROUP_NAME, budgetToOutput.OutputSeries.Output.OutputClass.Name);
                        currentNode.SetAttributeValue(Prices.OUTPUT_GROUP_LABEL, budgetToOutput.OutputSeries.Output.OutputClass.Num);
                        if (budgetToOutput.OutputSeries.Output.OutputClass.OutputType != null)
                        {
                            currentNode.SetAttributeValue(Calculator.cTypeId, budgetToOutput.OutputSeries.Output.OutputClass.OutputType.PKId.ToString());
                            currentNode.SetAttributeValue(Calculator.cTypeName, budgetToOutput.OutputSeries.Output.OutputClass.OutputType.Name);
                        }
                    }
                }
            }
        }
        public static void AddBaseInputSeriesToXml(XElement currentNode, CostSystemToInput costToInput)
        {
            if (costToInput.InputSeries != null)
            {
                currentNode.SetAttributeValue("InputPrice1", costToInput.InputSeries.InputPrice1.ToString());
                currentNode.SetAttributeValue("InputUnit1", costToInput.InputSeries.InputUnit1);
                currentNode.SetAttributeValue("InputUnit2", costToInput.InputSeries.InputUnit2);
                currentNode.SetAttributeValue("InputPrice2", costToInput.InputSeries.InputPrice2.ToString());
                currentNode.SetAttributeValue("InputUnit3", costToInput.InputSeries.InputUnit3);
                currentNode.SetAttributeValue("InputPrice3", costToInput.InputSeries.InputPrice3.ToString());
                if (costToInput.InputSeries.Input != null)
                {
                    if (costToInput.InputSeries.Input.InputClass != null)
                    {
                        currentNode.SetAttributeValue(Prices.INPUT_GROUP_ID, costToInput.InputSeries.Input.InputClass.PKId.ToString());
                        currentNode.SetAttributeValue(Prices.INPUT_GROUP_NAME, costToInput.InputSeries.Input.InputClass.Name);
                        currentNode.SetAttributeValue(Prices.INPUT_GROUP_LABEL, costToInput.InputSeries.Input.InputClass.Num);
                        if (costToInput.InputSeries.Input.InputClass.InputType != null)
                        {
                            currentNode.SetAttributeValue(Calculator.cTypeId, costToInput.InputSeries.Input.InputClass.InputType.PKId.ToString());
                            currentNode.SetAttributeValue(Calculator.cTypeName, costToInput.InputSeries.Input.InputClass.InputType.Name);
                        }
                    }
                }
            }
        }
        public static void AddBaseInputSeriesToXml(XElement currentNode, BudgetSystemToInput budgetToInput)
        {
            if (budgetToInput.InputSeries != null)
            {
                currentNode.SetAttributeValue("InputPrice1", budgetToInput.InputSeries.InputPrice1.ToString());
                currentNode.SetAttributeValue("InputUnit1", budgetToInput.InputSeries.InputUnit1);
                currentNode.SetAttributeValue("InputUnit2", budgetToInput.InputSeries.InputUnit2);
                currentNode.SetAttributeValue("InputPrice2", budgetToInput.InputSeries.InputPrice2.ToString());
                currentNode.SetAttributeValue("InputUnit3", budgetToInput.InputSeries.InputUnit3);
                currentNode.SetAttributeValue("InputPrice3", budgetToInput.InputSeries.InputPrice3.ToString());
                if (budgetToInput.InputSeries.Input != null)
                {
                    if (budgetToInput.InputSeries.Input.InputClass != null)
                    {
                        currentNode.SetAttributeValue(Prices.INPUT_GROUP_ID, budgetToInput.InputSeries.Input.InputClass.PKId.ToString());
                        currentNode.SetAttributeValue(Prices.INPUT_GROUP_NAME, budgetToInput.InputSeries.Input.InputClass.Name);
                        currentNode.SetAttributeValue(Prices.INPUT_GROUP_LABEL, budgetToInput.InputSeries.Input.InputClass.Num);
                        if (budgetToInput.InputSeries.Input.InputClass.InputType != null)
                        {
                            currentNode.SetAttributeValue(Calculator.cTypeId, budgetToInput.InputSeries.Input.InputClass.InputType.PKId.ToString());
                            currentNode.SetAttributeValue(Calculator.cTypeName, budgetToInput.InputSeries.Input.InputClass.InputType.Name);
                        }
                    }
                }
            }
        }
        public static bool AddBudgetElementToParent(XElement root, XElement childEl,
            string groupingElementName, string parentId, string parentNodeName,
            BudgetSystem budgetSystem)
        {
            bool bIsAdded = false;
            if (childEl != null)
            {
                bool bParentExists = EditHelpers.XmlLinq.DescendantExists(root, parentNodeName, parentId);
                if (bParentExists)
                {
                    string sParentId = string.Empty;
                    string sParentName = string.Empty;
                    string sGrandParentId = string.Empty;
                    string sGrandParentName = string.Empty;
                    if (parentNodeName == Agreement.AGREEMENT_BASE_TYPES.servicebase.ToString()
                        && budgetSystem.BudgetSystemType != null)
                    {
                        XElement parent = EditHelpers.XmlLinq.GetElement(root, parentNodeName, parentId);
                        if (parent != null)
                        {
                            sParentId = budgetSystem.BudgetSystemType.PKId.ToString();
                            sParentName = budgetSystem.BudgetSystemType.Name;
                            childEl.SetAttributeValue(Calculator.cTypeId, sParentId);
                            childEl.SetAttributeValue(Calculator.cTypeName, sParentName);
                            bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                        }
                    }
                    else if (parentNodeName == BUDGET_TYPES.budgetgroup.ToString())
                    {
                        XElement parent = EditHelpers.XmlLinq.GetElement(root, parentNodeName, parentId);
                        if (parent != null)
                        {
                            sParentId = EditHelpers.XmlLinq.GetAttributeValue(parent, AppHelpers.Calculator.cId);
                            sParentName = EditHelpers.XmlLinq.GetAttributeValue(parent, AppHelpers.Calculator.cName);
                            childEl.SetAttributeValue(BUDGETSYSTEM_ID, sParentId);
                            childEl.SetAttributeValue(BUDGETSYSTEM_NAME, sParentName);
                            sGrandParentId = EditHelpers.XmlLinq.GetAttributeValue(parent, Calculator.cTypeId);
                            sGrandParentName = EditHelpers.XmlLinq.GetAttributeValue(parent, Calculator.cTypeName);
                            childEl.SetAttributeValue(Calculator.cTypeId, sGrandParentId);
                            childEl.SetAttributeValue(Calculator.cTypeName, sGrandParentName);
                            bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                        }
                    }
                    else if (parentNodeName == BUDGET_TYPES.budget.ToString())
                    {
                        XElement parent = EditHelpers.XmlLinq.GetElement(root, parentNodeName, parentId);
                        if (parent != null)
                        {
                            sParentId = EditHelpers.XmlLinq.GetAttributeValue(parent, BUDGETSYSTEM_ID);
                            sParentName = EditHelpers.XmlLinq.GetAttributeValue(parent, BUDGETSYSTEM_NAME);
                            childEl.SetAttributeValue(BUDGETSYSTEM_ID, sParentId);
                            childEl.SetAttributeValue(BUDGETSYSTEM_NAME, sParentName);
                            sGrandParentId = EditHelpers.XmlLinq.GetAttributeValue(parent, Calculator.cTypeId);
                            sGrandParentName = EditHelpers.XmlLinq.GetAttributeValue(parent, Calculator.cTypeName);
                            childEl.SetAttributeValue(Calculator.cTypeId, sGrandParentId);
                            childEl.SetAttributeValue(Calculator.cTypeName, sGrandParentName);
                            bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                        }
                    }
                    else if (parentNodeName == BUDGET_TYPES.budgettimeperiod.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                    else if (parentNodeName == BUDGET_TYPES.budgetoutcome.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                    else if (parentNodeName == BUDGET_TYPES.budgetoutput.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                    else if (parentNodeName == BUDGET_TYPES.budgetoperation.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                    else if (parentNodeName == BUDGET_TYPES.budgetinput.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                }
            }
            return bIsAdded;
        }
        public static bool AddInvestmentElementToParent(XElement root, XElement childEl,
            string groupingElementName, string parentId, string parentNodeName,
            CostSystem costSystem)
        {
            bool bIsAdded = false;
            if (childEl != null)
            {
                bool bParentExists = EditHelpers.XmlLinq.DescendantExists(root, parentNodeName, parentId);
                if (bParentExists)
                {
                    string sParentId = string.Empty;
                    string sParentName = string.Empty;
                    string sGrandParentId = string.Empty;
                    string sGrandParentName = string.Empty;
                    if (parentNodeName == Agreement.AGREEMENT_BASE_TYPES.servicebase.ToString()
                        && costSystem.CostSystemType != null)
                    {
                        XElement parent = EditHelpers.XmlLinq.GetElement(root, parentNodeName, parentId);
                        if (parent != null)
                        {
                            sParentId = costSystem.CostSystemType.PKId.ToString();
                            sParentName = costSystem.CostSystemType.Name;
                            childEl.SetAttributeValue(Calculator.cTypeId, sParentId);
                            childEl.SetAttributeValue(Calculator.cTypeName, sParentName);
                            bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                        }
                    }
                    else if (parentNodeName == INVESTMENT_TYPES.investmentgroup.ToString())
                    {
                        XElement parent = EditHelpers.XmlLinq.GetElement(root, parentNodeName, parentId);
                        if (parent != null)
                        {
                            sParentId = EditHelpers.XmlLinq.GetAttributeValue(parent, AppHelpers.Calculator.cId);
                            sParentName = EditHelpers.XmlLinq.GetAttributeValue(parent, AppHelpers.Calculator.cName);
                            childEl.SetAttributeValue(INVESTMENTSYSTEM_ID, sParentId);
                            childEl.SetAttributeValue(INVESTMENTSYSTEM_NAME, sParentName);
                            sGrandParentId = EditHelpers.XmlLinq.GetAttributeValue(parent, Calculator.cTypeId);
                            sGrandParentName = EditHelpers.XmlLinq.GetAttributeValue(parent, Calculator.cTypeName);
                            childEl.SetAttributeValue(Calculator.cTypeId, sGrandParentId);
                            childEl.SetAttributeValue(Calculator.cTypeName, sGrandParentName);
                            bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                        }
                    }
                    else if (parentNodeName == INVESTMENT_TYPES.investment.ToString())
                    {
                        XElement parent = EditHelpers.XmlLinq.GetElement(root, parentNodeName, parentId);
                        if (parent != null)
                        {
                            sParentId = EditHelpers.XmlLinq.GetAttributeValue(parent, INVESTMENTSYSTEM_ID);
                            sParentName = EditHelpers.XmlLinq.GetAttributeValue(parent, INVESTMENTSYSTEM_NAME);
                            childEl.SetAttributeValue(INVESTMENTSYSTEM_ID, sParentId);
                            childEl.SetAttributeValue(INVESTMENTSYSTEM_NAME, sParentName);
                            sGrandParentId = EditHelpers.XmlLinq.GetAttributeValue(parent, Calculator.cTypeId);
                            sGrandParentName = EditHelpers.XmlLinq.GetAttributeValue(parent, Calculator.cTypeName);
                            childEl.SetAttributeValue(Calculator.cTypeId, sGrandParentId);
                            childEl.SetAttributeValue(Calculator.cTypeName, sGrandParentName);
                            bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                        }
                    }
                    else if (parentNodeName == INVESTMENT_TYPES.investmenttimeperiod.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                    else if (parentNodeName == INVESTMENT_TYPES.investmentoutcome.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                    else if (parentNodeName == INVESTMENT_TYPES.investmentoutput.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                    else if (parentNodeName == INVESTMENT_TYPES.investmentcomponent.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                    else if (parentNodeName == INVESTMENT_TYPES.investmentinput.ToString())
                    {
                        bIsAdded = EditHelpers.XmlLinq.AddElementToParent(root, childEl,
                                groupingElementName, parentId, parentNodeName);
                    }
                }
            }
            return bIsAdded;
        }
        public static string GetEconomics1QueryName(Helpers.GeneralHelpers.SUBAPPLICATION_TYPES
            subAppType, string currentNodeName)
        {
            string sQryName = string.Empty;
            if (subAppType == Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.budgets)
            {
                sQryName = "0GetBudgetXml";
            }
            else if (subAppType == Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.investments)
            {
                sQryName = "0GetInvestmentXml";
            }
            return sQryName;
        }
       
        public static string GetUpdateEconomics1QueryName(ContentURI uri)
        {
            string sQryName = string.Empty;
            if (uri.URIDataManager.SubAppType == 
                Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.budgets)
            {
                sQryName = "0UpdateBudgetXml";
            }
            else if (uri.URIDataManager.SubAppType == 
                Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.investments)
            {
                sQryName = "0UpdateInvestmentXml";
            }
            return sQryName;
        }
        public static void GetChildForeignKeyName(Helpers.GeneralHelpers.SUBAPPLICATION_TYPES subAppType,
           string parentNodeName, out string childForeignKeyName)
        {
            childForeignKeyName = string.Empty;
            switch (subAppType)
            {
                case Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.budgets:
                    if (parentNodeName == Agreement.AGREEMENT_BASE_TYPES.servicebase.ToString())
                    {
                        childForeignKeyName = Agreement.SERVICE_ID;
                    }
                    else if (parentNodeName == Economics1.BUDGET_TYPES.budgetgroup.ToString())
                    {
                        childForeignKeyName = "BudgetSystemId";
                    }
                    else if (parentNodeName == Economics1.BUDGET_TYPES.budget.ToString())
                    {
                        childForeignKeyName = "BudgetSystemToEnterpriseId";
                    }
                    else if (parentNodeName == Economics1.BUDGET_TYPES.budgettimeperiod.ToString())
                    {
                        childForeignKeyName = "BudgetSystemToTimeId";
                    }
                    else if (parentNodeName == Economics1.BUDGET_TYPES.budgetoutcome.ToString())
                    {
                        childForeignKeyName = "BudgetSystemToOutcomeId";
                    }
                    else if (parentNodeName == Economics1.BUDGET_TYPES.budgetoutput.ToString())
                    {
                        childForeignKeyName = string.Empty;
                    }
                    else if (parentNodeName == Economics1.BUDGET_TYPES.budgetoperation.ToString())
                    {
                        childForeignKeyName = "BudgetSystemToOperationId";
                    }
                    else if (parentNodeName == Economics1.BUDGET_TYPES.budgetinput.ToString())
                    {
                        childForeignKeyName = string.Empty;
                    }
                    break;
                case Helpers.GeneralHelpers.SUBAPPLICATION_TYPES.investments:
                    if (parentNodeName == Agreement.AGREEMENT_BASE_TYPES.servicebase.ToString())
                    {
                        childForeignKeyName = Agreement.SERVICE_ID;
                    }
                    else if (parentNodeName == Economics1.INVESTMENT_TYPES.investmentgroup.ToString())
                    {
                        childForeignKeyName = "CostSystemId";
                    }
                    else if (parentNodeName == Economics1.INVESTMENT_TYPES.investment.ToString())
                    {
                        childForeignKeyName = "CostSystemToPracticeId";
                    }
                    else if (parentNodeName == Economics1.INVESTMENT_TYPES.investmenttimeperiod.ToString())
                    {
                        childForeignKeyName = "CostSystemToTimeId";
                    }
                    else if (parentNodeName == Economics1.INVESTMENT_TYPES.investmentoutcome.ToString())
                    {
                        childForeignKeyName = "CostSystemToOutcomeId";
                    }
                    else if (parentNodeName == Economics1.INVESTMENT_TYPES.investmentoutput.ToString())
                    {
                        childForeignKeyName = string.Empty;
                    }
                    else if (parentNodeName == Economics1.INVESTMENT_TYPES.investmentcomponent.ToString())
                    {
                        childForeignKeyName = "CostSystemToComponentId";
                    }
                    else if (parentNodeName == Economics1.BUDGET_TYPES.budgetinput.ToString())
                    {
                        childForeignKeyName = string.Empty;
                    }
                    break;
                default:
                    break;
            }
        }
        public async Task<bool> SaveSummaryAndFullTotals(ContentURI docToCalcURI,
            ContentURI calcDocURI, IDictionary<string, string> childrenLinkedView)
        {
            bool bHasCompleted = false;
            //the full totals are saved temporarily in oDocToCalc.URIDataManager.TempDocPath (tempDocToCalcPath)
            //now save them in docToCalcURI paths
            //filenames change to include calcDocURIPattern.URIId and childrentLinkedView
            string sTotalsFilePath = docToCalcURI.URIDataManager.TempDocPath;
            if (await Helpers.FileStorageIO.URIAbsoluteExists(docToCalcURI,
                sTotalsFilePath))
            {
                if (docToCalcURI.URINodeName != BUDGET_TYPES.budgettimeperiod.ToString()
                    && docToCalcURI.URINodeName != INVESTMENT_TYPES.investmenttimeperiod.ToString())
                {
                    await LinkedViews.SaveTempDocTotalsToLinkedViewPathsAsync(docToCalcURI,
                        calcDocURI);
                }
                //if this is a not a time period node, need to break full docs down to summaries
                //and save both the full and summary docs
                //clients work strictly with the summaries (for performance)
                if (docToCalcURI.URINodeName != BUDGET_TYPES.budgettimeperiod.ToString()
                    && docToCalcURI.URINodeName != INVESTMENT_TYPES.investmenttimeperiod.ToString())
                {
                    //refactor: performance and memory can be increased by using the 
                    //techniques found in: help topic "How To Stream XmlFragments from an XmlReader
                    XmlDocument oDocToCalc = new XmlDocument();
                    XmlReader reader = await Helpers.FileStorageIO.GetXmlReaderAsync(
                        docToCalcURI, docToCalcURI.URIDataManager.TempDocPath);
                    if (reader != null)
                    {
                        using (reader)
                        {
                            oDocToCalc.Load(reader);
                        }
                        if (oDocToCalc.DocumentElement.HasChildNodes == true)
                        {
                            string sQry = EditHelpers.XmlIO.MakeXPathAbbreviatedQry(docToCalcURI.URINodeName,
                                Helpers.GeneralHelpers.AT_ID, docToCalcURI.URIId.ToString());
                            //the iterator is used to shallow clone nodes that make up the summary docs
                            XPathNodeIterator oTotalsGroupIterator = oDocToCalc.CreateNavigator().Select(sQry);
                            if (oTotalsGroupIterator != null)
                            {
                                if (oTotalsGroupIterator.Count > 0)
                                {
                                    //move to the iterator's top node 
                                    oTotalsGroupIterator.MoveNext();
                                    //start building the basic doc that will be used as the basis for all of the subsequent docs to be saved (cloning from the root)
                                    XmlDocument oBaseDoc = new XmlDocument();
                                    oBaseDoc.LoadXml(Helpers.GeneralHelpers.ROOT_NODE);
                                    if (docToCalcURI.URINodeName == BUDGET_TYPES.budget.ToString()
                                        || docToCalcURI.URINodeName == INVESTMENT_TYPES.investment.ToString())
                                    {
                                        //need the group node cloned to the base doc
                                        LinkedViews.CloneGroupNode(oDocToCalc, ref oBaseDoc);
                                    }
                                    //recursive method that saves the five needed docs in seven places for groups, less for budgets/investments/timeperiod
                                    //subsequent requests will be made to those places (i.e. totals are not saved in the db)
                                    bHasCompleted = await InitSaveTotals(docToCalcURI, calcDocURI, oTotalsGroupIterator, oBaseDoc,
                                        docToCalcURI.URIClub.ClubDocFullPath, childrenLinkedView);
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                docToCalcURI.ErrorMessage = Exceptions.DevTreksErrors.MakeStandardErrorMsg(
                   "", "ECONOMICS_NOTEMPFILE");
            }
            bHasCompleted = true;
            return bHasCompleted;
        }

        /// <summary>
        /// Build and save sub totals documents based on the group totals document sent in.
        /// </summary>
        private async Task<bool> InitSaveTotals(ContentURI docToCalcURI, ContentURI calcDocURI,
            XPathNodeIterator totalsNodeIterator, XmlDocument baseDoc,
            string directoryPath, IDictionary<string, string> childrenLinkedView)
        {
            bool bHasCompleted = false;
            if (totalsNodeIterator != null)
            {
                //create a navigator to navigate through children
                XPathNavigator oNavigator = totalsNodeIterator.Current.Clone();
                if (oNavigator.LocalName == Helpers.GeneralHelpers.ROOT_PATH)
                {
                    totalsNodeIterator.MoveNext();
                }
                //clone just the node (not the children) for the various documents
                XmlElement oDocElement = (XmlElement)((IHasXmlNode)totalsNodeIterator.Current).GetNode().CloneNode(false);
                AppHelpers.LinkedViews oLinkedView = new AppHelpers.LinkedViews();
                //save the summary docs
                oLinkedView.SaveSummaryDoc(docToCalcURI, calcDocURI,
                    oDocElement, baseDoc, oNavigator, directoryPath, childrenLinkedView);
                //the base doc has these shallow cloned elements added
                bool bIsDeepClone = false;
                EditHelpers.XmlIO.AppendNodeToLastDocNode(oDocElement, bIsDeepClone, 
                    baseDoc.FirstChild, ref baseDoc);
                //save the full docs
                await oLinkedView.SaveFullDoc(docToCalcURI, calcDocURI,
                    oDocElement, baseDoc, oNavigator, directoryPath, childrenLinkedView);
                //no summary docs needed for time period nodes 
                if (oNavigator.HasChildren == true
                    && oNavigator.LocalName != BUDGET_TYPES.budget.ToString()
                    && oNavigator.LocalName != INVESTMENT_TYPES.investment.ToString())
                {
                    XPathNodeIterator oChildrenIterator = oNavigator.SelectChildren(XPathNodeType.Element);
                    while (oChildrenIterator.MoveNext())
                    {
                        if (oChildrenIterator.Current.LocalName != Helpers.GeneralHelpers.ROOT_PATH)
                        {
                            //it's a subdirectory of directoryPath
                            string sId = oChildrenIterator.Current.GetAttribute(AppHelpers.Calculator.cId, string.Empty);
                            string sCurrentDirectoryName = string.Concat(oChildrenIterator.Current.LocalName,
                                Helpers.GeneralHelpers.FILENAME_DELIMITER, sId);
                            string sSubDirectoryPath = LinkedViews.GetCurrentDirectoryPath(directoryPath, sCurrentDirectoryName);
                            //recurse to the next node (round 2 is budget/investments; no round 3 needed
                            await InitSaveTotals(docToCalcURI, calcDocURI, oChildrenIterator,
                                baseDoc, sSubDirectoryPath, childrenLinkedView);
                            //at this point have a good series of time periods for one budget
                            //fix the base doc back to original state by removing that budget (so that next one can be added)
                            EditHelpers.XmlIO.RemoveLastNode(baseDoc.FirstChild, ref baseDoc);
                        }
                    }
                }
            }
            bHasCompleted = true;
            return bHasCompleted;
        }
	}
}
