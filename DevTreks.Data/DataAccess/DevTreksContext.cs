using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using DevTreks.Models;

namespace DevTreks.Data.DataAccess
{
    /// <summary>
    ///Purpose:		EF dbcontext and initial models generated by running the following with core1 
    ///Author:		www.devtreks.org
    ///Date:		2016, June
    ///References:	https://docs.efproject.net/en/latest/platforms/aspnetcore/existing-db.html
    /// </summary>
    public partial class DevTreksContext : DbContext
    {
        public DevTreksContext(
            DbContextOptions options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Account>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Account");

                entity.HasIndex(e => e.AccountClassId)
                    .HasName("ixAccountClassId");

                entity.HasIndex(e => e.GeoRegionId)
                    .HasName("ixAccountGeoRegionId");

                entity.Property(e => e.AccountClassId).HasDefaultValueSql("1");

                entity.Property(e => e.AccountDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs summary description'");

                entity.Property(e => e.AccountEmail)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'some.one@some.where'");

                entity.Property(e => e.AccountLongDesc)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.AccountName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.AccountURI)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("N'needs uri'");

                entity.Property(e => e.GeoRegionId).HasDefaultValueSql("1");

                entity.HasOne(d => d.AccountClass)
                    .WithMany(p => p.Account)
                    .HasForeignKey(d => d.AccountClassId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkAccountClassToAccount");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.Account)
                    .HasForeignKey(d => d.GeoRegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkGeoRegionToAccount");
            });

            modelBuilder.Entity<AccountClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_AccountClass");

                entity.Property(e => e.AccountClassDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.AccountClassName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.AccountClassNum)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");
            });

            modelBuilder.Entity<AccountToAddIn>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkAccountToAddIn");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToAccountLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToAccountAccountId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.AccountToAddIn)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToAccount");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountToAddIn)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkAccountToLinkedView");
            });

            modelBuilder.Entity<AccountToAudit>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_AccountToAudit");

                entity.HasIndex(e => e.AccountId)
                    .HasName("ixAccountToAuditAccountId");

                entity.Property(e => e.ClubInUseAuthorizationLevel)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.EditDate).HasColumnType("smalldatetime");

                entity.Property(e => e.EditedDocFullPath)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.EditedDocURI)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.MemberRole)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.ServerSubAction)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountToAudit)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fkAccountToAccountToAudit");
            });

            modelBuilder.Entity<AccountToCredit>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkAccountToCredit");

                entity.Property(e => e.CardEndMonth)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CardEndYear)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CardFullName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CardFullNumber)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.CardNumberSalt).HasMaxLength(128);

                entity.Property(e => e.CardShortNumber)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CardState)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CardType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountToCredit)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fkAccountToCredit");
            });

            modelBuilder.Entity<AccountToIncentive>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_AccountToIncentive");

                entity.HasOne(d => d.AccountToService)
                    .WithMany(p => p.AccountToIncentive)
                    .HasForeignKey(d => d.AccountToServiceId)
                    .HasConstraintName("fkAccountToIncentiveToAccountToService");

                entity.HasOne(d => d.Incentive)
                    .WithMany(p => p.AccountToIncentive)
                    .HasForeignKey(d => d.IncentiveId)
                    .HasConstraintName("fkAccountToIncentiveToIncentive");
            });

            modelBuilder.Entity<AccountToLocal>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkAccountToLocal");

                entity.HasIndex(e => e.AccountId)
                    .HasName("ixLinkedViewToLocalAccountId");

                entity.Property(e => e.AccountId).HasDefaultValueSql("1");

                entity.Property(e => e.CurrencyGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.CurrencyGroupId).HasDefaultValueSql("1");

                entity.Property(e => e.DataSourcePrice)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.DataSourcePriceId).HasDefaultValueSql("1");

                entity.Property(e => e.DataSourceTech)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.DataSourceTechId).HasDefaultValueSql("1");

                entity.Property(e => e.GeoCodePrice)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.GeoCodePriceId).HasDefaultValueSql("1");

                entity.Property(e => e.GeoCodeTech)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.GeoCodeTechId).HasDefaultValueSql("1");

                entity.Property(e => e.IsDefaultLinkedView).HasDefaultValueSql("0");

                entity.Property(e => e.LocalDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.LocalName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.NominalRate).HasDefaultValueSql("3.000");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.RatingGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.RatingGroupId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRate).HasDefaultValueSql("1.500");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.UnitGroup)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.UnitGroupId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountToLocal)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fkAccountToLocal");
            });

            modelBuilder.Entity<AccountToMember>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_AccountToMember");

                entity.HasIndex(e => e.AccountId)
                    .HasName("ixAccountToMemberAccountId");

                entity.HasIndex(e => e.MemberId)
                    .HasName("ixAccountToMemberMemberId");

                entity.Property(e => e.IsDefaultClub).HasDefaultValueSql("0");

                entity.Property(e => e.MemberRole)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'contributor'");

                entity.HasOne(d => d.ClubDefault)
                    .WithMany(p => p.AccountToMember)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fkAccount_AccountToMember");

                entity.HasOne(d => d.Member)
                    .WithMany(p => p.AccountToMember)
                    .HasForeignKey(d => d.MemberId)
                    .HasConstraintName("fkMember_AccountToMember");
            });

            modelBuilder.Entity<AccountToNetwork>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_AccountToNetwork");

                entity.HasIndex(e => e.AccountId)
                    .HasName("ixAccountToNetworkAccountId");

                entity.HasIndex(e => e.NetworkId)
                    .HasName("ixAccountToNetworkToNetworkId");

                entity.Property(e => e.DefaultGetDataFromType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'web'");

                entity.Property(e => e.DefaultStoreDataAtType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'web'");

                entity.Property(e => e.IsDefaultNetwork).HasDefaultValueSql("0");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("1");

                entity.Property(e => e.NetworkRole)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'contributor'");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountToNetwork)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fkAccountToNetworkToAccount");

                entity.HasOne(d => d.Network)
                    .WithMany(p => p.AccountToNetwork)
                    .HasForeignKey(d => d.NetworkId)
                    .HasConstraintName("fkAccountToNetworkToNetwork");
            });

            modelBuilder.Entity<AccountToPayment>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkAccountToPayment");

                entity.HasIndex(e => e.AccountToServiceId)
                    .HasName("ixAccountToPaymentServiceId");

                entity.Property(e => e.CreditDue).HasColumnType("money");

                entity.Property(e => e.CreditDueDate).HasColumnType("datetime");

                entity.Property(e => e.CreditPaid).HasColumnType("money");

                entity.Property(e => e.CreditPaidDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentDue).HasColumnType("money");

                entity.Property(e => e.PaymentDueDate).HasColumnType("datetime");

                entity.Property(e => e.PaymentPaid).HasColumnType("money");

                entity.Property(e => e.PaymentPaidDate).HasColumnType("datetime");

                entity.HasOne(d => d.AccountToService)
                    .WithMany(p => p.AccountToPayment)
                    .HasForeignKey(d => d.AccountToServiceId)
                    .HasConstraintName("fkAccountToServiceToAccountToPayment");
            });

            modelBuilder.Entity<AccountToService>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_AccountToService");

                entity.HasIndex(e => e.AccountId)
                    .HasName("ixAccountToServiceAccountId");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixAccountToServiceServiceId");

                entity.Property(e => e.AccountId).HasDefaultValueSql("1");

                entity.Property(e => e.Amount1).HasDefaultValueSql("1");

                entity.Property(e => e.AuthorizationLevel).HasDefaultValueSql("1");

                entity.Property(e => e.EndDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.IsOwner).HasDefaultValueSql("0");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.StartDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'received'");

                entity.Property(e => e.StatusDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountToService)
                    .HasForeignKey(d => d.AccountId)
                    .HasConstraintName("fkAccountToAccountToService");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.AccountToService)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("fkAccountToServiceToService");
            });
            //ASPNET Identity models are handled in the data folder in the web project
            //modelBuilder.Entity<AspNetRoleClaims>(entity =>
            //{
            //    entity.Property(e => e.RoleId)
            //        .IsRequired()
            //        .HasMaxLength(450);

            //    entity.HasOne(d => d.Role)
            //        .WithMany(p => p.AspNetRoleClaims)
            //        .HasForeignKey(d => d.RoleId)
            //        .HasConstraintName("FK_IdentityRoleClaim<string>_IdentityRole_RoleId");
            //});

            //modelBuilder.Entity<AspNetRoles>(entity =>
            //{
            //    entity.HasIndex(e => e.NormalizedName)
            //        .HasName("RoleNameIndex");

            //    entity.Property(e => e.Id).HasMaxLength(450);

            //    entity.Property(e => e.Name).HasMaxLength(256);

            //    entity.Property(e => e.NormalizedName).HasMaxLength(256);
            //});

            //modelBuilder.Entity<AspNetUserClaims>(entity =>
            //{
            //    entity.Property(e => e.UserId)
            //        .IsRequired()
            //        .HasMaxLength(450);

            //    entity.HasOne(d => d.User)
            //        .WithMany(p => p.AspNetUserClaims)
            //        .HasForeignKey(d => d.UserId)
            //        .HasConstraintName("FK_IdentityUserClaim<string>_ApplicationUser_UserId");
            //});

            //modelBuilder.Entity<AspNetUserLogins>(entity =>
            //{
            //    entity.HasKey(e => new { e.LoginProvider, e.ProviderKey })
            //        .HasName("PK_IdentityUserLogin<string>");

            //    entity.Property(e => e.LoginProvider).HasMaxLength(450);

            //    entity.Property(e => e.ProviderKey).HasMaxLength(450);

            //    entity.Property(e => e.UserId)
            //        .IsRequired()
            //        .HasMaxLength(450);

            //    entity.HasOne(d => d.User)
            //        .WithMany(p => p.AspNetUserLogins)
            //        .HasForeignKey(d => d.UserId)
            //        .HasConstraintName("FK_IdentityUserLogin<string>_ApplicationUser_UserId");
            //});

            //modelBuilder.Entity<AspNetUserRoles>(entity =>
            //{
            //    entity.HasKey(e => new { e.UserId, e.RoleId })
            //        .HasName("PK_IdentityUserRole<string>");

            //    entity.Property(e => e.UserId).HasMaxLength(450);

            //    entity.Property(e => e.RoleId).HasMaxLength(450);

            //    entity.HasOne(d => d.Role)
            //        .WithMany(p => p.AspNetUserRoles)
            //        .HasForeignKey(d => d.RoleId)
            //        .HasConstraintName("FK_IdentityUserRole<string>_IdentityRole_RoleId");

            //    entity.HasOne(d => d.User)
            //        .WithMany(p => p.AspNetUserRoles)
            //        .HasForeignKey(d => d.UserId)
            //        .HasConstraintName("FK_IdentityUserRole<string>_ApplicationUser_UserId");
            //});

            //modelBuilder.Entity<AspNetUsers>(entity =>
            //{
            //    entity.HasIndex(e => e.NormalizedEmail)
            //        .HasName("EmailIndex");

            //    entity.HasIndex(e => e.NormalizedUserName)
            //        .HasName("UserNameIndex");

            //    entity.Property(e => e.Id).HasMaxLength(450);

            //    entity.Property(e => e.Email).HasMaxLength(256);

            //    entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

            //    entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

            //    entity.Property(e => e.UserName).HasMaxLength(256);
            //});

            modelBuilder.Entity<BudgetSystem>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkBudgetSystem");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixBudgetSystemToServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixBudgetSystemToBudgetSystemTypeId");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(1)/(1))/(2009");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DocStatus).HasDefaultValueSql("4");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'no label'");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("200");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.BudgetSystem)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkServiceToBudgetSystem");

                entity.HasOne(d => d.BudgetSystemType)
                    .WithMany(p => p.BudgetSystem)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkBudgetSystemTypeToBudgetSystem");
            });

            modelBuilder.Entity<BudgetSystemToEnterprise>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkBudgetSystemToEnterprise");

                entity.HasIndex(e => e.BudgetSystemId)
                    .HasName("ixBudgetSystemToEnterprise_BudgetSystemId");

                entity.Property(e => e.BudgetSystemId).HasDefaultValueSql("1");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("3");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.InitialValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'no label'");

                entity.Property(e => e.Num2)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'n/a'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.BudgetSystem)
                    .WithMany(p => p.BudgetSystemToEnterprise)
                    .HasForeignKey(d => d.BudgetSystemId)
                    .HasConstraintName("fkBudgetSystemToBudgetSystemToEnterprise");
            });

            modelBuilder.Entity<BudgetSystemToInput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkBudgetSystemToInput");

                entity.HasIndex(e => e.BudgetSystemToOperationId)
                    .HasName("ixBudgetSystemToInput_BudgetSystemToOperationId");

                entity.HasIndex(e => e.InputId)
                    .HasName("ixBudgetSystemToInput_InputId");

                entity.Property(e => e.BudgetSystemToOperationId).HasDefaultValueSql("0");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.InputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.InputId).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice1)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice1Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice2Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice3Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputTimes).HasDefaultValueSql("0");

                entity.Property(e => e.InputUseAOHOnly).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.HasOne(d => d.BudgetSystemToOperation)
                    .WithMany(p => p.BudgetSystemToInput)
                    .HasForeignKey(d => d.BudgetSystemToOperationId)
                    .HasConstraintName("fkBudgetSystemToOperationToBudgetSystemToInput");

                entity.HasOne(d => d.InputSeries)
                    .WithMany(p => p.BudgetSystemToInput)
                    .HasForeignKey(d => d.InputId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkInputSeriesToBudgetSystemToInput");
            });

            modelBuilder.Entity<BudgetSystemToOperation>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkBudSysToOperation");

                entity.HasIndex(e => e.BudgetSystemToTimeId)
                    .HasName("ixBudSysToOperationToTimeId");

                entity.HasIndex(e => e.OperationId)
                    .HasName("ixBudSysToOperationOperationId");

                entity.Property(e => e.Amount).HasDefaultValueSql("0");

                entity.Property(e => e.BudgetSystemToTimeId).HasDefaultValueSql("0");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.EffectiveLife).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A10101'");

                entity.Property(e => e.OperationId).HasDefaultValueSql("0");

                entity.Property(e => e.ResourceWeight).HasDefaultValueSql("0");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'ac'");

                entity.HasOne(d => d.BudgetSystemToTime)
                    .WithMany(p => p.BudgetSystemToOperation)
                    .HasForeignKey(d => d.BudgetSystemToTimeId)
                    .HasConstraintName("fkBudgetSystemToTimeToBudgetSystemToOperation");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.BudgetSystemToOperation)
                    .HasForeignKey(d => d.OperationId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOperationToBudgetSystemToOperation");
            });

            modelBuilder.Entity<BudgetSystemToOutcome>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_BudgetSystemToOutcome");

                entity.HasIndex(e => e.BudgetSystemToTimeId)
                    .HasName("ixBudgetSystemToOutcomeToTimeId");

                entity.HasIndex(e => e.OutcomeId)
                    .HasName("ixBudgetSystemToOutcomeToOutcomeId");

                entity.Property(e => e.Amount).HasDefaultValueSql("0");

                entity.Property(e => e.BudgetSystemToTimeId).HasDefaultValueSql("0");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.EffectiveLife).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'no label'");

                entity.Property(e => e.OutcomeId).HasDefaultValueSql("0");

                entity.Property(e => e.ResourceWeight).HasDefaultValueSql("0");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'acre'");

                entity.HasOne(d => d.BudgetSystemToTime)
                    .WithMany(p => p.BudgetSystemToOutcome)
                    .HasForeignKey(d => d.BudgetSystemToTimeId)
                    .HasConstraintName("fkBudgetSystemToTimeToBudgetSystemToOutcome");

                entity.HasOne(d => d.Outcome)
                    .WithMany(p => p.BudgetSystemToOutcome)
                    .HasForeignKey(d => d.OutcomeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutcomeToBudgetSystemToOutcome");
            });

            modelBuilder.Entity<BudgetSystemToOutput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkBudgetSystemToOutput");

                entity.HasIndex(e => e.BudgetSystemToOutcomeId)
                    .HasName("ixBudgetSystemToOuput_BudgetSystemToOutcomeId");

                entity.HasIndex(e => e.OutputId)
                    .HasName("ixBudgetSystemToOutput_OutputId");

                entity.Property(e => e.BudgetSystemToOutcomeId).HasDefaultValueSql("0");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.OutputAmount1).HasDefaultValueSql("0");

                entity.Property(e => e.OutputCompositionAmount).HasDefaultValueSql("1");

                entity.Property(e => e.OutputCompositionUnit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'ac'");

                entity.Property(e => e.OutputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.OutputId).HasDefaultValueSql("0");

                entity.Property(e => e.OutputTimes).HasDefaultValueSql("1");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.HasOne(d => d.BudgetSystemToOutcome)
                    .WithMany(p => p.BudgetSystemToOutput)
                    .HasForeignKey(d => d.BudgetSystemToOutcomeId)
                    .HasConstraintName("fkBudgetSystemToOutcomeToBudgetSystemToOutput");

                entity.HasOne(d => d.OutputSeries)
                    .WithMany(p => p.BudgetSystemToOutput)
                    .HasForeignKey(d => d.OutputId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutputSeriesToBudgetSystemToOutput");
            });

            modelBuilder.Entity<BudgetSystemToTime>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkBudgetSystemToTime");

                entity.HasIndex(e => e.BudgetSystemToEnterpriseId)
                    .HasName("ixBudgetSystemToTime_BudgetSystemoEnterpriseId");

                entity.HasIndex(e => e.Date)
                    .HasName("ixBudgetSystemToTimeDate");

                entity.Property(e => e.AOHFactor).HasDefaultValueSql("1");

                entity.Property(e => e.BudgetSystemToEnterpriseId).HasDefaultValueSql("1");

                entity.Property(e => e.CommonRefYorN).HasDefaultValueSql("1");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DiscountYorN).HasDefaultValueSql("1");

                entity.Property(e => e.EnterpriseAmount).HasDefaultValueSql("1");

                entity.Property(e => e.EnterpriseName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'Enterprise 1'");

                entity.Property(e => e.EnterpriseUnit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.GrowthPeriods).HasDefaultValueSql("1");

                entity.Property(e => e.GrowthTypeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'Year 1'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'none'");

                entity.HasOne(d => d.BudgetSystemToEnterprise)
                    .WithMany(p => p.BudgetSystemToTime)
                    .HasForeignKey(d => d.BudgetSystemToEnterpriseId)
                    .HasConstraintName("fkBudgetSystemToEnterpriseToBudgetSystemToTime");
            });

            modelBuilder.Entity<BudgetSystemType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkBudgetSystemType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Component>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkComponent");

                entity.HasIndex(e => e.ComponentClassId)
                    .HasName("ixComponentComponentClassId");

                entity.Property(e => e.Amount).HasDefaultValueSql("1.0");

                entity.Property(e => e.ComponentClassId).HasDefaultValueSql("1");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("1");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.EffectiveLife).HasDefaultValueSql("1");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'no label'");

                entity.Property(e => e.Num2)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'no label'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.ResourceWeight).HasDefaultValueSql("1.0");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'each'");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.ComponentClass)
                    .WithMany(p => p.Component)
                    .HasForeignKey(d => d.ComponentClassId)
                    .HasConstraintName("fkComponentToComponentClass");
            });

            modelBuilder.Entity<ComponentClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkComponentClass");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixComponentClassToServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixComponentClassToComponentTypeId");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DocStatus).HasDefaultValueSql("4");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A10'");

                entity.Property(e => e.PriceListYorN).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("1");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ComponentClass)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkComponentClassToService");

                entity.HasOne(d => d.ComponentType)
                    .WithMany(p => p.ComponentClass)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkComponentTypeToComponentClass");
            });

            modelBuilder.Entity<ComponentToInput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkComponentToInput");

                entity.HasIndex(e => e.ComponentId)
                    .HasName("ixComponentToInputComponentId");

                entity.HasIndex(e => e.InputId)
                    .HasName("ixComponentToInputInputId");

                entity.Property(e => e.ComponentId).HasDefaultValueSql("1");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.InputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.InputId).HasDefaultValueSql("1");

                entity.Property(e => e.InputPrice1Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice2Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice3Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputTimes).HasDefaultValueSql("1");

                entity.Property(e => e.InputUseAOHOnly).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'default'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Component)
                    .WithMany(p => p.ComponentToInput)
                    .HasForeignKey(d => d.ComponentId)
                    .HasConstraintName("fkComponentToInputToComponent");

                entity.HasOne(d => d.InputSeries)
                    .WithMany(p => p.ComponentToInput)
                    .HasForeignKey(d => d.InputId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkInputSeriesToComponentToInput");
            });

            modelBuilder.Entity<ComponentType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_ComponentType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<CostSystem>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkCostSystem");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixCostSystemToServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixCostSystemCostSystemTypeId");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(1)/(1))/(2003");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DocStatus).HasDefaultValueSql("4");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'no label'");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("300");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.CostSystem)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkServiceToCostSystem");

                entity.HasOne(d => d.CostSystemType)
                    .WithMany(p => p.CostSystem)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkCostSystemTypeToCostSystem");
            });

            modelBuilder.Entity<CostSystemToComponent>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkCostSystemToComponent");

                entity.HasIndex(e => e.ComponentId)
                    .HasName("ixCostSystemToComponent_ComponentId");

                entity.HasIndex(e => e.CostSystemToTimeId)
                    .HasName("ixCostSystemToComponent_CostSystemToTimeId");

                entity.Property(e => e.Amount).HasDefaultValueSql("0");

                entity.Property(e => e.ComponentId).HasDefaultValueSql("0");

                entity.Property(e => e.CostSystemToTimeId).HasDefaultValueSql("0");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.EffectiveLife).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A10101'");

                entity.Property(e => e.ResourceWeight).HasDefaultValueSql("0");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'ac'");

                entity.HasOne(d => d.Component)
                    .WithMany(p => p.CostSystemToComponent)
                    .HasForeignKey(d => d.ComponentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkComponentToCostSystemToComponent");

                entity.HasOne(d => d.CostSystemToTime)
                    .WithMany(p => p.CostSystemToComponent)
                    .HasForeignKey(d => d.CostSystemToTimeId)
                    .HasConstraintName("fkCostSystemToTimeToCostSystemToComponent");
            });

            modelBuilder.Entity<CostSystemToInput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkCostSystemToInput");

                entity.HasIndex(e => e.CostSystemToComponentId)
                    .HasName("ixCostSystemToInput_CostSystemToComponentId");

                entity.HasIndex(e => e.InputId)
                    .HasName("ixCostSystemToInput_InputId");

                entity.Property(e => e.CostSystemToComponentId).HasDefaultValueSql("0");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.InputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.InputId).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice1Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice2Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice3Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputTimes).HasDefaultValueSql("1");

                entity.Property(e => e.InputUseAOHOnly).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.HasOne(d => d.CostSystemToComponent)
                    .WithMany(p => p.CostSystemToInput)
                    .HasForeignKey(d => d.CostSystemToComponentId)
                    .HasConstraintName("fkCostSystemToComponentToCostSystemToInput");

                entity.HasOne(d => d.InputSeries)
                    .WithMany(p => p.CostSystemToInput)
                    .HasForeignKey(d => d.InputId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkInputSeriesToCostSystemToInput");
            });

            modelBuilder.Entity<CostSystemToOutcome>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_CostSystemToOutcome");

                entity.HasIndex(e => e.CostSystemToTimeId)
                    .HasName("ixCostSystemToOutcomeToTimeId");

                entity.HasIndex(e => e.OutcomeId)
                    .HasName("ixCostSystemToOutcomeToOutcomeId");

                entity.Property(e => e.Amount).HasDefaultValueSql("1");

                entity.Property(e => e.CostSystemToTimeId).HasDefaultValueSql("0");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.EffectiveLife).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.OutcomeId).HasDefaultValueSql("0");

                entity.Property(e => e.ResourceWeight).HasDefaultValueSql("0");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'acre'");

                entity.HasOne(d => d.CostSystemToTime)
                    .WithMany(p => p.CostSystemToOutcome)
                    .HasForeignKey(d => d.CostSystemToTimeId)
                    .HasConstraintName("fkCostSystemToTimeToCostSystemToOutcome");

                entity.HasOne(d => d.Outcome)
                    .WithMany(p => p.CostSystemToOutcome)
                    .HasForeignKey(d => d.OutcomeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutcomeToCostSystemToOutcome");
            });

            modelBuilder.Entity<CostSystemToOutput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkCostSystemToOutput");

                entity.HasIndex(e => e.CostSystemToOutcomeId)
                    .HasName("ixCostSystemToOuput_CostSystemToOutcomeId");

                entity.HasIndex(e => e.OutputId)
                    .HasName("ixCostSystemToOutput_OutputId");

                entity.Property(e => e.CostSystemToOutcomeId).HasDefaultValueSql("0");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.OutputAmount1).HasDefaultValueSql("0");

                entity.Property(e => e.OutputCompositionAmount).HasDefaultValueSql("1");

                entity.Property(e => e.OutputCompositionUnit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'ac'");

                entity.Property(e => e.OutputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.OutputId).HasDefaultValueSql("0");

                entity.Property(e => e.OutputTimes).HasDefaultValueSql("1");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.HasOne(d => d.CostSystemToOutcome)
                    .WithMany(p => p.CostSystemToOutput)
                    .HasForeignKey(d => d.CostSystemToOutcomeId)
                    .HasConstraintName("fkCostSystemToOutcomeToCostSystemToOutput");

                entity.HasOne(d => d.OutputSeries)
                    .WithMany(p => p.CostSystemToOutput)
                    .HasForeignKey(d => d.OutputId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutputSeriesToCostSystemToOutput");
            });

            modelBuilder.Entity<CostSystemToPractice>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkCostSysToPractice");

                entity.HasIndex(e => e.CostSystemId)
                    .HasName("ixCostSystemToPracticeToCostSystemId");

                entity.Property(e => e.CostSystemId).HasDefaultValueSql("1");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("3");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.InitialValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'no label'");

                entity.Property(e => e.Num2)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'n/a'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.CostSystem)
                    .WithMany(p => p.CostSystemToPractice)
                    .HasForeignKey(d => d.CostSystemId)
                    .HasConstraintName("fkCostSystemToCostSystemToPractice");
            });

            modelBuilder.Entity<CostSystemToTime>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkCostSystemToTime");

                entity.HasIndex(e => e.CostSystemToPracticeId)
                    .HasName("ixCostSystemToTimeToCostSystemToPracticeId");

                entity.HasIndex(e => e.Date)
                    .HasName("ixCostSystemToTimeDate");

                entity.Property(e => e.AOHFactor).HasDefaultValueSql("1");

                entity.Property(e => e.CommonRefYorN).HasDefaultValueSql("1");

                entity.Property(e => e.CostSystemToPracticeId).HasDefaultValueSql("1");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DiscountYorN).HasDefaultValueSql("1");

                entity.Property(e => e.GrowthPeriods).HasDefaultValueSql("1");

                entity.Property(e => e.GrowthTypeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'Year 1'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.PracticeAmount).HasDefaultValueSql("1");

                entity.Property(e => e.PracticeName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'Enterprise1'");

                entity.Property(e => e.PracticeUnit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'none'");

                entity.HasOne(d => d.CostSystemToPractice)
                    .WithMany(p => p.CostSystemToTime)
                    .HasForeignKey(d => d.CostSystemToPracticeId)
                    .HasConstraintName("fkCostSystemToPracticeToCostSystemToTime");
            });

            modelBuilder.Entity<CostSystemType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkCostSystemType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Currency");

                entity.HasIndex(e => e.CurrencyClassId)
                    .HasName("IX_CurrencyClassId");

                entity.Property(e => e.CurrencyDate).HasColumnType("datetime");

                entity.HasOne(d => d.CurrencyClass)
                    .WithMany(p => p.Currency)
                    .HasForeignKey(d => d.CurrencyClassId)
                    .HasConstraintName("FK_Currency_CurrencyClass");
            });

            modelBuilder.Entity<CurrencyClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_CurrencyClass");

                entity.Property(e => e.CurrencyClassAbbrev)
                    .IsRequired()
                    .HasMaxLength(25);

                entity.Property(e => e.CurrencyClassDesc)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.CurrencyClassName)
                    .IsRequired()
                    .HasMaxLength(150);
            });

            modelBuilder.Entity<CurrencyConversion>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_CurrencyConversion");

                entity.HasIndex(e => e.Currency1Id)
                    .HasName("IX_Currency1Id");

                entity.Property(e => e.CurrencyFromName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.CurrencyToName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.Currency1)
                    .WithMany(p => p.CurrencyConversion)
                    .HasForeignKey(d => d.Currency1Id)
                    .HasConstraintName("FK_CurrencyConversion_Currency");
            });

            modelBuilder.Entity<DataSourcePrice>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkDataSourcePrice");

                entity.HasIndex(e => e.GeoCodeId)
                    .HasName("ixDataSourcePriceGeoCodeId");

                entity.Property(e => e.AccountId).HasDefaultValueSql("1");

                entity.Property(e => e.DSPriceDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'no description'");

                entity.Property(e => e.DSPriceName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.DSPriceURL)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'no url'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");
            });

            modelBuilder.Entity<DataSourceTech>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkDataSourceTech");

                entity.HasIndex(e => e.GeoCodeId)
                    .HasName("ixDataSourceTechGeoCodeId");

                entity.Property(e => e.AccountId).HasDefaultValueSql("1");

                entity.Property(e => e.DSTechDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'no description'");

                entity.Property(e => e.DSTechName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.DSTechURL)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'no url'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");
            });

            modelBuilder.Entity<DevPack>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_DevPack");

                entity.Property(e => e.DevPackDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DevPackDocStatus).HasDefaultValueSql("1");

                entity.Property(e => e.DevPackKeywords)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs keywords'");

                entity.Property(e => e.DevPackLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.DevPackMetaDataXml).HasColumnType("xml");

                entity.Property(e => e.DevPackName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.DevPackNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'needs label'");
            });

            modelBuilder.Entity<DevPackClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_DevPackClass");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixServiceToDevPackClass");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixDevPackTypeToDevPackClass");

                entity.Property(e => e.DevPackClassDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DevPackClassName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.DevPackClassNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("1");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.DevPackClass)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkServiceToDevPackClass");

                entity.HasOne(d => d.DevPackType)
                    .WithMany(p => p.DevPackClass)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkDevPackTypeToDevPackClass");
            });

            modelBuilder.Entity<DevPackClassToDevPack>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_DevPackClassToDevPack");

                entity.HasIndex(e => e.DevPackClassId)
                    .HasName("ixDevPackClassId");

                entity.HasIndex(e => e.DevPackId)
                    .HasName("ixDevPackId");

                entity.HasIndex(e => e.ParentId)
                    .HasName("ixDevPackClassToDevPackParentId");

                entity.Property(e => e.DevPackClassAndPackDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'description'");

                entity.Property(e => e.DevPackClassAndPackFileExtensionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.DevPackClassAndPackName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'name'");

                entity.Property(e => e.DevPackClassAndPackSortLabel)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'label'");

                entity.Property(e => e.DevPackClassId).HasDefaultValueSql("1");

                entity.Property(e => e.DevPackId).HasDefaultValueSql("1");

                entity.HasOne(d => d.DevPackClass)
                    .WithMany(p => p.DevPackClassToDevPack)
                    .HasForeignKey(d => d.DevPackClassId)
                    .HasConstraintName("fkDevPackClassToDevPackClassToDevPack");

                entity.HasOne(d => d.DevPack)
                    .WithMany(p => p.DevPackClassToDevPack)
                    .HasForeignKey(d => d.DevPackId)
                    .HasConstraintName("fkDevPackToDevPackClassToDevPack");

                entity.HasOne(d => d.DevPackClassToDevPack2)
                    .WithMany(p => p.DevPackClassToDevPack1)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("fkDevPackClassToDevPackToSelf");
            });

            modelBuilder.Entity<DevPackPart>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_DevPackPart");

                entity.Property(e => e.DevPackPartDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DevPackPartFileName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'no file on hand'");

                entity.Property(e => e.DevPackPartKeywords)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs keywords'");

                entity.Property(e => e.DevPackPartLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.DevPackPartName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.DevPackPartNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'a'");

                entity.Property(e => e.DevPackPartVirtualURIPattern)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.DevPackPartXmlDoc).HasColumnType("xml");
            });

            modelBuilder.Entity<DevPackPartToResourcePack>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_DevPackPartToResourcePack");

                entity.HasIndex(e => e.DevPackToDevPackPartId)
                    .HasName("ixDevPackToDevPackPartId");

                entity.HasIndex(e => e.ResourcePackId)
                    .HasName("ixResourcePackId");

                entity.Property(e => e.SortLabel)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'needs label'");

                entity.HasOne(d => d.DevPackToDevPackPart)
                    .WithMany(p => p.DevPackPartToResourcePack)
                    .HasForeignKey(d => d.DevPackToDevPackPartId)
                    .HasConstraintName("fkDevPackToDevPackPartToDevPackPartToResourcePack");

                entity.HasOne(d => d.ResourcePack)
                    .WithMany(p => p.DevPackPartToResourcePack)
                    .HasForeignKey(d => d.ResourcePackId)
                    .HasConstraintName("fkDevPackPartToResourcePackToResourcePack");
            });

            modelBuilder.Entity<DevPackToDevPackPart>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_DevPackPartToDevDocPack");

                entity.HasIndex(e => e.DevPackClassToDevPackId)
                    .HasName("ixDevPackClassToDevPackId");

                entity.HasIndex(e => e.DevPackPartId)
                    .HasName("ixDevPackPartId");

                entity.Property(e => e.DevPackToDevPackPartDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DevPackToDevPackPartFileExtensionType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.DevPackToDevPackPartName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.DevPackToDevPackPartSortLabel)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'sort label'");

                entity.HasOne(d => d.DevPackClassToDevPack)
                    .WithMany(p => p.DevPackToDevPackPart)
                    .HasForeignKey(d => d.DevPackClassToDevPackId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fkDevPackClassToDevPackToDevPackToDevPackPart");

                entity.HasOne(d => d.DevPackPart)
                    .WithMany(p => p.DevPackToDevPackPart)
                    .HasForeignKey(d => d.DevPackPartId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("fkDevPackPartToDevPackPartToDevDocs");
            });

            modelBuilder.Entity<DevPackType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_DevPackType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<GeoCodes>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("IX_GeoCodes_PKId");

                entity.HasIndex(e => e.ParentId)
                    .HasName("IX_GeoCodes_ParentId");

                entity.Property(e => e.PKId).ValueGeneratedNever();

                entity.Property(e => e.GeoCodeNameId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'A'");

                entity.Property(e => e.GeoCodeParentNameId)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'A'");

                entity.Property(e => e.GeoDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'Default'");

                entity.Property(e => e.GeoName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("N'Default'");

                entity.Property(e => e.NodeType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("'node'");

                entity.Property(e => e.ParentId).HasDefaultValueSql("1");

                entity.Property(e => e.TocParentPath)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'tocPath-0'");

                entity.Property(e => e.TocPath)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'tocPath-0'");

                entity.Property(e => e.URI)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("N'http://default'");

                entity.HasOne(d => d.GeoCode1)
                    .WithMany(p => p.GeoCodes1)
                    .HasForeignKey(d => d.ParentId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("FK_GeoCodes_GeoCodes");
            });

            modelBuilder.Entity<GeoRegion>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_GeoRegion");

                entity.Property(e => e.GeoRegionDesc)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.GeoRegionName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.GeoRegionNum)
                    .IsRequired()
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<Incentive>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Incentive");

                entity.Property(e => e.IncentiveAmount1)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveClassId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'description'");

                entity.Property(e => e.IncentiveName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("N'name'");

                entity.Property(e => e.IncentiveNum)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'label'");

                entity.Property(e => e.IncentiveRate1).HasDefaultValueSql("1");

                entity.HasOne(d => d.IncentiveClass)
                    .WithMany(p => p.Incentive)
                    .HasForeignKey(d => d.IncentiveClassId)
                    .HasConstraintName("FK_Incentive_IncentiveClass");
            });

            modelBuilder.Entity<IncentiveClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_IncentiveClass");

                entity.Property(e => e.IncentiveClassDesc)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.IncentiveClassName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.IncentiveClassNum)
                    .IsRequired()
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<Input>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkInput");

                entity.HasIndex(e => e.InputClassId)
                    .HasName("ixInputInputClassId");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("3");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.InputClassId).HasDefaultValueSql("1");

                entity.Property(e => e.InputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.InputLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.InputPrice1)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice1Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice2)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice3)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InputUnit1)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no unit'");

                entity.Property(e => e.InputUnit2)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no unit'");

                entity.Property(e => e.InputUnit3)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'each'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.InputClass)
                    .WithMany(p => p.Input)
                    .HasForeignKey(d => d.InputClassId)
                    .HasConstraintName("fkInputClassToInput");
            });

            modelBuilder.Entity<InputClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkInputClass");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixInputClassToServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixInputClassInputClassTypeId");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DocStatus).HasDefaultValueSql("4");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A10'");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("1");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.InputClass)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkInputClassToService");

                entity.HasOne(d => d.InputType)
                    .WithMany(p => p.InputClass)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkInputTypeToInputClass");
            });

            modelBuilder.Entity<InputSeries>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkInputTimeSeries");

                entity.HasIndex(e => e.InputId)
                    .HasName("ixInputTimeSeriesInputId");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("1");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.InputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(12)-(31))-(2002");

                entity.Property(e => e.InputId).HasDefaultValueSql("1");

                entity.Property(e => e.InputLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.InputPrice1)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice1Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice2)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice3)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.InputUnit1)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.InputUnit2)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.InputUnit3)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Input)
                    .WithMany(p => p.InputSeries)
                    .HasForeignKey(d => d.InputId)
                    .HasConstraintName("fkInputToInputTimeSeries");
            });

            modelBuilder.Entity<InputType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("unInputType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<LinkedView>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedView");

                entity.HasIndex(e => e.LinkedViewPackId)
                    .HasName("ixLinkedViewLinkedViewPackId");

                entity.Property(e => e.LinkedViewAddInHostName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.LinkedViewAddInName)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.LinkedViewDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'needs description'");

                entity.Property(e => e.LinkedViewFileExtensionType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.LinkedViewFileName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.LinkedViewLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'needs name'");

                entity.Property(e => e.LinkedViewNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.LinkedViewXml).HasColumnType("xml");

                entity.HasOne(d => d.LinkedViewPack)
                    .WithMany(p => p.LinkedView)
                    .HasForeignKey(d => d.LinkedViewPackId)
                    .HasConstraintName("fkLinkedViewPackToLinkedView");
            });

            modelBuilder.Entity<LinkedViewClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewClass");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixLinkedViewClassServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixLinkedViewClassLinkedViewTypeId");

                entity.Property(e => e.LinkedViewClassDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'needs description'");

                entity.Property(e => e.LinkedViewClassName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'needs name'");

                entity.Property(e => e.LinkedViewClassNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("'none'");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.LinkedViewClass)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkServiceToLinkedViewClass");

                entity.HasOne(d => d.LinkedViewType)
                    .WithMany(p => p.LinkedViewClass)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("fkLinkedViewTypeToLinkedViewClass");
            });

            modelBuilder.Entity<LinkedViewPack>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewPack");

                entity.HasIndex(e => e.LinkedViewClassId)
                    .HasName("ixLinkedViewPackLinkedViewClassId");

                entity.Property(e => e.LinkedViewPackDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'needs description'");

                entity.Property(e => e.LinkedViewPackDocStatus).HasDefaultValueSql("1");

                entity.Property(e => e.LinkedViewPackKeywords)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'needs keywords'");

                entity.Property(e => e.LinkedViewPackLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.LinkedViewPackMetaDataXml).HasColumnType("xml");

                entity.Property(e => e.LinkedViewPackName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'needs name'");

                entity.Property(e => e.LinkedViewPackNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("'none'");

                entity.HasOne(d => d.LinkedViewClass)
                    .WithMany(p => p.LinkedViewPack)
                    .HasForeignKey(d => d.LinkedViewClassId)
                    .HasConstraintName("fkLinkedViewClassToLinkedViewPack");
            });

            modelBuilder.Entity<LinkedViewToBudgetSystem>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToBudgetSystem");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToBudgetSystemLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToBudgetSystemBudgetSystemId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToBudgetSystem)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToBudgetSystem");

                entity.HasOne(d => d.BudgetSystem)
                    .WithMany(p => p.LinkedViewToBudgetSystem)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkBudgetSystemToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToBudgetSystemToEnterprise>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToBudgetSystemToEnterprise");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToBudgetSystemToEnterpriseLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToBudgetSystemToEnterpriseBudgetSystemToEnterpriseId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToBudgetSystemToEnterprise)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToBudgetSystemToEnterprise");

                entity.HasOne(d => d.BudgetSystemToEnterprise)
                    .WithMany(p => p.LinkedViewToBudgetSystemToEnterprise)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkBudgetSystemToEnterpriseToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToBudgetSystemToTime>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToBudgetSystemToTime");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToBudgetSystemToTimeLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToBudgetSystemToTimeBudgetSystemToTimeId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToBudgetSystemToTime)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToBudgetSystemToTime");

                entity.HasOne(d => d.BudgetSystemToTime)
                    .WithMany(p => p.LinkedViewToBudgetSystemToTime)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkBudgetSystemToTimeToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToComponent>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToComponent");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToComponentLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToComponentComponentId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToComponent)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToComponent");

                entity.HasOne(d => d.Component)
                    .WithMany(p => p.LinkedViewToComponent)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkComponentToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToComponentClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToComponentClass");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToComponentClassLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToComponentClassComponentClassId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToComponentClass)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToComponentClass");

                entity.HasOne(d => d.ComponentClass)
                    .WithMany(p => p.LinkedViewToComponentClass)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkComponentClassToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToCostSystem>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToCostSystem");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToCostSystemLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToCostSystemCostSystemId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToCostSystem)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToCostSystem");

                entity.HasOne(d => d.CostSystem)
                    .WithMany(p => p.LinkedViewToCostSystem)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkCostSystemToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToCostSystemToPractice>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToCostSystemToPractice");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToCostSystemToPracticeLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToCostSystemToPracticeCostSystemToPracticeId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToCostSystemToPractice)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToCostSystemToPractice");

                entity.HasOne(d => d.CostSystemToPractice)
                    .WithMany(p => p.LinkedViewToCostSystemToPractice)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkCostSystemToPracticeToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToCostSystemToTime>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToCostSystemToTime");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToCostSystemToTimeLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToCostSystemToTimeCostSystemToTimeId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToCostSystemToTime)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToCostSystemToTime");

                entity.HasOne(d => d.CostSystemToTime)
                    .WithMany(p => p.LinkedViewToCostSystemToTime)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkCostSystemToTimeToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToDevPackJoin>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToDevPackJoin");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToDevPackJoinLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToDevPackJoinDevPackJoinId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToDevPackJoin)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToDevPackJoin");

                entity.HasOne(d => d.DevPackClassToDevPack)
                    .WithMany(p => p.LinkedViewToDevPackJoin)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkDevPackJoinToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToDevPackPartJoin>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToDevPackPartJoin");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToDevPackPartJoinLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToDevPackPartJoinDevPackPartJoinId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToDevPackPartJoin)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToDevPackPartJoin");

                entity.HasOne(d => d.DevPackToDevPackPart)
                    .WithMany(p => p.LinkedViewToDevPackPartJoin)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkDevPackPartJoinToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToInput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToInput");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToInputLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToInputInputId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToInput)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToInput");

                entity.HasOne(d => d.Input)
                    .WithMany(p => p.LinkedViewToInput)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkInputToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToInputClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToInputClass");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToInputClassLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToInputClassInputClassId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToInputClass)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToInputClass");

                entity.HasOne(d => d.InputClass)
                    .WithMany(p => p.LinkedViewToInputClass)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkInputClassToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToInputSeries>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToInputSeries");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToInputSeriesLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToInputSeriesInputSeriesId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToInputSeries)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToInputSeries");

                entity.HasOne(d => d.InputSeries)
                    .WithMany(p => p.LinkedViewToInputSeries)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkInputSeriesToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToOperation>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToOperation");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToOperationLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToOperationOperationId");

                entity.Property(e => e.IsDefaultLinkedView).HasDefaultValueSql("0");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToOperation)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToOperation");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.LinkedViewToOperation)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkOperationToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToOperationClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToOperationClass");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToOperationClassLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToOperationClassOperationClassId");

                entity.Property(e => e.IsDefaultLinkedView).HasDefaultValueSql("0");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToOperationClass)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToOperationClass");

                entity.HasOne(d => d.OperationClass)
                    .WithMany(p => p.LinkedViewToOperationClass)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkOperationClassToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToOutcome>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_LinkedViewToOutcome");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToOutcomeToLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToOutcomeToLinkingNodeId");

                entity.Property(e => e.IsDefaultLinkedView).HasDefaultValueSql("0");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToOutcome)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToOutcome");

                entity.HasOne(d => d.Outcome)
                    .WithMany(p => p.LinkedViewToOutcome)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkOutcomeToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToOutcomeClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_LinkedViewToOutcomeClass");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToOutcomeClassToLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToOutcomeClassToLinkingNodeId");

                entity.Property(e => e.IsDefaultLinkedView).HasDefaultValueSql("0");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToOutcomeClass)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToOutcomeClass");

                entity.HasOne(d => d.OutcomeClass)
                    .WithMany(p => p.LinkedViewToOutcomeClass)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutcomeClassToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToOutput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToOutput");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToOutputLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToOutputOutputId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToOutput)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToOutput");

                entity.HasOne(d => d.Output)
                    .WithMany(p => p.LinkedViewToOutput)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkOutputToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToOutputClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToOutputClass");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToOutputClassLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToOutputClassOutputClassId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToOutputClass)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToOutputClass");

                entity.HasOne(d => d.OutputClass)
                    .WithMany(p => p.LinkedViewToOutputClass)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkOutputClassToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToOutputSeries>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToOutputSeries");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToOutputSeriesLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToOutputSeriesOutputSeriesId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToOutputSeries)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToOutputSeries");

                entity.HasOne(d => d.OutputSeries)
                    .WithMany(p => p.LinkedViewToOutputSeries)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkOutputSeriesToLinkedView");
            });

            modelBuilder.Entity<LinkedViewToResource>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_LinkedViewToResource");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToResourceLinkedViewId");

                entity.HasIndex(e => e.LinkingNodeId)
                    .HasName("ixLinkedViewToResourceLinkingNodeId");

                entity.Property(e => e.LinkedViewName)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.LinkingXmlDoc).HasColumnType("xml");

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToResource)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToResourceToLinkedView");

                entity.HasOne(d => d.Resource)
                    .WithMany(p => p.LinkedViewToResource)
                    .HasForeignKey(d => d.LinkingNodeId)
                    .HasConstraintName("fkLinkedViewToResourceToResource");
            });

            modelBuilder.Entity<LinkedViewToResourcePack>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkLinkedViewToResourcePack");

                entity.HasIndex(e => e.LinkedViewId)
                    .HasName("ixLinkedViewToResourcePackLinkedViewId");

                entity.HasIndex(e => e.ResourcePackId)
                    .HasName("ixLinkedViewToResourcePackResourcePackId");

                entity.Property(e => e.SortLabel)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.LinkedView)
                    .WithMany(p => p.LinkedViewToResourcePack)
                    .HasForeignKey(d => d.LinkedViewId)
                    .HasConstraintName("fkLinkedViewToLinkedViewToResourcePack");

                entity.HasOne(d => d.ResourcePack)
                    .WithMany(p => p.LinkedViewToResourcePack)
                    .HasForeignKey(d => d.ResourcePackId)
                    .HasConstraintName("fkResourcePackToLinkedViewToResourcePack");
            });

            modelBuilder.Entity<LinkedViewType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_LinkedViewType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("'none'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'needs name'");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Member>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Member");

                entity.HasIndex(e => e.GeoRegionId)
                    .HasName("ixMemberGeoRegionId");

                entity.HasIndex(e => e.MemberClassId)
                    .HasName("ixMemberMemberClassId");

                entity.Property(e => e.AspNetUserId)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.GeoRegionId).HasDefaultValueSql("1");

                entity.Property(e => e.MemberAddress1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'needs address'");

                entity.Property(e => e.MemberAddress2)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.MemberCity)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'needs city'");

                entity.Property(e => e.MemberClassId).HasDefaultValueSql("1");

                entity.Property(e => e.MemberCountry)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'needs country'");

                entity.Property(e => e.MemberDesc)
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.MemberEmail)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("'needs email'");

                entity.Property(e => e.MemberFax)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.MemberFirstName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.MemberJoinedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.MemberLastChangedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.MemberLastName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs last name'");

                entity.Property(e => e.MemberOrganization)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.MemberPhone)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'needs phone'");

                entity.Property(e => e.MemberPhone2)
                    .IsRequired()
                    .HasMaxLength(16)
                    .HasDefaultValueSql("N'needs mobile'");

                entity.Property(e => e.MemberState)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'needs state'");

                entity.Property(e => e.MemberUrl)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.MemberZip)
                    .IsRequired()
                    .HasMaxLength(10)
                    .HasDefaultValueSql("N'needs zip'");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(128)
                    .HasDefaultValueSql("'needs user name'");

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.Member)
                    .HasForeignKey(d => d.GeoRegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkGeoRegionToMember");

                entity.HasOne(d => d.MemberClass)
                    .WithMany(p => p.Member)
                    .HasForeignKey(d => d.MemberClassId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkMemberClassToMember");
            });

            modelBuilder.Entity<MemberClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_MemberClass");

                entity.Property(e => e.MemberClassDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.MemberClassName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.MemberClassNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'needs label'");
            });

            modelBuilder.Entity<Network>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Network");

                entity.HasIndex(e => e.GeoRegionId)
                    .HasName("ixNetworkGeoRegionId");

                entity.HasIndex(e => e.NetworkClassId)
                    .HasName("ixNetworkClassNetworkId");

                entity.Property(e => e.AdminConnection)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.GeoRegionId).HasDefaultValueSql("1");

                entity.Property(e => e.NetworkDesc)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.NetworkName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.NetworkURIPartName)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasDefaultValueSql("N'needsuripartname'");

                entity.Property(e => e.WebConnection)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.WebDbPath)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.WebFileSystemPath)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.HasOne(d => d.GeoRegion)
                    .WithMany(p => p.Network)
                    .HasForeignKey(d => d.GeoRegionId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkGeoRegionToNetwork");

                entity.HasOne(d => d.NetworkClass)
                    .WithMany(p => p.Network)
                    .HasForeignKey(d => d.NetworkClassId)
                    .HasConstraintName("fkNetworkToNetworkClass");
            });

            modelBuilder.Entity<NetworkClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_NetworkClass");

                entity.Property(e => e.NetworkClassControllerName)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs controller name'");

                entity.Property(e => e.NetworkClassDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.NetworkClassLabel)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.NetworkClassName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.NetworkClassUserLanguage)
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasDefaultValueSql("N'en-us'");
            });

            modelBuilder.Entity<Operation>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkOperation");

                entity.HasIndex(e => e.OperationClassId)
                    .HasName("ixOperationClassIdToOperation");

                entity.Property(e => e.Amount).HasDefaultValueSql("1");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("1");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.EffectiveLife).HasDefaultValueSql("1");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'no label'");

                entity.Property(e => e.Num2)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'no label'");

                entity.Property(e => e.OperationClassId).HasDefaultValueSql("0");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.ResourceWeight).HasDefaultValueSql("1.0");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'acre'");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.OperationClass)
                    .WithMany(p => p.Operation)
                    .HasForeignKey(d => d.OperationClassId)
                    .HasConstraintName("fkOperationToOperationClass");
            });

            modelBuilder.Entity<OperationClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkOperationClass");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixOperationClassToServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixOperationClassToOperationTypeId");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DocStatus).HasDefaultValueSql("4");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A10'");

                entity.Property(e => e.PriceListYorN).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("1");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.OperationClass)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOperationClassToService");

                entity.HasOne(d => d.OperationType)
                    .WithMany(p => p.OperationClass)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOperationTypeToOperationClass");
            });

            modelBuilder.Entity<OperationToInput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkOperationToInput");

                entity.HasIndex(e => e.InputId)
                    .HasName("ixOperationToInputToInputId");

                entity.HasIndex(e => e.OperationId)
                    .HasName("ixOperationToInputToOperationId");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.InputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.InputId).HasDefaultValueSql("1");

                entity.Property(e => e.InputPrice1Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice2Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputPrice3Amount).HasDefaultValueSql("0");

                entity.Property(e => e.InputTimes).HasDefaultValueSql("1");

                entity.Property(e => e.InputUseAOHOnly).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'default'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.OperationId).HasDefaultValueSql("1");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.HasOne(d => d.InputSeries)
                    .WithMany(p => p.OperationToInput)
                    .HasForeignKey(d => d.InputId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkInputSeriesToOperationToInput");

                entity.HasOne(d => d.Operation)
                    .WithMany(p => p.OperationToInput)
                    .HasForeignKey(d => d.OperationId)
                    .HasConstraintName("fkOperationToInputToOperation");
            });

            modelBuilder.Entity<OperationType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_OperationType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Outcome>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Outcome");

                entity.HasIndex(e => e.OutcomeClassId)
                    .HasName("icOutComeToOutcomeClass");

                entity.Property(e => e.Amount).HasDefaultValueSql("1");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("1");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Date)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.EffectiveLife).HasDefaultValueSql("1");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.LastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'no label'");

                entity.Property(e => e.Num2)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'no label2'");

                entity.Property(e => e.OutcomeClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.ResourceWeight).HasDefaultValueSql("1");

                entity.Property(e => e.SalvageValue)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.Unit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'acre'");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.OutcomeClass)
                    .WithMany(p => p.Outcome)
                    .HasForeignKey(d => d.OutcomeClassId)
                    .HasConstraintName("fkOutcomeToOutcomeClass");
            });

            modelBuilder.Entity<OutcomeClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_OutcomeClass");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixOutcomeClassToServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixOutcomeClassToType");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DocStatus).HasDefaultValueSql("4");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A'");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("1");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.OutcomeClass)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutcomeClassToService");

                entity.HasOne(d => d.OutcomeType)
                    .WithMany(p => p.OutcomeClass)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutcomeTypeToOutcomeClass");
            });

            modelBuilder.Entity<OutcomeToOutput>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_OutcomeToOutput");

                entity.HasIndex(e => e.OutcomeId)
                    .HasName("ixOutcomeToOutputToOutcome");

                entity.HasIndex(e => e.OutputId)
                    .HasName("ixOutcomeToOutputToOutputSeries");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.IncentiveAmount)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.IncentiveRate).HasDefaultValueSql("0");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'default'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'no label'");

                entity.Property(e => e.OutcomeId).HasDefaultValueSql("1");

                entity.Property(e => e.OutputAmount1).HasDefaultValueSql("0");

                entity.Property(e => e.OutputCompositionAmount).HasDefaultValueSql("0");

                entity.Property(e => e.OutputCompositionUnit)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'each'");

                entity.Property(e => e.OutputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.OutputId).HasDefaultValueSql("1");

                entity.Property(e => e.OutputTimes).HasDefaultValueSql("1");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Outcome)
                    .WithMany(p => p.OutcomeToOutput)
                    .HasForeignKey(d => d.OutcomeId)
                    .HasConstraintName("fkOutcomeToOutputToOutcome");

                entity.HasOne(d => d.OutputSeries)
                    .WithMany(p => p.OutcomeToOutput)
                    .HasForeignKey(d => d.OutputId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutputSeriesToOutcomeToOutput");
            });

            modelBuilder.Entity<OutcomeType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_OutcomeType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Output>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkOutput");

                entity.HasIndex(e => e.OutputClassId)
                    .HasName("ixOutputToOutputClassId");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("3");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("'no label'");

                entity.Property(e => e.OutputAmount1).HasDefaultValueSql("0");

                entity.Property(e => e.OutputClassId).HasDefaultValueSql("1");

                entity.Property(e => e.OutputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.OutputLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.OutputPrice1)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.OutputUnit1)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no unit'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.OutputClass)
                    .WithMany(p => p.Output)
                    .HasForeignKey(d => d.OutputClassId)
                    .HasConstraintName("fkOutputClassToOutput");
            });

            modelBuilder.Entity<OutputClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkOutputClass");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixOutputClassToServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixOutputClassOutputClassTypeId");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.DocStatus).HasDefaultValueSql("4");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A10'");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("1");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.OutputClass)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutputClassToService");

                entity.HasOne(d => d.OutputType)
                    .WithMany(p => p.OutputClass)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkOutputTypeToOutputClass");
            });

            modelBuilder.Entity<OutputSeries>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkOutputTimeSeries");

                entity.HasIndex(e => e.OutputId)
                    .HasName("ixOutputTimeSeriesOutputId");

                entity.Property(e => e.CurrencyClassId).HasDefaultValueSql("1");

                entity.Property(e => e.DataSourceId).HasDefaultValueSql("1");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.GeoCodeId).HasDefaultValueSql("1");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'no name'");

                entity.Property(e => e.NominalRateId).HasDefaultValueSql("1");

                entity.Property(e => e.Num)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'no label'");

                entity.Property(e => e.OutputAmount1).HasDefaultValueSql("0");

                entity.Property(e => e.OutputDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(12)/(31))/(2002");

                entity.Property(e => e.OutputId).HasDefaultValueSql("1");

                entity.Property(e => e.OutputLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.OutputPrice1)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.OutputUnit1)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("1");

                entity.Property(e => e.RealRateId).HasDefaultValueSql("1");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Output)
                    .WithMany(p => p.OutputSeries)
                    .HasForeignKey(d => d.OutputId)
                    .HasConstraintName("fkOutputToOutputTimeSeries");
            });

            modelBuilder.Entity<OutputType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("unOutputType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'A'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Rate>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Rate");

                entity.HasIndex(e => e.RateClassId)
                    .HasName("IX_RateClassId");

                entity.Property(e => e.RateDate).HasColumnType("datetime");

                entity.Property(e => e.RateEnum)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'nominal'");

                entity.Property(e => e.RateName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.RateClass)
                    .WithMany(p => p.Rate)
                    .HasForeignKey(d => d.RateClassId)
                    .HasConstraintName("FK_Rate_RateClass");
            });

            modelBuilder.Entity<RateClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_RateClass");

                entity.Property(e => e.RateClassName)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.RateClassYear).HasColumnType("datetime");
            });

            modelBuilder.Entity<Rating>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Rating");

                entity.HasIndex(e => e.RatingClassId)
                    .HasName("ixRatingRatingClassId");

                entity.Property(e => e.RatingClassId).HasDefaultValueSql("0");

                entity.Property(e => e.RatingName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.RatingValue).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<RatingClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkRatingClass");

                entity.Property(e => e.RatingClassDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'no description'");

                entity.Property(e => e.RatingClassName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("'no name'");
            });

            modelBuilder.Entity<Resource>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Resource");

                entity.HasIndex(e => e.ResourcePackId)
                    .HasName("ixResourceResourceClassId");

                entity.Property(e => e.ResourceFileName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'no file on hand'");

                entity.Property(e => e.ResourceGeneralType)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'image'");

                entity.Property(e => e.ResourceLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.ResourceLongDesc)
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasDefaultValueSql("N'needs long description'");

                entity.Property(e => e.ResourceMimeType)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'application/xhtml+xml'");

                entity.Property(e => e.ResourceName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.ResourceNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'txt'");

                entity.Property(e => e.ResourcePackId).HasDefaultValueSql("2");

                entity.Property(e => e.ResourceShortDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.ResourceTagNameForApps)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.ResourceXml).HasColumnType("xml");

                entity.HasOne(d => d.ResourcePack)
                    .WithMany(p => p.Resource)
                    .HasForeignKey(d => d.ResourcePackId)
                    .HasConstraintName("fkResourcePackToResource");
            });

            modelBuilder.Entity<ResourceClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_ResourceClass");

                entity.HasIndex(e => e.ServiceId)
                    .HasName("ixResourceClassServiceId");

                entity.HasIndex(e => e.TypeId)
                    .HasName("ixResourceClassResourceTypeId");

                entity.Property(e => e.ResourceClassDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.ResourceClassName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.ResourceClassNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'none'");

                entity.Property(e => e.ServiceId).HasDefaultValueSql("1");

                entity.Property(e => e.TypeId).HasDefaultValueSql("1");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ResourceClass)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkServiceToResourceClass");

                entity.HasOne(d => d.ResourceType)
                    .WithMany(p => p.ResourceClass)
                    .HasForeignKey(d => d.TypeId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkResourceClassToResourceType");
            });

            modelBuilder.Entity<ResourcePack>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_ResourcePack");

                entity.HasIndex(e => e.ResourceClassId)
                    .HasName("ixResourcePackResourceClassId");

                entity.Property(e => e.ResourceClassId).HasDefaultValueSql("1");

                entity.Property(e => e.ResourcePackDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs description'");

                entity.Property(e => e.ResourcePackDocStatus).HasDefaultValueSql("1");

                entity.Property(e => e.ResourcePackKeywords)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'needs keywords'");

                entity.Property(e => e.ResourcePackLastChangedDate)
                    .HasColumnType("smalldatetime")
                    .HasDefaultValueSql("getdate()");

                entity.Property(e => e.ResourcePackMetaDataXml).HasColumnType("xml");

                entity.Property(e => e.ResourcePackName)
                    .IsRequired()
                    .HasMaxLength(75)
                    .HasDefaultValueSql("N'needs name'");

                entity.Property(e => e.ResourcePackNum)
                    .IsRequired()
                    .HasMaxLength(15)
                    .HasDefaultValueSql("N'none'");

                entity.HasOne(d => d.ResourceClass)
                    .WithMany(p => p.ResourcePack)
                    .HasForeignKey(d => d.ResourceClassId)
                    .HasConstraintName("fkResourceClassToResourcePack");
            });

            modelBuilder.Entity<ResourceType>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_ResourceType");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'needs label'");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.NetworkId).HasDefaultValueSql("0");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("0");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_Service");

                entity.HasIndex(e => e.NetworkId)
                    .HasName("ixServiceNetworkId");

                entity.Property(e => e.NetworkId).HasDefaultValueSql("1");

                entity.Property(e => e.ServiceClassId).HasDefaultValueSql("1");

                entity.Property(e => e.ServiceCurrency1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'USA Dollar'");

                entity.Property(e => e.ServiceDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("N'description'");

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("N'name'");

                entity.Property(e => e.ServiceNum)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'label'");

                entity.Property(e => e.ServicePrice1)
                    .HasColumnType("money")
                    .HasDefaultValueSql("0");

                entity.Property(e => e.ServiceUnit1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("N'each'");

                entity.HasOne(d => d.Network)
                    .WithMany(p => p.Service)
                    .HasForeignKey(d => d.NetworkId)
                    .OnDelete(DeleteBehavior.Restrict)
                    .HasConstraintName("fkNetworkToService");

                entity.HasOne(d => d.ServiceClass)
                    .WithMany(p => p.Service)
                    .HasForeignKey(d => d.ServiceClassId)
                    .HasConstraintName("FK_Service_ServiceClass");
            });

            modelBuilder.Entity<ServiceClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_ServiceGroup");

                entity.Property(e => e.ServiceClassDesc)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.ServiceClassName)
                    .IsRequired()
                    .HasMaxLength(75);

                entity.Property(e => e.ServiceClassNum)
                    .IsRequired()
                    .HasMaxLength(25);
            });

            modelBuilder.Entity<Unit>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("pkUnits");

                entity.HasIndex(e => e.UnitClassId)
                    .HasName("ixUnitClassId");

                entity.Property(e => e.UnitClassId).HasDefaultValueSql("1");

                entity.Property(e => e.UnitName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.UnitNameAbbrev)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("'no name'");
            });

            modelBuilder.Entity<UnitClass>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PK_UnitClass");

                entity.Property(e => e.UnitClassDesc)
                    .IsRequired()
                    .HasMaxLength(255)
                    .HasDefaultValueSql("'no description'");

                entity.Property(e => e.UnitClassName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("'no name'");

                entity.Property(e => e.UnitClassType)
                    .IsRequired()
                    .HasMaxLength(25)
                    .HasDefaultValueSql("N'metric'");
            });

            modelBuilder.Entity<UnitConversion>(entity =>
            {
                entity.HasKey(e => e.PKId)
                    .HasName("PkUnitConversion");

                entity.Property(e => e.IsBestConversion).HasDefaultValueSql("0");

                entity.Property(e => e.Unit1Id).HasDefaultValueSql("0");

                entity.Property(e => e.Unit2Id).HasDefaultValueSql("9");

                entity.Property(e => e.UnitConversionFactor).HasDefaultValueSql("1");

                entity.Property(e => e.UnitToClassId).HasDefaultValueSql("1");

                entity.Property(e => e.UnitToName)
                    .IsRequired()
                    .HasMaxLength(150)
                    .HasDefaultValueSql("'no name'");

                entity.HasOne(d => d.Unit1)
                    .WithMany(p => p.UnitConversion)
                    .HasForeignKey(d => d.Unit1Id)
                    .HasConstraintName("fkUnitConversionToUnit");
            });

            modelBuilder.Entity<sysdiagrams>(entity =>
            {
                entity.HasKey(e => e.diagram_id)
                    .HasName("PK__sysdiagrams__4BEC364B");

                entity.HasIndex(e => new { e.principal_id, e.name })
                    .HasName("UK_principal_name")
                    .IsUnique();

                entity.Property(e => e.name)
                    .IsRequired()
                    .HasColumnType("sysname");
            });
        }

        public virtual DbSet<Account> Account { get; set; }
        public virtual DbSet<AccountClass> AccountClass { get; set; }
        public virtual DbSet<AccountToAddIn> AccountToAddIn { get; set; }
        public virtual DbSet<AccountToAudit> AccountToAudit { get; set; }
        public virtual DbSet<AccountToCredit> AccountToCredit { get; set; }
        public virtual DbSet<AccountToIncentive> AccountToIncentive { get; set; }
        public virtual DbSet<AccountToLocal> AccountToLocal { get; set; }
        public virtual DbSet<AccountToMember> AccountToMember { get; set; }
        public virtual DbSet<AccountToNetwork> AccountToNetwork { get; set; }
        public virtual DbSet<AccountToPayment> AccountToPayment { get; set; }
        //2.0.0 handled on UI layer
        public virtual DbSet<AccountToService> AccountToService { get; set; }
        //public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        //public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        //public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        //public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        //public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        //public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<BudgetSystem> BudgetSystem { get; set; }
        public virtual DbSet<BudgetSystemToEnterprise> BudgetSystemToEnterprise { get; set; }
        public virtual DbSet<BudgetSystemToInput> BudgetSystemToInput { get; set; }
        public virtual DbSet<BudgetSystemToOperation> BudgetSystemToOperation { get; set; }
        public virtual DbSet<BudgetSystemToOutcome> BudgetSystemToOutcome { get; set; }
        public virtual DbSet<BudgetSystemToOutput> BudgetSystemToOutput { get; set; }
        public virtual DbSet<BudgetSystemToTime> BudgetSystemToTime { get; set; }
        public virtual DbSet<BudgetSystemType> BudgetSystemType { get; set; }
        public virtual DbSet<Component> Component { get; set; }
        public virtual DbSet<ComponentClass> ComponentClass { get; set; }
        public virtual DbSet<ComponentToInput> ComponentToInput { get; set; }
        public virtual DbSet<ComponentType> ComponentType { get; set; }
        public virtual DbSet<CostSystem> CostSystem { get; set; }
        public virtual DbSet<CostSystemToComponent> CostSystemToComponent { get; set; }
        public virtual DbSet<CostSystemToInput> CostSystemToInput { get; set; }
        public virtual DbSet<CostSystemToOutcome> CostSystemToOutcome { get; set; }
        public virtual DbSet<CostSystemToOutput> CostSystemToOutput { get; set; }
        public virtual DbSet<CostSystemToPractice> CostSystemToPractice { get; set; }
        public virtual DbSet<CostSystemToTime> CostSystemToTime { get; set; }
        public virtual DbSet<CostSystemType> CostSystemType { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<CurrencyClass> CurrencyClass { get; set; }
        public virtual DbSet<CurrencyConversion> CurrencyConversion { get; set; }
        public virtual DbSet<DataSourcePrice> DataSourcePrice { get; set; }
        public virtual DbSet<DataSourceTech> DataSourceTech { get; set; }
        public virtual DbSet<DevPack> DevPack { get; set; }
        public virtual DbSet<DevPackClass> DevPackClass { get; set; }
        public virtual DbSet<DevPackClassToDevPack> DevPackClassToDevPack { get; set; }
        public virtual DbSet<DevPackPart> DevPackPart { get; set; }
        public virtual DbSet<DevPackPartToResourcePack> DevPackPartToResourcePack { get; set; }
        public virtual DbSet<DevPackToDevPackPart> DevPackToDevPackPart { get; set; }
        public virtual DbSet<DevPackType> DevPackType { get; set; }
        public virtual DbSet<GeoCodes> GeoCodes { get; set; }
        public virtual DbSet<GeoRegion> GeoRegion { get; set; }
        public virtual DbSet<Incentive> Incentive { get; set; }
        public virtual DbSet<IncentiveClass> IncentiveClass { get; set; }
        public virtual DbSet<Input> Input { get; set; }
        public virtual DbSet<InputClass> InputClass { get; set; }
        public virtual DbSet<InputSeries> InputSeries { get; set; }
        public virtual DbSet<InputType> InputType { get; set; }
        public virtual DbSet<LinkedView> LinkedView { get; set; }
        public virtual DbSet<LinkedViewClass> LinkedViewClass { get; set; }
        public virtual DbSet<LinkedViewPack> LinkedViewPack { get; set; }
        public virtual DbSet<LinkedViewToBudgetSystem> LinkedViewToBudgetSystem { get; set; }
        public virtual DbSet<LinkedViewToBudgetSystemToEnterprise> LinkedViewToBudgetSystemToEnterprise { get; set; }
        public virtual DbSet<LinkedViewToBudgetSystemToTime> LinkedViewToBudgetSystemToTime { get; set; }
        public virtual DbSet<LinkedViewToComponent> LinkedViewToComponent { get; set; }
        public virtual DbSet<LinkedViewToComponentClass> LinkedViewToComponentClass { get; set; }
        public virtual DbSet<LinkedViewToCostSystem> LinkedViewToCostSystem { get; set; }
        public virtual DbSet<LinkedViewToCostSystemToPractice> LinkedViewToCostSystemToPractice { get; set; }
        public virtual DbSet<LinkedViewToCostSystemToTime> LinkedViewToCostSystemToTime { get; set; }
        public virtual DbSet<LinkedViewToDevPackJoin> LinkedViewToDevPackJoin { get; set; }
        public virtual DbSet<LinkedViewToDevPackPartJoin> LinkedViewToDevPackPartJoin { get; set; }
        public virtual DbSet<LinkedViewToInput> LinkedViewToInput { get; set; }
        public virtual DbSet<LinkedViewToInputClass> LinkedViewToInputClass { get; set; }
        public virtual DbSet<LinkedViewToInputSeries> LinkedViewToInputSeries { get; set; }
        public virtual DbSet<LinkedViewToOperation> LinkedViewToOperation { get; set; }
        public virtual DbSet<LinkedViewToOperationClass> LinkedViewToOperationClass { get; set; }
        public virtual DbSet<LinkedViewToOutcome> LinkedViewToOutcome { get; set; }
        public virtual DbSet<LinkedViewToOutcomeClass> LinkedViewToOutcomeClass { get; set; }
        public virtual DbSet<LinkedViewToOutput> LinkedViewToOutput { get; set; }
        public virtual DbSet<LinkedViewToOutputClass> LinkedViewToOutputClass { get; set; }
        public virtual DbSet<LinkedViewToOutputSeries> LinkedViewToOutputSeries { get; set; }
        public virtual DbSet<LinkedViewToResource> LinkedViewToResource { get; set; }
        public virtual DbSet<LinkedViewToResourcePack> LinkedViewToResourcePack { get; set; }
        public virtual DbSet<LinkedViewType> LinkedViewType { get; set; }
        public virtual DbSet<Member> Member { get; set; }
        public virtual DbSet<MemberClass> MemberClass { get; set; }
        public virtual DbSet<Network> Network { get; set; }
        public virtual DbSet<NetworkClass> NetworkClass { get; set; }
        public virtual DbSet<Operation> Operation { get; set; }
        public virtual DbSet<OperationClass> OperationClass { get; set; }
        public virtual DbSet<OperationToInput> OperationToInput { get; set; }
        public virtual DbSet<OperationType> OperationType { get; set; }
        public virtual DbSet<Outcome> Outcome { get; set; }
        public virtual DbSet<OutcomeClass> OutcomeClass { get; set; }
        public virtual DbSet<OutcomeToOutput> OutcomeToOutput { get; set; }
        public virtual DbSet<OutcomeType> OutcomeType { get; set; }
        public virtual DbSet<Output> Output { get; set; }
        public virtual DbSet<OutputClass> OutputClass { get; set; }
        public virtual DbSet<OutputSeries> OutputSeries { get; set; }
        public virtual DbSet<OutputType> OutputType { get; set; }
        public virtual DbSet<Rate> Rate { get; set; }
        public virtual DbSet<RateClass> RateClass { get; set; }
        public virtual DbSet<Rating> Rating { get; set; }
        public virtual DbSet<RatingClass> RatingClass { get; set; }
        public virtual DbSet<Resource> Resource { get; set; }
        public virtual DbSet<ResourceClass> ResourceClass { get; set; }
        public virtual DbSet<ResourcePack> ResourcePack { get; set; }
        public virtual DbSet<ResourceType> ResourceType { get; set; }
        public virtual DbSet<Service> Service { get; set; }
        public virtual DbSet<ServiceClass> ServiceClass { get; set; }
        public virtual DbSet<Unit> Unit { get; set; }
        public virtual DbSet<UnitClass> UnitClass { get; set; }
        public virtual DbSet<UnitConversion> UnitConversion { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        protected void Dispose(bool disposing)
        {
            //close the connection to the database
            base.Database.CloseConnection();
            base.Dispose();
        }
    }
}